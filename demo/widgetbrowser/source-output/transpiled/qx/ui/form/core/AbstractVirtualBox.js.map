{
  "version": 3,
  "sources": [
    "AbstractVirtualBox.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "form",
    "MForm",
    "implement",
    "IForm",
    "type",
    "construct",
    "model",
    "layout",
    "HBox",
    "_setLayout",
    "setAlignY",
    "addListener",
    "_handleKeyboard",
    "_handlePointer",
    "_onBlur",
    "_onResize",
    "_createChildControl",
    "initModel",
    "__defaultModel",
    "data",
    "Array",
    "properties",
    "focusable",
    "refine",
    "init",
    "width",
    "check",
    "apply",
    "event",
    "nullable",
    "deferredInit",
    "delegate",
    "labelPath",
    "labelOptions",
    "iconPath",
    "iconOptions",
    "itemHeight",
    "themeable",
    "maxListHeight",
    "members",
    "_forwardStates",
    "focused",
    "invalid",
    "refresh",
    "getChildControl",
    "queue",
    "add",
    "open",
    "_beforeOpen",
    "close",
    "_beforeClose",
    "toggle",
    "dropDown",
    "isVisible",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "VirtualDropDownList",
    "_onPopupChangeVisibility",
    "_getAction",
    "keyIdentifier",
    "getKeyIdentifier",
    "isOpen",
    "isModifierPressed",
    "_isModifierPressed",
    "_getBindPath",
    "source",
    "path",
    "bindPath",
    "isAltPressed",
    "isCtrlOrCommandPressed",
    "isShiftPressed",
    "isMetaPressed",
    "action",
    "setMinWidth",
    "getData",
    "addState",
    "removeState",
    "_applyModel",
    "value",
    "old",
    "setModel",
    "_applyDelegate",
    "setDelegate",
    "_applyLabelPath",
    "setLabelPath",
    "_applyLabelOptions",
    "setLabelOptions",
    "_applyIconPath",
    "setIconPath",
    "_applyIconOptions",
    "setIconOptions",
    "_applyRowHeight",
    "setItemHeight",
    "_applyMaxListHeight",
    "setMaxHeight",
    "destruct",
    "dispose",
    "AbstractVirtualBox"
  ],
  "mappings": "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",
  "file": "AbstractVirtualBox.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Basic class for widgets which need a virtual list as popup for example a\n * SelectBox. It's basically supports a drop-down as popup with a virtual list\n * and the whole children management.\n *\n * @childControl dropdown {qx.ui.form.core.VirtualDropDownList} The drop-down list.\n */\nqx.Class.define(\"qx.ui.form.core.AbstractVirtualBox\",\n{\n  extend  : qx.ui.core.Widget,\n  include : qx.ui.form.MForm,\n  implement : qx.ui.form.IForm,\n  type : \"abstract\",\n\n\n  /**\n   * @param model {qx.data.Array?null} The model data for the widget.\n   */\n  construct : function(model)\n  {\n    this.base(arguments);\n\n    // set the layout\n    var layout = new qx.ui.layout.HBox();\n    this._setLayout(layout);\n    layout.setAlignY(\"middle\");\n\n    // Register listeners\n    this.addListener(\"keypress\", this._handleKeyboard, this);\n    this.addListener(\"tap\", this._handlePointer, this);\n    this.addListener(\"blur\", this._onBlur, this);\n    this.addListener(\"resize\", this._onResize, this);\n\n    this._createChildControl(\"dropdown\");\n\n    if (model != null) {\n      this.initModel(model);\n    } else {\n      this.__defaultModel = new qx.data.Array();\n      this.initModel(this.__defaultModel);\n    }\n  },\n\n\n  properties :\n  {\n    // overridden\n    focusable :\n    {\n      refine : true,\n      init : true\n    },\n\n\n    // overridden\n    width :\n    {\n      refine : true,\n      init : 120\n    },\n\n\n    /** Data array containing the data which should be shown in the drop-down. */\n    model :\n    {\n      check : \"qx.data.Array\",\n      apply : \"_applyModel\",\n      event: \"changeModel\",\n      nullable : false,\n      deferredInit : true\n    },\n\n\n    /**\n     * Delegation object which can have one or more functions defined by the\n     * {@link qx.ui.list.core.IListDelegate} interface.\n     */\n    delegate :\n    {\n      apply: \"_applyDelegate\",\n      event: \"changeDelegate\",\n      init: null,\n      nullable: true\n    },\n\n\n    /**\n     * The path to the property which holds the information that should be\n     * displayed as a label. This is only needed if objects are stored in the\n     * model.\n     */\n    labelPath :\n    {\n      check: \"String\",\n      apply: \"_applyLabelPath\",\n      event: \"changeLabelPath\",\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions :\n    {\n      apply: \"_applyLabelOptions\",\n      event: \"changeLabelOptions\",\n      nullable: true\n    },\n\n\n    /**\n     * The path to the property which holds the information that should be\n     * displayed as an icon. This is only needed if objects are stored in the\n     * model and icons should be displayed.\n     */\n    iconPath :\n    {\n      check: \"String\",\n      event : \"changeIconPath\",\n      apply: \"_applyIconPath\",\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions :\n    {\n      apply: \"_applyIconOptions\",\n      event : \"changeIconOptions\",\n      nullable: true\n    },\n\n\n    /** Default item height. */\n    itemHeight :\n    {\n      check : \"Integer\",\n      init : 25,\n      apply : \"_applyRowHeight\",\n      themeable : true\n    },\n\n\n    /**\n     * The maximum height of the drop-down list. Setting this value to\n     * <code>null</code> will set cause the list to be auto-sized.\n     */\n    maxListHeight :\n    {\n      check : \"Number\",\n      apply : \"_applyMaxListHeight\",\n      nullable: true,\n      init : 200\n    }\n  },\n\n\n  members :\n  {\n    __defaultModel : null,\n\n    /**\n     * @lint ignoreReferenceField(_forwardStates)\n     */\n    _forwardStates : {\n      focused : true,\n      invalid : true\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Trigger a rebuild from the internal data structure.\n     */\n    refresh : function()\n    {\n      this.getChildControl(\"dropdown\").getChildControl(\"list\").refresh();\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    /**\n     * Shows the drop-down.\n     */\n    open : function() {\n      this._beforeOpen();\n      this.getChildControl(\"dropdown\").open();\n    },\n\n\n    /**\n     * Hides the drop-down.\n     */\n    close : function() {\n      this._beforeClose();\n      this.getChildControl(\"dropdown\").close();\n    },\n\n\n    /**\n     * Toggles the drop-down visibility.\n     */\n    toggle : function() {\n      var dropDown =this.getChildControl(\"dropdown\");\n\n      if (dropDown.isVisible()) {\n        this.close();\n      } else {\n        this.open();\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"dropdown\":\n          control = new qx.ui.form.core.VirtualDropDownList(this);\n          control.addListener(\"changeVisibility\", this._onPopupChangeVisibility, this);\n          break;\n      }\n\n      return control || this.base(arguments, id, hash);\n    },\n\n\n    /**\n     * This method is called before the drop-down is opened.\n     */\n    _beforeOpen: function() {},\n\n\n    /**\n     * This method is called before the drop-down is closed.\n     */\n    _beforeClose: function() {},\n\n\n    /**\n     * Returns the action dependent on the user interaction: e. q. <code>open</code>,\n     * or <code>close</code>.\n     *\n     * @param event {qx.event.type.KeySequence} The keyboard event.\n     * @return {String|null} The action or <code>null</code> when interaction\n     *  doesn't hit any action.\n     */\n    _getAction : function(event)\n    {\n      var keyIdentifier = event.getKeyIdentifier();\n      var isOpen = this.getChildControl(\"dropdown\").isVisible();\n      var isModifierPressed = this._isModifierPressed(event);\n\n      if (\n        !isOpen && !isModifierPressed &&\n        (keyIdentifier === \"Down\" || keyIdentifier === \"Up\")\n      ) {\n        return \"open\";\n      } else if (\n        isOpen && !isModifierPressed && keyIdentifier === \"Escape\"\n      ) {\n        return \"close\";\n      } else {\n        return null;\n      }\n    },\n\n\n    /**\n     * Helper Method to create bind path depended on the passed path.\n     *\n     * @param source {String} The path to the selection.\n     * @param path {String?null} The path to the item's property.\n     * @return {String} The created path.\n     */\n    _getBindPath : function(source, path)\n    {\n      var bindPath = source + \"[0]\";\n\n      if (path != null && path != \"\") {\n        bindPath += \".\" + path;\n      }\n\n      return bindPath;\n    },\n\n    /**\n     * Helper method to check if one modifier key is pressed. e.q.\n     * <code>Control</code>, <code>Shift</code>, <code>Meta</code> or\n     * <code>Alt</code>.\n     *\n     * @param event {qx.event.type.KeySequence} The keyboard event.\n     * @return {Boolean} <code>True</code> when a modifier key is pressed,\n     *   <code>false</code> otherwise.\n     */\n    _isModifierPressed : function(event)\n    {\n      var isAltPressed = event.isAltPressed();\n      var isCtrlOrCommandPressed = event.isCtrlOrCommandPressed();\n      var isShiftPressed = event.isShiftPressed();\n      var isMetaPressed = event.isMetaPressed();\n\n      return (isAltPressed || isCtrlOrCommandPressed ||\n        isShiftPressed || isMetaPressed);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Handler for the blur event of the current widget.\n     *\n     * @param event {qx.event.type.Focus} The blur event.\n     */\n    _onBlur : function(event) {\n      this.close();\n    },\n\n\n    /**\n     * Handles the complete keyboard events for user interaction. If there is\n     * no defined user interaction {@link #_getAction}, the event is delegated\n     * to the {@link qx.ui.form.core.VirtualDropDownList#_handleKeyboard} method.\n     *\n     * @param event {qx.event.type.KeySequence} The keyboard event.\n     */\n    _handleKeyboard : function(event)\n    {\n      var action = this._getAction(event);\n      var isOpen = this.getChildControl(\"dropdown\").isVisible();\n\n      switch(action)\n      {\n        case \"open\":\n          this.open();\n          break;\n\n        case \"close\":\n          this.close();\n          break;\n\n        default:\n          if (isOpen) {\n            this.getChildControl(\"dropdown\")._handleKeyboard(event);\n          }\n          break;\n      }\n    },\n\n\n    /**\n     * Handles all pointer events dispatched on the widget.\n     *\n     * @param event {qx.event.type.Pointer|qx.event.type.Roll} The pointer event.\n     */\n    _handlePointer : function(event) {},\n\n\n    /**\n     * Updates drop-down minimum size.\n     *\n     * @param event {qx.event.type.Data} Data event.\n     */\n    _onResize : function(event){\n      this.getChildControl(\"dropdown\").setMinWidth(event.getData().width);\n    },\n\n\n    /**\n     * Adds/removes the state 'popupOpen' depending on the visibility of the popup\n     *\n     * @param event {qx.event.type.Data} Data event\n     */\n    _onPopupChangeVisibility : function(event)\n    {\n      event.getData() == \"visible\" ? this.addState(\"popupOpen\") : this.removeState(\"popupOpen\");\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n\n    // property apply\n    _applyModel : function(value, old)\n    {\n      this.getChildControl(\"dropdown\").getChildControl(\"list\").setModel(value);\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    // property apply\n    _applyDelegate : function(value, old) {\n      this.getChildControl(\"dropdown\").getChildControl(\"list\").setDelegate(value);\n    },\n\n\n    // property apply\n    _applyLabelPath : function(value, old)\n    {\n      this.getChildControl(\"dropdown\").getChildControl(\"list\").setLabelPath(value);\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    // property apply\n    _applyLabelOptions : function(value, old)\n    {\n      this.getChildControl(\"dropdown\").getChildControl(\"list\").setLabelOptions(value);\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    // property apply\n    _applyIconPath : function(value, old)\n    {\n      this.getChildControl(\"dropdown\").getChildControl(\"list\").setIconPath(value);\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    // property apply\n    _applyIconOptions : function(value, old)\n    {\n      this.getChildControl(\"dropdown\").getChildControl(\"list\").setIconOptions(value);\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    // property apply\n    _applyRowHeight : function(value, old) {\n      this.getChildControl(\"dropdown\").getChildControl(\"list\").setItemHeight(value);\n    },\n\n\n    // property apply\n    _applyMaxListHeight : function(value, old) {\n      this.getChildControl(\"dropdown\").getChildControl(\"list\").setMaxHeight(value);\n    }\n  },\n\n  destruct : function()\n  {\n    if (this.__defaultModel) {\n      this.__defaultModel.dispose();\n    }\n  }\n});\n"
  ]
}