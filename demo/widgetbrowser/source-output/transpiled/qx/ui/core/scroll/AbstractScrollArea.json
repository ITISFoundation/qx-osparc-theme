{
  "className": "qx.ui.core.scroll.AbstractScrollArea",
  "packageName": "qx.ui.core.scroll",
  "name": "AbstractScrollArea",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [],
  "mixins": [
    "qx.ui.core.scroll.MScrollBarFactory",
    "qx.ui.core.scroll.MRoll",
    "qx.ui.core.MDragDropScrolling"
  ],
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0
      },
      "end": {
        "line": 639,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The ScrollArea provides a container widget with on demand scroll bars\nif the content size exceeds the size of the container."
        }
      ],
      "@childControl": [
        {
          "name": "@childControl",
          "body": "pane {qx.ui.core.scroll.ScrollPane} pane which holds the content to scroll"
        },
        {
          "name": "@childControl",
          "body": "scrollbar-x {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar} horizontal scrollbar"
        },
        {
          "name": "@childControl",
          "body": "scrollbar-y {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar} vertical scrollbar"
        },
        {
          "name": "@childControl",
          "body": "corner {qx.ui.core.Widget} corner where no scrollbar is shown"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 63,
        "column": 2
      },
      "end": {
        "line": 86,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 108,
          "column": 4
        },
        "end": {
          "line": 112,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "defaultValue": "scrollarea",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "scrollbarX": {
      "location": {
        "start": {
          "line": 123,
          "column": 4
        },
        "end": {
          "line": 129,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The policy, when the horizontal scrollbar should be shown.\n<ul>\n<li><b>auto</b>: Show scrollbar on demand</li>\n<li><b>on</b>: Always show the scrollbar</li>\n<li><b>off</b>: Never show the scrollbar</li>\n</ul>"
          }
        ]
      },
      "name": "scrollbarX",
      "propertyType": "new",
      "themeable": true,
      "apply": "_computeScrollbars",
      "possibleValues": [
        "auto",
        "on",
        "off"
      ],
      "defaultValue": "auto"
    },
    "scrollbarY": {
      "location": {
        "start": {
          "line": 140,
          "column": 4
        },
        "end": {
          "line": 146,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The policy, when the horizontal scrollbar should be shown.\n<ul>\n<li><b>auto</b>: Show scrollbar on demand</li>\n<li><b>on</b>: Always show the scrollbar</li>\n<li><b>off</b>: Never show the scrollbar</li>\n</ul>"
          }
        ]
      },
      "name": "scrollbarY",
      "propertyType": "new",
      "themeable": true,
      "apply": "_computeScrollbars",
      "possibleValues": [
        "auto",
        "on",
        "off"
      ],
      "defaultValue": "auto"
    },
    "scrollbar": {
      "location": {
        "start": {
          "line": 152,
          "column": 4
        },
        "end": {
          "line": 154,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Group property, to set the overflow of both scroll bars."
          }
        ]
      },
      "name": "scrollbar",
      "propertyType": "new"
    },
    "dragScrollThresholdX": {
      "type": "property",
      "name": "dragScrollThresholdX",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling"
    },
    "dragScrollThresholdY": {
      "type": "property",
      "name": "dragScrollThresholdY",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling"
    },
    "dragScrollSlowDownFactor": {
      "type": "property",
      "name": "dragScrollSlowDownFactor",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling"
    }
  },
  "members": {
    "_createChildControlImpl": {
      "location": {
        "start": {
          "line": 177,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCHILD CONTROL SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "paramName": "id",
            "description": " ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "hash {String?undefined} If a child control name contains a #,\nall text following the # will be the hash argument.",
            "paramName": "hash",
            "description": " If a child control name contains a #,\nall text following the # will be the hash argument.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The created control or <code>null</code>",
            "type": "qx.ui.core.Widget",
            "desc": " The created control or <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "getPaneSize": {
      "location": {
        "start": {
          "line": 265,
          "column": 4
        },
        "end": {
          "line": 267,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPANE SIZE\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns the dimensions of the pane."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|null} The pane dimension in pixel. Contains\nthe keys <code>width</code> and <code>height</code>.",
            "type": "Map|null",
            "desc": " The pane dimension in pixel. Contains\nthe keys <code>width</code> and <code>height</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getItemTop": {
      "location": {
        "start": {
          "line": 287,
          "column": 4
        },
        "end": {
          "line": 289,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nITEM LOCATION SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns the top offset of the given item in relation to the\ninner height of this widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Item to query",
            "paramName": "item",
            "description": " Item to query",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Top offset",
            "type": "Integer",
            "desc": " Top offset"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getItemBottom": {
      "location": {
        "start": {
          "line": 299,
          "column": 4
        },
        "end": {
          "line": 301,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the top offset of the end of the given item in relation to the\ninner height of this widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Item to query",
            "paramName": "item",
            "description": " Item to query",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Top offset",
            "type": "Integer",
            "desc": " Top offset"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getItemLeft": {
      "location": {
        "start": {
          "line": 311,
          "column": 4
        },
        "end": {
          "line": 313,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the left offset of the given item in relation to the\ninner width of this widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Item to query",
            "paramName": "item",
            "description": " Item to query",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Top offset",
            "type": "Integer",
            "desc": " Top offset"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getItemRight": {
      "location": {
        "start": {
          "line": 323,
          "column": 4
        },
        "end": {
          "line": 325,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the left offset of the end of the given item in relation to the\ninner width of this widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Item to query",
            "paramName": "item",
            "description": " Item to query",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Right offset",
            "type": "Integer",
            "desc": " Right offset"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollToX": {
      "location": {
        "start": {
          "line": 343,
          "column": 4
        },
        "end": {
          "line": 348,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSCROLL SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Scrolls the element's content to the given left coordinate"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} The vertical position to scroll to.",
            "paramName": "value",
            "description": " The vertical position to scroll to.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number?} The time in milliseconds the scroll to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the scroll to should take.",
            "optional": true,
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollByX": {
      "location": {
        "start": {
          "line": 357,
          "column": 4
        },
        "end": {
          "line": 362,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Scrolls the element's content by the given left offset"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} The vertical position to scroll to.",
            "paramName": "value",
            "description": " The vertical position to scroll to.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number?} The time in milliseconds the scroll to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the scroll to should take.",
            "optional": true,
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScrollX": {
      "location": {
        "start": {
          "line": 370,
          "column": 4
        },
        "end": {
          "line": 374,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the scroll left position of the content"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Horizontal scroll position",
            "type": "Integer",
            "desc": " Horizontal scroll position"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollToY": {
      "location": {
        "start": {
          "line": 383,
          "column": 4
        },
        "end": {
          "line": 388,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Scrolls the element's content to the given top coordinate"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} The horizontal position to scroll to.",
            "paramName": "value",
            "description": " The horizontal position to scroll to.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number?} The time in milliseconds the scroll to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the scroll to should take.",
            "optional": true,
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollByY": {
      "location": {
        "start": {
          "line": 397,
          "column": 4
        },
        "end": {
          "line": 402,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Scrolls the element's content by the given top offset"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} The horizontal position to scroll to.",
            "paramName": "value",
            "description": " The horizontal position to scroll to.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number?} The time in milliseconds the scroll to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the scroll to should take.",
            "optional": true,
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScrollY": {
      "location": {
        "start": {
          "line": 410,
          "column": 4
        },
        "end": {
          "line": 414,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the scroll top position of the content"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Vertical scroll position",
            "type": "Integer",
            "desc": " Vertical scroll position"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stopScrollAnimationX": {
      "location": {
        "start": {
          "line": 421,
          "column": 4
        },
        "end": {
          "line": 426,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "In case a scroll animation is currently running in X direction,\nit will be stopped. If not, the method does nothing."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stopScrollAnimationY": {
      "location": {
        "start": {
          "line": 433,
          "column": 4
        },
        "end": {
          "line": 438,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "In case a scroll animation is currently running in X direction,\nit will be stopped. If not, the method does nothing."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onScrollAnimationEnd": {
      "location": {
        "start": {
          "line": 452,
          "column": 4
        },
        "end": {
          "line": 454,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT LISTENERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Event handler for the scroll animation end event for both scroll bars."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "direction {String} Either \"X\" or \"Y\".",
            "paramName": "direction",
            "description": " Either \"X\" or \"Y\".",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onScrollBarX": {
      "location": {
        "start": {
          "line": 461,
          "column": 4
        },
        "end": {
          "line": 463,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for the scroll event of the horizontal scrollbar"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The scroll event object",
            "paramName": "e",
            "description": " The scroll event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onScrollBarY": {
      "location": {
        "start": {
          "line": 471,
          "column": 4
        },
        "end": {
          "line": 473,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for the scroll event of the vertical scrollbar"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The scroll event object",
            "paramName": "e",
            "description": " The scroll event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onScrollPaneX": {
      "location": {
        "start": {
          "line": 481,
          "column": 4
        },
        "end": {
          "line": 486,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for the horizontal scroll event of the pane"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The scroll event object",
            "paramName": "e",
            "description": " The scroll event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onScrollPaneY": {
      "location": {
        "start": {
          "line": 494,
          "column": 4
        },
        "end": {
          "line": 499,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for the vertical scroll event of the pane"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The scroll event object",
            "paramName": "e",
            "description": " The scroll event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onChangeScrollbarXVisibility": {
      "location": {
        "start": {
          "line": 507,
          "column": 4
        },
        "end": {
          "line": 517,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for visibility changes of horizontal scrollbar."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Property change event",
            "paramName": "e",
            "description": " Property change event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onChangeScrollbarYVisibility": {
      "location": {
        "start": {
          "line": 525,
          "column": 4
        },
        "end": {
          "line": 535,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for visibility changes of horizontal scrollbar."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Property change event",
            "paramName": "e",
            "description": " Property change event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_computeScrollbars": {
      "location": {
        "start": {
          "line": 550,
          "column": 4
        },
        "end": {
          "line": 637,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nHELPER METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Computes the visibility state for scrollbars."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_createScrollBar": {
      "type": "function",
      "name": "_createScrollBar",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.scroll.MScrollBarFactory",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates a new scrollbar. This can either be a styled qooxdoo scrollbar\nor a native browser scrollbar."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "orientation {String?\"horizontal\"} The initial scroll bar orientation",
            "paramName": "orientation",
            "description": " The initial scroll bar orientation",
            "optional": true,
            "defaultValue": "\"horizontal\"",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.scroll.IScrollBar} The scrollbar instance",
            "type": "qx.ui.core.scroll.IScrollBar",
            "desc": " The scrollbar instance"
          }
        ]
      }
    },
    "_addRollHandling": {
      "type": "function",
      "name": "_addRollHandling",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.scroll.MRoll"
    },
    "_removeRollHandling": {
      "type": "function",
      "name": "_removeRollHandling",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.scroll.MRoll"
    },
    "_onPointerDownForRoll": {
      "type": "function",
      "name": "_onPointerDownForRoll",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.scroll.MRoll",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handler for the pointerdown event which simply stops the momentum scrolling."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointerdown event",
            "paramName": "e",
            "description": " pointerdown event",
            "type": "qx.event.type.Pointer"
          }
        ]
      }
    },
    "_onRoll": {
      "type": "function",
      "name": "_onRoll",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.scroll.MRoll",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Roll event handler"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Roll} Roll event",
            "paramName": "e",
            "description": " Roll event",
            "type": "qx.event.type.Roll"
          }
        ]
      }
    },
    "_findScrollableParent": {
      "type": "function",
      "name": "_findScrollableParent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Finds the first scrollable parent (in the parent chain)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.LayoutItem} The widget to start from.",
            "paramName": "widget",
            "description": " The widget to start from.",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} A scrollable widget.",
            "type": "qx.ui.core.Widget",
            "desc": " A scrollable widget."
          }
        ]
      }
    },
    "_isScrollable": {
      "type": "function",
      "name": "_isScrollable",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget is scrollable."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to check.",
            "paramName": "widget",
            "description": " The widget to check.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the widget is scrollable.",
            "type": "Boolean",
            "desc": " Whether the widget is scrollable."
          }
        ]
      }
    },
    "_getBounds": {
      "type": "function",
      "name": "_getBounds",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the bounds of the given scrollable."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
            "paramName": "scrollable",
            "description": " Scrollable which has scrollbar child controls.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with all four bounds (e.g. {\"left\":0, \"top\":20, \"right\":0, \"bottom\":80}).",
            "type": "Map",
            "desc": " A map with all four bounds (e.g. {\"left\":0, \"top\":20, \"right\":0, \"bottom\":80})."
          }
        ]
      }
    },
    "_getEdgeType": {
      "type": "function",
      "name": "_getEdgeType",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the edge type or null if the pointer isn't within one of the thresholds."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "diff {Map} Difference map with all for edgeTypes.",
            "paramName": "diff",
            "description": " Difference map with all for edgeTypes.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "thresholdX {Number} x-axis threshold.",
            "paramName": "thresholdX",
            "description": " x-axis threshold.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "thresholdY {Number} y-axis threshold.",
            "paramName": "thresholdY",
            "description": " y-axis threshold.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "type": "String",
            "desc": " One of the four edgeTypes ('left', 'right', 'top', 'bottom')."
          }
        ]
      }
    },
    "_getAxis": {
      "type": "function",
      "name": "_getAxis",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the axis ('x' or 'y') by the edge type."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "edgeType {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "paramName": "edgeType",
            "description": " One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "type": "String"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If edgeType is not one of the distinct four ones."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Returns 'y' or 'x'.",
            "type": "String",
            "desc": " Returns 'y' or 'x'."
          }
        ]
      }
    },
    "_getThresholdByEdgeType": {
      "type": "function",
      "name": "_getThresholdByEdgeType",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the threshold amount by edge type."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "edgeType {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "paramName": "edgeType",
            "description": " One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The threshold of the x or y axis.",
            "type": "Number",
            "desc": " The threshold of the x or y axis."
          }
        ]
      }
    },
    "_isScrollbarVisible": {
      "type": "function",
      "name": "_isScrollbarVisible",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the scrollbar is visible."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
            "paramName": "scrollable",
            "description": " Scrollable which has scrollbar child controls.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "axis {String} Can be 'y' or 'x'.",
            "paramName": "axis",
            "description": " Can be 'y' or 'x'.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the scrollbar is visible.",
            "type": "Boolean",
            "desc": " Whether the scrollbar is visible."
          }
        ]
      }
    },
    "_isScrollbarExceedingMaxPos": {
      "type": "function",
      "name": "_isScrollbarExceedingMaxPos",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the scrollbar is exceeding it's maximum position."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollbar {qx.ui.core.scroll.IScrollBar} Scrollbar to check.",
            "paramName": "scrollbar",
            "description": " Scrollbar to check.",
            "type": "qx.ui.core.scroll.IScrollBar"
          },
          {
            "name": "@param",
            "body": "axis {String} Can be 'y' or 'x'.",
            "paramName": "axis",
            "description": " Can be 'y' or 'x'.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "amount {Number} Amount to scroll which may be negative.",
            "paramName": "amount",
            "description": " Amount to scroll which may be negative.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the amount will exceed the scrollbar max position.",
            "type": "Boolean",
            "desc": " Whether the amount will exceed the scrollbar max position."
          }
        ]
      }
    },
    "_calculateThresholdExceedance": {
      "type": "function",
      "name": "_calculateThresholdExceedance",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Calculates the threshold exceedance (which may be negative)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "diff {Number} Difference value of one edgeType.",
            "paramName": "diff",
            "description": " Difference value of one edgeType.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "threshold {Number} x-axis or y-axis threshold.",
            "paramName": "threshold",
            "description": " x-axis or y-axis threshold.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Threshold exceedance amount (positive or negative).",
            "type": "Number",
            "desc": " Threshold exceedance amount (positive or negative)."
          }
        ]
      }
    },
    "_calculateScrollAmount": {
      "type": "function",
      "name": "_calculateScrollAmount",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Calculates the scroll amount (which may be negative).\nThe amount is influenced by the scrollbar size (bigger = faster)\nthe exceedanceAmount (bigger = faster) and the slowDownFactor."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollbarSize {Number} Size of the scrollbar.",
            "paramName": "scrollbarSize",
            "description": " Size of the scrollbar.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "exceedanceAmount {Number} Threshold exceedance amount (positive or negative).",
            "paramName": "exceedanceAmount",
            "description": " Threshold exceedance amount (positive or negative).",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Scroll amount (positive or negative).",
            "type": "Number",
            "desc": " Scroll amount (positive or negative)."
          }
        ]
      }
    },
    "_scrollBy": {
      "type": "function",
      "name": "_scrollBy",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Scrolls the given scrollable on the given axis for the given amount."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
            "paramName": "scrollable",
            "description": " Scrollable which has scrollbar child controls.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "axis {String} Can be 'y' or 'x'.",
            "paramName": "axis",
            "description": " Can be 'y' or 'x'.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "exceedanceAmount {Number} Threshold exceedance amount (positive or negative).",
            "paramName": "exceedanceAmount",
            "description": " Threshold exceedance amount (positive or negative).",
            "type": "Number"
          }
        ]
      }
    },
    "__onDrag": {
      "type": "function",
      "name": "__onDrag",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT HANDLERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Event handler for the drag event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} The drag event instance.",
            "paramName": "e",
            "description": " The drag event instance.",
            "type": "qx.event.type.Drag"
          }
        ]
      }
    },
    "__onDragend": {
      "type": "function",
      "name": "__onDragend",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for the dragend event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} The drag event instance.",
            "paramName": "e",
            "description": " The drag event instance.",
            "type": "qx.event.type.Drag"
          }
        ]
      }
    },
    "getDragScrollThresholdX": {
      "type": "function",
      "name": "getDragScrollThresholdX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDragScrollThresholdX": {
      "type": "function",
      "name": "setDragScrollThresholdX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDragScrollThresholdX": {
      "type": "function",
      "name": "resetDragScrollThresholdX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getDragScrollThresholdY": {
      "type": "function",
      "name": "getDragScrollThresholdY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDragScrollThresholdY": {
      "type": "function",
      "name": "setDragScrollThresholdY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDragScrollThresholdY": {
      "type": "function",
      "name": "resetDragScrollThresholdY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getDragScrollSlowDownFactor": {
      "type": "function",
      "name": "getDragScrollSlowDownFactor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Float",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDragScrollSlowDownFactor": {
      "type": "function",
      "name": "setDragScrollSlowDownFactor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Float",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDragScrollSlowDownFactor": {
      "type": "function",
      "name": "resetDragScrollSlowDownFactor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getScrollbarX": {
      "type": "function",
      "name": "getScrollbarX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setScrollbarX": {
      "type": "function",
      "name": "setScrollbarX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetScrollbarX": {
      "type": "function",
      "name": "resetScrollbarX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getScrollbarY": {
      "type": "function",
      "name": "getScrollbarY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setScrollbarY": {
      "type": "function",
      "name": "setScrollbarY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetScrollbarY": {
      "type": "function",
      "name": "resetScrollbarY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getScrollbar": {
      "type": "function",
      "name": "getScrollbar",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setScrollbar": {
      "type": "function",
      "name": "setScrollbar",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetScrollbar": {
      "type": "function",
      "name": "resetScrollbar",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "descendants": [
    "qx.ui.container.Scroll",
    "qx.ui.form.List",
    "qx.ui.tree.Tree",
    "qx.ui.virtual.core.Scroller"
  ]
}