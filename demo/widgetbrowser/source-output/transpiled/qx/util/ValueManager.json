{
  "className": "qx.util.ValueManager",
  "packageName": "qx.util",
  "name": "ValueManager",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 112,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Abstract base class for all managers of themed values."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 37,
        "column": 2
      },
      "end": {
        "line": 43,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "members": {
    "_dynamic": {
      "location": {
        "start": {
          "line": 56,
          "column": 4
        },
        "end": {
          "line": 56,
          "column": 19
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "resolveDynamic": {
      "location": {
        "start": {
          "line": 64,
          "column": 4
        },
        "end": {
          "line": 66,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the dynamically interpreted result for the incoming value"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} dynamically interpreted identifier",
            "paramName": "value",
            "description": " dynamically interpreted identifier",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} return the (translated) result of the incoming value",
            "type": "var",
            "desc": " return the (translated) result of the incoming value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isDynamic": {
      "location": {
        "start": {
          "line": 75,
          "column": 4
        },
        "end": {
          "line": 77,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether a value is interpreted dynamically"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} dynamically interpreted identifier",
            "paramName": "value",
            "description": " dynamically interpreted identifier",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} returns true if the value is interpreted dynamically",
            "type": "Boolean",
            "desc": " returns true if the value is interpreted dynamically"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "resolve": {
      "location": {
        "start": {
          "line": 86,
          "column": 4
        },
        "end": {
          "line": 93,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the dynamically interpreted result for the incoming value,\n(if available), otherwise returns the original value"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} Value to resolve",
            "paramName": "value",
            "description": " Value to resolve",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} either returns the (translated) result of the incoming\nvalue or the value itself",
            "type": "var",
            "desc": " either returns the (translated) result of the incoming\nvalue or the value itself"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_setDynamic": {
      "location": {
        "start": {
          "line": 99,
          "column": 4
        },
        "end": {
          "line": 101,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the dynamics map."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Map} The map.",
            "paramName": "value",
            "description": " The map.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getDynamic": {
      "location": {
        "start": {
          "line": 107,
          "column": 4
        },
        "end": {
          "line": 109,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the dynamics map."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The map.",
            "type": "Map",
            "desc": " The map."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    }
  },
  "descendants": [
    "qx.util.AliasManager",
    "qx.theme.manager.Color",
    "qx.theme.manager.Font"
  ]
}