{
  "className": "qx.ui.table.pane.Pane",
  "packageName": "qx.ui.table.pane",
  "name": "Pane",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0
      },
      "end": {
        "line": 738,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2006 STZ-IDA, Germany, http://www.stz-ida.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nTil Schneider (til132)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The table pane that shows a certain section from a table. This class handles\nthe display of the data part of a table and is therefore the base for virtual\nscrolling."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 41,
        "column": 2
      },
      "end": {
        "line": 51,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "paneScroller {qx.ui.table.pane.Scroller} the TablePaneScroller the header belongs to.",
          "paramName": "paneScroller",
          "description": " the TablePaneScroller the header belongs to.",
          "type": "qx.ui.table.pane.Scroller"
        }
      ]
    }
  },
  "properties": {
    "firstVisibleRow": {
      "location": {
        "start": {
          "line": 89,
          "column": 4
        },
        "end": {
          "line": 94,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The index of the first row to show."
          }
        ]
      },
      "name": "firstVisibleRow",
      "propertyType": "new",
      "apply": "_applyFirstVisibleRow",
      "check": "Number",
      "defaultValue": 0
    },
    "visibleRowCount": {
      "location": {
        "start": {
          "line": 98,
          "column": 4
        },
        "end": {
          "line": 103,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The number of rows to show."
          }
        ]
      },
      "name": "visibleRowCount",
      "propertyType": "new",
      "apply": "_applyVisibleRowCount",
      "check": "Number",
      "defaultValue": 0
    },
    "maxCacheLines": {
      "location": {
        "start": {
          "line": 110,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Maximum number of cached rows. If the value is <code>-1</code> the cache\nsize is unlimited"
          }
        ]
      },
      "name": "maxCacheLines",
      "propertyType": "new",
      "apply": "_applyMaxCacheLines",
      "check": "Number",
      "defaultValue": 1000
    },
    "allowShrinkX": {
      "location": {
        "start": {
          "line": 118,
          "column": 4
        },
        "end": {
          "line": 122,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "allowShrinkX",
      "propertyType": "new",
      "refine": true,
      "defaultValue": false,
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": {
        "qx.ui.core.LayoutItem": "class"
      }
    }
  },
  "members": {
    "__lastRowCount": {
      "location": {
        "start": {
          "line": 136,
          "column": 4
        },
        "end": {
          "line": 136,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastColCount": {
      "location": {
        "start": {
          "line": 137,
          "column": 4
        },
        "end": {
          "line": 137,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__paneScroller": {
      "location": {
        "start": {
          "line": 139,
          "column": 4
        },
        "end": {
          "line": 139,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__tableContainer": {
      "location": {
        "start": {
          "line": 140,
          "column": 4
        },
        "end": {
          "line": 140,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__focusedRow": {
      "location": {
        "start": {
          "line": 142,
          "column": 4
        },
        "end": {
          "line": 142,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__focusedCol": {
      "location": {
        "start": {
          "line": 143,
          "column": 4
        },
        "end": {
          "line": 143,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__rowCache": {
      "location": {
        "start": {
          "line": 146,
          "column": 4
        },
        "end": {
          "line": 146,
          "column": 21
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "sparse array to cache rendered rows"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__rowCacheCount": {
      "location": {
        "start": {
          "line": 147,
          "column": 4
        },
        "end": {
          "line": 147,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_applyFirstVisibleRow": {
      "location": {
        "start": {
          "line": 151,
          "column": 4
        },
        "end": {
          "line": 153,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyVisibleRowCount": {
      "location": {
        "start": {
          "line": 157,
          "column": 4
        },
        "end": {
          "line": 159,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getContentHint": {
      "location": {
        "start": {
          "line": 163,
          "column": 4
        },
        "end": {
          "line": 171,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}",
            "type": "Map",
            "desc": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "getPaneScroller": {
      "location": {
        "start": {
          "line": 179,
          "column": 4
        },
        "end": {
          "line": 181,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the TablePaneScroller this pane belongs to."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Scroller} the TablePaneScroller.",
            "type": "qx.ui.table.pane.Scroller",
            "desc": " the TablePaneScroller."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTable": {
      "location": {
        "start": {
          "line": 189,
          "column": 4
        },
        "end": {
          "line": 191,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the table this pane belongs to."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.Table} the table.",
            "type": "qx.ui.table.Table",
            "desc": " the table."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setFocusedCell": {
      "location": {
        "start": {
          "line": 202,
          "column": 4
        },
        "end": {
          "line": 221,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the currently focused cell."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer?null} the model index of the focused cell's column.",
            "paramName": "col",
            "description": " the model index of the focused cell's column.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "row {Integer?null} the model index of the focused cell's row.",
            "paramName": "row",
            "description": " the model index of the focused cell's row.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "massUpdate {Boolean ? false} Whether other updates are planned as well.\nIf true, no repaint will be done.",
            "paramName": "massUpdate",
            "description": " Whether other updates are planned as well.\nIf true, no repaint will be done.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onSelectionChanged": {
      "location": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 229,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the selection has changed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onFocusChanged": {
      "location": {
        "start": {
          "line": 235,
          "column": 4
        },
        "end": {
          "line": 237,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the table gets or looses the focus."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setColumnWidth": {
      "location": {
        "start": {
          "line": 246,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the column width."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the column to change the width for.",
            "paramName": "col",
            "description": " the column to change the width for.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer} the new width.",
            "paramName": "width",
            "description": " the new width.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onColOrderChanged": {
      "location": {
        "start": {
          "line": 255,
          "column": 4
        },
        "end": {
          "line": 257,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called the column order has changed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onPaneModelChanged": {
      "location": {
        "start": {
          "line": 263,
          "column": 4
        },
        "end": {
          "line": 265,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the pane model has changed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onTableModelDataChanged": {
      "location": {
        "start": {
          "line": 276,
          "column": 4
        },
        "end": {
          "line": 288,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the table model data has changed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "firstRow {Integer} The index of the first row that has changed.",
            "paramName": "firstRow",
            "description": " The index of the first row that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lastRow {Integer} The index of the last row that has changed.",
            "paramName": "lastRow",
            "description": " The index of the last row that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "firstColumn {Integer} The model index of the first column that has changed.",
            "paramName": "firstColumn",
            "description": " The model index of the first column that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lastColumn {Integer} The model index of the last column that has changed.",
            "paramName": "lastColumn",
            "description": " The model index of the last column that has changed.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onTableModelMetaDataChanged": {
      "location": {
        "start": {
          "line": 295,
          "column": 4
        },
        "end": {
          "line": 297,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the table model meta data has changed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyMaxCacheLines": {
      "location": {
        "start": {
          "line": 301,
          "column": 4
        },
        "end": {
          "line": 306,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply method"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__rowCacheClear": {
      "location": {
        "start": {
          "line": 312,
          "column": 4
        },
        "end": {
          "line": 316,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Clear the row cache"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__rowCacheGet": {
      "location": {
        "start": {
          "line": 328,
          "column": 4
        },
        "end": {
          "line": 335,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get a line from the row cache."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} Row index to get",
            "paramName": "row",
            "description": " Row index to get",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "selected {Boolean} Whether the row is currently selected",
            "paramName": "selected",
            "description": " Whether the row is currently selected",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "focused {Boolean} Whether the row is currently focused",
            "paramName": "focused",
            "description": " Whether the row is currently focused",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} The cached row or null if a row with the given\nindex is not cached.",
            "type": "String|null",
            "desc": " The cached row or null if a row with the given\nindex is not cached."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__rowCacheSet": {
      "location": {
        "start": {
          "line": 346,
          "column": 4
        },
        "end": {
          "line": 359,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a line to the row cache."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} Row index to set",
            "paramName": "row",
            "description": " Row index to set",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rowString {String} computed row string to cache",
            "paramName": "rowString",
            "description": " computed row string to cache",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "selected {Boolean} Whether the row is currently selected",
            "paramName": "selected",
            "description": " Whether the row is currently selected",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "focused {Boolean} Whether the row is currently focused",
            "paramName": "focused",
            "description": " Whether the row is currently focused",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "updateContent": {
      "location": {
        "start": {
          "line": 372,
          "column": 4
        },
        "end": {
          "line": 385,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates the content of the pane."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "completeUpdate {Boolean ? false} if true a complete update is performed.\nOn a complete update all cell widgets are recreated.",
            "paramName": "completeUpdate",
            "description": " if true a complete update is performed.\nOn a complete update all cell widgets are recreated.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "scrollOffset {Integer ? null} If set specifies how many rows to scroll.",
            "paramName": "scrollOffset",
            "description": " If set specifies how many rows to scroll.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "onlyRow {Integer ? null} if set only the specified row will be updated.",
            "paramName": "onlyRow",
            "description": " if set only the specified row will be updated.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "onlySelectionOrFocusChanged {Boolean ? false} if true, cell values won't\nbe updated. Only the row background will.",
            "paramName": "onlySelectionOrFocusChanged",
            "description": " if true, cell values won't\nbe updated. Only the row background will.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_updateRowStyles": {
      "location": {
        "start": {
          "line": 396,
          "column": 4
        },
        "end": {
          "line": 446,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "If only focus or selection changes it is sufficient to only update the\nrow styles. This method updates the row styles of all visible rows or\nof just one row."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "onlyRow {Integer|null ? null} If this parameter is set only the row\nwith this index is updated.",
            "paramName": "onlyRow",
            "description": " If this parameter is set only the row\nwith this index is updated.",
            "optional": true,
            "defaultValue": "null",
            "type": [
              "Integer",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getRowsHtml": {
      "location": {
        "start": {
          "line": 456,
          "column": 4
        },
        "end": {
          "line": 574,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the HTML table fragment for the given row range."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "firstRow {Integer} Index of the first row",
            "paramName": "firstRow",
            "description": " Index of the first row",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rowCount {Integer} Number of rows",
            "paramName": "rowCount",
            "description": " Number of rows",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The HTML table fragment for the given row range.",
            "type": "String",
            "desc": " The HTML table fragment for the given row range."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_scrollContent": {
      "location": {
        "start": {
          "line": 583,
          "column": 4
        },
        "end": {
          "line": 656,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Scrolls the pane's contents by the given offset."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowOffset {Integer} Number of lines to scroll. Scrolling up is\nrepresented by a negative offset.",
            "paramName": "rowOffset",
            "description": " Number of lines to scroll. Scrolling up is\nrepresented by a negative offset.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updateAllRows": {
      "location": {
        "start": {
          "line": 662,
          "column": 4
        },
        "end": {
          "line": 721,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates the content of the pane (implemented using array joins)."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getFirstVisibleRow": {
      "type": "function",
      "name": "getFirstVisibleRow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setFirstVisibleRow": {
      "type": "function",
      "name": "setFirstVisibleRow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetFirstVisibleRow": {
      "type": "function",
      "name": "resetFirstVisibleRow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getVisibleRowCount": {
      "type": "function",
      "name": "getVisibleRowCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setVisibleRowCount": {
      "type": "function",
      "name": "setVisibleRowCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetVisibleRowCount": {
      "type": "function",
      "name": "resetVisibleRowCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMaxCacheLines": {
      "type": "function",
      "name": "getMaxCacheLines",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMaxCacheLines": {
      "type": "function",
      "name": "setMaxCacheLines",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMaxCacheLines": {
      "type": "function",
      "name": "resetMaxCacheLines",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 734,
        "column": 2
      },
      "end": {
        "line": 737,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}