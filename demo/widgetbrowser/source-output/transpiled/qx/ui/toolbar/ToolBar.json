{
  "className": "qx.ui.toolbar.ToolBar",
  "packageName": "qx.ui.toolbar",
  "name": "ToolBar",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [],
  "mixins": [
    "qx.ui.core.MChildrenHandling"
  ],
  "clazz": {
    "location": {
      "start": {
        "line": 34,
        "column": 0
      },
      "end": {
        "line": 666,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nMartin Wittemann (martinwittemann)\nJonathan Wei√ü (jonathan_rass)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The Toolbar class is the main part of the toolbar widget.\n\nIt can handle added {@link Button}s, {@link CheckBox}es, {@link RadioButton}s\nand {@link Separator}s in its {@link #add} method. The {@link #addSpacer} method\nadds a spacer at the current toolbar position. This means that the widgets\nadded after the method call of {@link #addSpacer} are aligned to the right of\nthe toolbar.\n\nFor more details on the documentation of the toolbar widget, take a look at the\ndocumentation of the {@link qx.ui.toolbar}-Package."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 47,
        "column": 2
      },
      "end": {
        "line": 57,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 71,
          "column": 4
        },
        "end": {
          "line": 75,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Appearance of the widget"
          }
        ]
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "defaultValue": "toolbar",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "openMenu": {
      "location": {
        "start": {
          "line": 78,
          "column": 4
        },
        "end": {
          "line": 83,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Holds the currently open menu (when the toolbar is used for menus)"
          }
        ]
      },
      "name": "openMenu",
      "propertyType": "new",
      "event": "changeOpenMenu",
      "allowNull": true,
      "check": "qx.ui.menu.Menu"
    },
    "show": {
      "location": {
        "start": {
          "line": 86,
          "column": 4
        },
        "end": {
          "line": 93,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether icons, labels, both or none should be shown."
          }
        ]
      },
      "name": "show",
      "propertyType": "new",
      "event": "changeShow",
      "inheritable": true,
      "apply": "_applyShow",
      "possibleValues": [
        "both",
        "label",
        "icon"
      ],
      "defaultValue": "both"
    },
    "spacing": {
      "location": {
        "start": {
          "line": 96,
          "column": 4
        },
        "end": {
          "line": 102,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The spacing between every child of the toolbar"
          }
        ]
      },
      "name": "spacing",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applySpacing",
      "allowNull": true,
      "check": "Integer"
    },
    "overflowIndicator": {
      "location": {
        "start": {
          "line": 109,
          "column": 4
        },
        "end": {
          "line": 114,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Widget which will be shown if at least one toolbar item is hidden.\nKeep in mind to add this widget to the toolbar before you set it as\nindicator!"
          }
        ]
      },
      "name": "overflowIndicator",
      "propertyType": "new",
      "apply": "_applyOverflowIndicator",
      "allowNull": true,
      "check": "qx.ui.core.Widget"
    },
    "overflowHandling": {
      "location": {
        "start": {
          "line": 117,
          "column": 4
        },
        "end": {
          "line": 122,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Enables the overflow handling which automatically removes items."
          }
        ]
      },
      "name": "overflowHandling",
      "propertyType": "new",
      "apply": "_applyOverflowHandling",
      "check": "Boolean",
      "defaultValue": false
    }
  },
  "members": {
    "__removedItems": {
      "location": {
        "start": {
          "line": 157,
          "column": 4
        },
        "end": {
          "line": 157,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nOVERFLOW HANDLING\n---------------------------------------------------------------------------"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__removePriority": {
      "location": {
        "start": {
          "line": 158,
          "column": 4
        },
        "end": {
          "line": 158,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_computeSizeHint": {
      "location": {
        "start": {
          "line": 162,
          "column": 4
        },
        "end": {
          "line": 177,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The map with the preferred width/height and the allowed\nminimum and maximum values.",
            "type": "Map",
            "desc": " The map with the preferred width/height and the allowed\nminimum and maximum values."
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "_onResize": {
      "location": {
        "start": {
          "line": 185,
          "column": 4
        },
        "end": {
          "line": 187,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resize event handler."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The resize event.",
            "paramName": "e",
            "description": " The resize event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_recalculateOverflow": {
      "location": {
        "start": {
          "line": 197,
          "column": 4
        },
        "end": {
          "line": 304,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Responsible for calculation the overflow based on the available width."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer?null} The available width.",
            "paramName": "width",
            "description": " The available width.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "requiredWidth {Integer?null} The required width for the widget\nif available.",
            "paramName": "requiredWidth",
            "description": " The required width for the widget\nif available.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__showChild": {
      "location": {
        "start": {
          "line": 312,
          "column": 4
        },
        "end": {
          "line": 317,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper to show a toolbar item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} The widget to show.",
            "paramName": "child",
            "description": " The widget to show.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__hideChild": {
      "location": {
        "start": {
          "line": 325,
          "column": 4
        },
        "end": {
          "line": 334,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper to exclude a toolbar item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} The widget to exclude.",
            "paramName": "child",
            "description": " The widget to exclude.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_getNextToHide": {
      "location": {
        "start": {
          "line": 345,
          "column": 4
        },
        "end": {
          "line": 369,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Responsible for returning the next item to remove. In It checks the\npriorities added by {@link #setRemovePriority}. If all priorized widgets\nalready excluded, it takes the widget added at last."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget|null} The widget which should be removed next.\nIf null is returned, no widget is available to remove.",
            "type": "qx.ui.core.Widget|null",
            "desc": " The widget which should be removed next.\nIf null is returned, no widget is available to remove."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setRemovePriority": {
      "location": {
        "start": {
          "line": 383,
          "column": 4
        },
        "end": {
          "line": 390,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The removal of the toolbar items is priority based. You can change these\npriorities with this method. The higher a priority, the earlier it will\nbe excluded. Remember to use every priority only once! If you want\noverride an already set priority, use the override parameter.\nKeep in mind to only use already added items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} The item to give the priority.",
            "paramName": "item",
            "description": " The item to give the priority.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "priority {Integer} The priority, higher means removed earlier.",
            "paramName": "priority",
            "description": " The priority, higher means removed earlier.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "override {Boolean} true, if the priority should be overridden.",
            "paramName": "override",
            "description": " true, if the priority should be overridden.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyOverflowHandling": {
      "location": {
        "start": {
          "line": 394,
          "column": 4
        },
        "end": {
          "line": 431,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyOverflowIndicator": {
      "location": {
        "start": {
          "line": 435,
          "column": 4
        },
        "end": {
          "line": 449,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__allowMenuOpenHover": {
      "location": {
        "start": {
          "line": 458,
          "column": 4
        },
        "end": {
          "line": 458,
          "column": 32
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nMENU OPEN\n---------------------------------------------------------------------------"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_setAllowMenuOpenHover": {
      "location": {
        "start": {
          "line": 467,
          "column": 4
        },
        "end": {
          "line": 469,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Indicate if a menu could be opened on hover or not."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} <code>true</code> if a menu could be opened,\n<code>false</code> otherwise.",
            "paramName": "value",
            "description": " <code>true</code> if a menu could be opened,\n<code>false</code> otherwise.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isAllowMenuOpenHover": {
      "location": {
        "start": {
          "line": 478,
          "column": 4
        },
        "end": {
          "line": 480,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Return if a menu could be opened on hover or not."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if a menu could be opened,\n<code>false</code> otherwise.",
            "type": "Boolean",
            "desc": " <code>true</code> if a menu could be opened,\n<code>false</code> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applySpacing": {
      "location": {
        "start": {
          "line": 490,
          "column": 4
        },
        "end": {
          "line": 494,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPROPERTY APPLY ROUTINES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyShow": {
      "location": {
        "start": {
          "line": 498,
          "column": 4
        },
        "end": {
          "line": 505,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_add": {
      "location": {
        "start": {
          "line": 514,
          "column": 4
        },
        "end": {
          "line": 526,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCHILD HANDLING\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the widget to add.",
            "paramName": "child",
            "description": " the widget to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_addAt": {
      "location": {
        "start": {
          "line": 529,
          "column": 4
        },
        "end": {
          "line": 541,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted. If no\nwidget exists at the given index, the new widget gets appended to the\ncurrent list of children.",
            "paramName": "index",
            "description": " Index, at which the widget will be inserted. If no\nwidget exists at the given index, the new widget gets appended to the\ncurrent list of children.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_addBefore": {
      "location": {
        "start": {
          "line": 544,
          "column": 4
        },
        "end": {
          "line": 556,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {LayoutItem} widget before the new widget will be inserted.",
            "paramName": "before",
            "description": " widget before the new widget will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_addAfter": {
      "location": {
        "start": {
          "line": 559,
          "column": 4
        },
        "end": {
          "line": 571,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {LayoutItem} widget, after which the new widget will\nbe inserted",
            "paramName": "after",
            "description": " widget, after which the new widget will\nbe inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_remove": {
      "location": {
        "start": {
          "line": 574,
          "column": 4
        },
        "end": {
          "line": 581,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the widget to remove",
            "paramName": "child",
            "description": " the widget to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_removeAt": {
      "location": {
        "start": {
          "line": 584,
          "column": 4
        },
        "end": {
          "line": 593,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove.",
            "paramName": "index",
            "description": " Index of the widget to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The removed item.",
            "type": "qx.ui.core.LayoutItem",
            "desc": " The removed item."
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_removeAll": {
      "location": {
        "start": {
          "line": 596,
          "column": 4
        },
        "end": {
          "line": 600,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the removed children.",
            "type": "Array",
            "desc": " An array containing the removed children."
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "addSpacer": {
      "location": {
        "start": {
          "line": 616,
          "column": 4
        },
        "end": {
          "line": 621,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nUTILITIES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Add a spacer to the toolbar. The spacer has a flex\nvalue of one and will stretch to the available space."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Spacer} The newly added spacer object. A reference\nto the spacer is needed to remove this spacer from the layout.",
            "type": "qx.ui.core.Spacer",
            "desc": " The newly added spacer object. A reference\nto the spacer is needed to remove this spacer from the layout."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addSeparator": {
      "location": {
        "start": {
          "line": 627,
          "column": 4
        },
        "end": {
          "line": 629,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds a separator to the toolbar."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getMenuButtons": {
      "location": {
        "start": {
          "line": 638,
          "column": 4
        },
        "end": {
          "line": 656,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns all nested buttons which contains a menu to show. This is mainly\nused for keyboard support."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} List of all menu buttons",
            "type": "Array",
            "desc": " List of all menu buttons"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getChildren": {
      "type": "function",
      "name": "getChildren",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the children list"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{LayoutItem[]} The children array (Arrays are\nreference types, please do not modify them in-place)",
            "type": "LayoutItem[]",
            "desc": " The children array (Arrays are\nreference types, please do not modify them in-place)"
          }
        ]
      }
    },
    "hasChildren": {
      "type": "function",
      "name": "hasChildren",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget contains children."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "Boolean",
            "desc": " Returns <code>true</code> when the widget has children."
          }
        ]
      }
    },
    "indexOf": {
      "type": "function",
      "name": "indexOf",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the index position of the given widget if it is\na child widget. Otherwise it returns <code>-1</code>.\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {Widget} the widget to query for",
            "paramName": "child",
            "description": " the widget to query for",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\nthe given widget is no child of this layout.",
            "type": "Integer",
            "desc": " The index position or <code>-1</code> when\nthe given widget is no child of this layout."
          }
        ]
      }
    },
    "add": {
      "type": "function",
      "name": "add",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds a new child widget.\n\nThe supported keys of the layout options map depend on the layout manager\nused to position the widget. The options are documented in the class\ndocumentation of each layout manager {@link qx.ui.layout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the widget to add.",
            "paramName": "child",
            "description": " the widget to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "addAt": {
      "type": "function",
      "name": "addAt",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a child widget at the specified index\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted",
            "paramName": "index",
            "description": " Index, at which the widget will be inserted",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "addBefore": {
      "type": "function",
      "name": "addBefore",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a widget before another already inserted widget\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {LayoutItem} Widget before the new widget will be inserted.",
            "paramName": "before",
            "description": " Widget before the new widget will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "addAfter": {
      "type": "function",
      "name": "addAfter",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a widget after another already inserted widget\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {LayoutItem} Widget, after which the new widget will be inserted",
            "paramName": "after",
            "description": " Widget, after which the new widget will be inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "remove": {
      "type": "function",
      "name": "remove",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the given child widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the widget to remove",
            "paramName": "child",
            "description": " the widget to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      }
    },
    "removeAt": {
      "type": "function",
      "name": "removeAt",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the widget at the specified index.\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove.",
            "paramName": "index",
            "description": " Index of the widget to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{LayoutItem} The child removed.",
            "type": "qx.ui.core.LayoutItem",
            "desc": " The child removed."
          }
        ]
      }
    },
    "removeAll": {
      "type": "function",
      "name": "removeAll",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove all children."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of the removed children.",
            "type": "Array",
            "desc": " An array of the removed children."
          }
        ]
      }
    },
    "getOpenMenu": {
      "type": "function",
      "name": "getOpenMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.menu.Menu",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOpenMenu": {
      "type": "function",
      "name": "setOpenMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.menu.Menu",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOpenMenu": {
      "type": "function",
      "name": "resetOpenMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getShow": {
      "type": "function",
      "name": "getShow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setShow": {
      "type": "function",
      "name": "setShow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetShow": {
      "type": "function",
      "name": "resetShow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getSpacing": {
      "type": "function",
      "name": "getSpacing",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSpacing": {
      "type": "function",
      "name": "setSpacing",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetSpacing": {
      "type": "function",
      "name": "resetSpacing",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOverflowIndicator": {
      "type": "function",
      "name": "getOverflowIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.core.Widget",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOverflowIndicator": {
      "type": "function",
      "name": "setOverflowIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.core.Widget",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOverflowIndicator": {
      "type": "function",
      "name": "resetOverflowIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOverflowHandling": {
      "type": "function",
      "name": "getOverflowHandling",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isOverflowHandling": {
      "type": "function",
      "name": "isOverflowHandling",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOverflowHandling": {
      "type": "function",
      "name": "setOverflowHandling",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOverflowHandling": {
      "type": "function",
      "name": "resetOverflowHandling",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 660,
        "column": 2
      },
      "end": {
        "line": 665,
        "column": 3
      }
    }
  },
  "descendants": [
    "qx.ui.menubar.MenuBar"
  ]
}