{
  "className": "qx.ui.tree.VirtualTree",
  "packageName": "qx.ui.tree",
  "name": "VirtualTree",
  "superClass": "qx.ui.virtual.core.Scroller",
  "interfaces": [
    "qx.ui.tree.core.IVirtualTree",
    "qx.data.controller.ISelection"
  ],
  "mixins": [
    "qx.ui.virtual.selection.MModel",
    "qx.ui.core.MContentPadding"
  ],
  "clazz": {
    "location": {
      "start": {
        "line": 133,
        "column": 0
      },
      "end": {
        "line": 1322,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nChristian Hagendorn (chris_schmidt)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Virtual tree implementation.\n\nThe virtual tree can be used to render node and leafs. Nodes and leafs are\nboth items for a tree. The difference between a node and a leaf is that a\nnode has child items, but a leaf not.\n\nWith the {@link qx.ui.tree.core.IVirtualTreeDelegate} interface it is possible\nto configure the tree's behavior (item renderer configuration, etc.).\n\nHere's an example of how to use the widget, including using a model\nproperty to open/close branches. See the two timers at the end. The first\none opens all branches after two seconds; the second cleans up the tree\nafter five seconds.\n\n<pre class=\"javascript\">\nvar nodes =\n[\n{\nname : \"Root\",\nopen : false,\nchildren :\n[\n{\nname : \"Branch 1\",\nopen : false,\nchildren :\n[\n{\nname : \"Leaf 1.1\"\n},\n{\nname : \"Leaf 1.2\"\n},\n{\nname : \"Branch 1.3\",\nopen : false,\nchildren :\n[\n{\nname : \"Branch 1.3.1\",\nopen : false,\nchildren :\n[\n{\nname : \"Leaf 1.3.1.1\"\n}\n]\n}\n]\n}\n]\n}\n]\n}\n];\n\n// convert the raw nodes to qooxdoo objects\nnodes = qx.data.marshal.Json.createModel(nodes, true);\n\n// create the tree and synchronize the model property 'open'\n// to nodes being open\nvar tree =\nnew qx.ui.tree.VirtualTree(\nnodes.getItem(0), \"name\", \"children\", \"open\").set({\nwidth : 200,\nheight : 400\n});\n\n//log selection changes\ntree.getSelection().addListener(\"change\", function(e) {\nthis.debug(\"Selection: \" + tree.getSelection().getItem(0).getName());\n}, this);\n\ntree.set(\n{\nwidth : 200,\nheight : 400,\nshowTopLevelOpenCloseIcons : true\n});\n\nvar doc = this.getRoot();\ndoc.add(tree,\n{\nleft : 100,\ntop  : 50\n});\n\n// After two seconds, open up all branches by setting their open\n// property to true.\nqx.event.Timer.once(\nfunction()\n{\n;(function allOpen(root)\n{\nif (root.setOpen)     root.setOpen(true);\nif (root.getChildren) root.getChildren().forEach(allOpen);\n})(nodes.getItem(0));\n},\nthis,\n2000);\n\n// After five seconds, remove and dispose the tree.\nqx.event.Timer.once(\nfunction()\n{\ndoc.remove(tree);\ntree.dispose();\nconsole.warn(\"All cleaned up.\");\n},\nthis,\n5000);\n</pre>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 154,
        "column": 2
      },
      "end": {
        "line": 182,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "rootModel {qx.core.Object?null} The model structure representing\nthe root of the tree, for more details have a look at the 'model'\nproperty.",
          "paramName": "rootModel",
          "description": " The model structure representing\nthe root of the tree, for more details have a look at the 'model'\nproperty.",
          "optional": true,
          "defaultValue": "null",
          "type": "qx.core.Object"
        },
        {
          "name": "@param",
          "body": "labelPath {String?null} The name of the label property, for more\ndetails have a look at the 'labelPath' property.",
          "paramName": "labelPath",
          "description": " The name of the label property, for more\ndetails have a look at the 'labelPath' property.",
          "optional": true,
          "defaultValue": "null",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "childProperty {String?null} The name of the child property, for\nmore details have a look at the 'childProperty' property.",
          "paramName": "childProperty",
          "description": " The name of the child property, for\nmore details have a look at the 'childProperty' property.",
          "optional": true,
          "defaultValue": "null",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "openProperty {String|null} the name of the model property which\nrepresents the open state of a branch. If this value is provided, so,\ntoo, must be rootModel.",
          "paramName": "openProperty",
          "description": " the name of the model property which\nrepresents the open state of a branch. If this value is provided, so,\ntoo, must be rootModel.",
          "type": [
            "String",
            "null"
          ]
        }
      ]
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 202,
          "column": 4
        },
        "end": {
          "line": 206,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "defaultValue": "virtual-tree",
      "overriddenFrom": "qx.ui.core.scroll.AbstractScrollArea",
      "appearsIn": {
        "qx.ui.core.scroll.AbstractScrollArea": "class",
        "qx.ui.core.Widget": "class"
      }
    },
    "focusable": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 214,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "focusable",
      "propertyType": "new",
      "refine": true,
      "defaultValue": true,
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "width": {
      "location": {
        "start": {
          "line": 218,
          "column": 4
        },
        "end": {
          "line": 222,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "width",
      "propertyType": "new",
      "refine": true,
      "defaultValue": 100,
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": {
        "qx.ui.core.LayoutItem": "class"
      }
    },
    "height": {
      "location": {
        "start": {
          "line": 226,
          "column": 4
        },
        "end": {
          "line": 230,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "height",
      "propertyType": "new",
      "refine": true,
      "defaultValue": 200,
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": {
        "qx.ui.core.LayoutItem": "class"
      }
    },
    "itemHeight": {
      "location": {
        "start": {
          "line": 234,
          "column": 4
        },
        "end": {
          "line": 240,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Default item height."
          }
        ]
      },
      "name": "itemHeight",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyRowHeight",
      "check": "Integer",
      "defaultValue": 25
    },
    "openMode": {
      "location": {
        "start": {
          "line": 247,
          "column": 4
        },
        "end": {
          "line": 254,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Control whether tap or double tap should open or close the tapped\nitem."
          }
        ]
      },
      "name": "openMode",
      "propertyType": "new",
      "themeable": true,
      "event": "changeOpenMode",
      "apply": "_applyOpenMode",
      "possibleValues": [
        "tap",
        "dbltap",
        "none"
      ],
      "defaultValue": "dbltap"
    },
    "hideRoot": {
      "location": {
        "start": {
          "line": 261,
          "column": 4
        },
        "end": {
          "line": 266,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Hides *only* the root node, not the node's children when the property is\nset to <code>true</code>."
          }
        ]
      },
      "name": "hideRoot",
      "propertyType": "new",
      "apply": "_applyHideRoot",
      "check": "Boolean",
      "defaultValue": false
    },
    "showTopLevelOpenCloseIcons": {
      "location": {
        "start": {
          "line": 274,
          "column": 4
        },
        "end": {
          "line": 279,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether top level items should have an open/close button. The top level\nitem item is normally the root item, but when the root is hidden, the\nroot children are the top level items."
          }
        ]
      },
      "name": "showTopLevelOpenCloseIcons",
      "propertyType": "new",
      "apply": "_applyShowTopLevelOpenCloseIcons",
      "check": "Boolean",
      "defaultValue": false
    },
    "showLeafs": {
      "location": {
        "start": {
          "line": 286,
          "column": 4
        },
        "end": {
          "line": 291,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Configures the tree to show also the leafs. When the property is set to\n<code>false</code> *only* the nodes are shown."
          }
        ]
      },
      "name": "showLeafs",
      "propertyType": "new",
      "apply": "_applyShowLeafs",
      "check": "Boolean",
      "defaultValue": true
    },
    "childProperty": {
      "location": {
        "start": {
          "line": 299,
          "column": 4
        },
        "end": {
          "line": 304,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The name of the property, where the children are stored in the model.\nInstead of the {@link #labelPath} must the child property a direct\nproperty form the model instance."
          }
        ]
      },
      "name": "childProperty",
      "propertyType": "new",
      "apply": "_applyChildProperty",
      "allowNull": true,
      "check": "String"
    },
    "labelPath": {
      "location": {
        "start": {
          "line": 311,
          "column": 4
        },
        "end": {
          "line": 316,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The name of the property, where the value for the tree folders label\nis stored in the model classes."
          }
        ]
      },
      "name": "labelPath",
      "propertyType": "new",
      "apply": "_applyLabelPath",
      "allowNull": true,
      "check": "String"
    },
    "iconPath": {
      "location": {
        "start": {
          "line": 323,
          "column": 4
        },
        "end": {
          "line": 328,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The path to the property which holds the information that should be\nshown as an icon."
          }
        ]
      },
      "name": "iconPath",
      "propertyType": "new",
      "apply": "_applyIconPath",
      "allowNull": true,
      "check": "String"
    },
    "labelOptions": {
      "location": {
        "start": {
          "line": 335,
          "column": 4
        },
        "end": {
          "line": 339,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A map containing the options for the label binding. The possible keys\ncan be found in the {@link qx.data.SingleValueBinding} documentation."
          }
        ]
      },
      "name": "labelOptions",
      "propertyType": "new",
      "apply": "_applyLabelOptions",
      "allowNull": true
    },
    "iconOptions": {
      "location": {
        "start": {
          "line": 346,
          "column": 4
        },
        "end": {
          "line": 350,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A map containing the options for the icon binding. The possible keys\ncan be found in the {@link qx.data.SingleValueBinding} documentation."
          }
        ]
      },
      "name": "iconOptions",
      "propertyType": "new",
      "apply": "_applyIconOptions",
      "allowNull": true
    },
    "model": {
      "location": {
        "start": {
          "line": 357,
          "column": 4
        },
        "end": {
          "line": 364,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The model containing the data (nodes and/or leafs) which should be shown\nin the tree."
          }
        ]
      },
      "name": "model",
      "propertyType": "new",
      "event": "changeModel",
      "apply": "_applyModel",
      "allowNull": true,
      "check": "qx.core.Object"
    },
    "delegate": {
      "location": {
        "start": {
          "line": 371,
          "column": 4
        },
        "end": {
          "line": 377,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Delegation object, which can have one or more functions defined by the\n{@link qx.ui.tree.core.IVirtualTreeDelegate} interface."
          }
        ]
      },
      "name": "delegate",
      "propertyType": "new",
      "event": "changeDelegate",
      "apply": "_applyDelegate",
      "allowNull": true
    },
    "selection": {
      "type": "property",
      "name": "selection",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "selectionMode": {
      "type": "property",
      "name": "selectionMode",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "dragSelection": {
      "type": "property",
      "name": "dragSelection",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "quickSelection": {
      "type": "property",
      "name": "quickSelection",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "contentPaddingTop": {
      "type": "property",
      "name": "contentPaddingTop",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding"
    },
    "contentPaddingRight": {
      "type": "property",
      "name": "contentPaddingRight",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding"
    },
    "contentPaddingBottom": {
      "type": "property",
      "name": "contentPaddingBottom",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding"
    },
    "contentPaddingLeft": {
      "type": "property",
      "name": "contentPaddingLeft",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding"
    },
    "contentPadding": {
      "type": "property",
      "name": "contentPadding",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding"
    }
  },
  "members": {
    "_provider": {
      "location": {
        "start": {
          "line": 384,
          "column": 4
        },
        "end": {
          "line": 384,
          "column": 20
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.tree.provider.WidgetProvider} Provider for widget rendering."
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_layer": {
      "location": {
        "start": {
          "line": 388,
          "column": 4
        },
        "end": {
          "line": 388,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.virtual.layer.Abstract} Layer which contains the items."
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "__lookupTable": {
      "location": {
        "start": {
          "line": 395,
          "column": 4
        },
        "end": {
          "line": 395,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.data.Array} The internal lookup table data structure to get the model item\nfrom a row."
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__openNodes": {
      "location": {
        "start": {
          "line": 399,
          "column": 4
        },
        "end": {
          "line": 399,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} HashMap which contains all open nodes."
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__nestingLevel": {
      "location": {
        "start": {
          "line": 406,
          "column": 4
        },
        "end": {
          "line": 406,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} The internal data structure to get the nesting level from a\nrow."
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__deferredCall": {
      "location": {
        "start": {
          "line": 413,
          "column": 4
        },
        "end": {
          "line": 413,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.util.DeferredCall} Adds this instance to the widget queue on a\ndeferred call."
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_itemWidth": {
      "location": {
        "start": {
          "line": 417,
          "column": 4
        },
        "end": {
          "line": 417,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Holds the max item width from a rendered widget."
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "__parentChain": {
      "location": {
        "start": {
          "line": 421,
          "column": 4
        },
        "end": {
          "line": 421,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} internal parent chain form the last selected node"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__openProperty": {
      "location": {
        "start": {
          "line": 427,
          "column": 4
        },
        "end": {
          "line": 427,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String|null} the name of the model property which represents the\nopen state of a branch."
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "syncWidget": {
      "location": {
        "start": {
          "line": 437,
          "column": 4
        },
        "end": {
          "line": 451,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPUBLIC API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "jobs {Map} A map of jobs.",
            "paramName": "jobs",
            "description": " A map of jobs.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "openNode": {
      "location": {
        "start": {
          "line": 455,
          "column": 4
        },
        "end": {
          "line": 459,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} Node to open.",
            "paramName": "node",
            "description": " Node to open.",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.tree.core.IVirtualTree",
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "openNodeWithoutScrolling": {
      "location": {
        "start": {
          "line": 463,
          "column": 4
        },
        "end": {
          "line": 473,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} Node to open.",
            "paramName": "node",
            "description": " Node to open.",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.tree.core.IVirtualTree",
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "refresh": {
      "location": {
        "start": {
          "line": 479,
          "column": 4
        },
        "end": {
          "line": 481,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Trigger a rebuild from the internal data structure."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "openNodeAndParents": {
      "location": {
        "start": {
          "line": 491,
          "column": 4
        },
        "end": {
          "line": 495,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Opens the passed node and all his parents. *Note!* The algorithm\nimplements a depth-first search with a complexity: <code>O(n)</code> and\n<code>n</code> are all model items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} Node to open.",
            "paramName": "node",
            "description": " Node to open.",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "closeNode": {
      "location": {
        "start": {
          "line": 499,
          "column": 4
        },
        "end": {
          "line": 507,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} Node to close.",
            "paramName": "node",
            "description": " Node to close.",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.tree.core.IVirtualTree",
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "closeNodeWithoutScrolling": {
      "location": {
        "start": {
          "line": 511,
          "column": 4
        },
        "end": {
          "line": 521,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} Node to close.",
            "paramName": "node",
            "description": " Node to close.",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.tree.core.IVirtualTree",
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "isNodeOpen": {
      "location": {
        "start": {
          "line": 525,
          "column": 4
        },
        "end": {
          "line": 527,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} Node to check.",
            "paramName": "node",
            "description": " Node to check.",
            "type": "qx.core.Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the node is opened,\n<code>false</code> otherwise.",
            "type": "Boolean",
            "desc": " Returns <code>true</code> when the node is opened,\n<code>false</code> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.tree.core.IVirtualTree",
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "openViaModelChanges": {
      "location": {
        "start": {
          "line": 538,
          "column": 4
        },
        "end": {
          "line": 555,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Open and close branches via changes to a property in the model."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "openProperty {String|null}\nThe name of the open property, which determines the open state of a\nbranch in the tree. If null, turn off opening and closing branches\nvia changes to the model.",
            "paramName": "openProperty",
            "description": "\nThe name of the open property, which determines the open state of a\nbranch in the tree. If null, turn off opening and closing branches\nvia changes to the model.",
            "type": [
              "String",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getOpenProperty": {
      "location": {
        "start": {
          "line": 561,
          "column": 4
        },
        "end": {
          "line": 564,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Getter for the open property"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_init": {
      "location": {
        "start": {
          "line": 577,
          "column": 4
        },
        "end": {
          "line": 583,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nINTERNAL API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Initializes the virtual tree."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_initLayer": {
      "location": {
        "start": {
          "line": 589,
          "column": 4
        },
        "end": {
          "line": 600,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Initializes the virtual tree layer."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getLookupTable": {
      "location": {
        "start": {
          "line": 604,
          "column": 4
        },
        "end": {
          "line": 606,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interface implementation"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} The internal data structure.",
            "type": "qx.data.Array",
            "desc": " The internal data structure."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.tree.core.IVirtualTree",
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "isShowTopLevelOpenCloseIcons": {
      "location": {
        "start": {
          "line": 610,
          "column": 4
        },
        "end": {
          "line": 612,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interface implementation"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when top level items should\nshow open/close buttons, <code>false</code> otherwise.",
            "type": "Boolean",
            "desc": " Returns <code>true</code> when top level items should\nshow open/close buttons, <code>false</code> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.tree.core.IVirtualTree",
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "_reverseLookup": {
      "location": {
        "start": {
          "line": 622,
          "column": 4
        },
        "end": {
          "line": 624,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Performs a lookup from model index to row."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index to look at.",
            "paramName": "index",
            "description": " The index to look at.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The row or <code>-1</code>\nif the index is not a model index.",
            "type": "Number",
            "desc": " The row or <code>-1</code>\nif the index is not a model index."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getDataFromRow": {
      "location": {
        "start": {
          "line": 633,
          "column": 4
        },
        "end": {
          "line": 635,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the model data for the given row."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} row to get data for.",
            "paramName": "row",
            "description": " row to get data for.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var|null} the row's model data.",
            "type": "var|null",
            "desc": " the row's model data."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getSelectables": {
      "location": {
        "start": {
          "line": 642,
          "column": 4
        },
        "end": {
          "line": 644,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the selectable model items."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} The selectable items.",
            "type": "qx.data.Array",
            "desc": " The selectable items."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getOpenNodes": {
      "location": {
        "start": {
          "line": 653,
          "column": 4
        },
        "end": {
          "line": 655,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns all open nodes."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} All open nodes.",
            "type": "Array",
            "desc": " All open nodes."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isNode": {
      "location": {
        "start": {
          "line": 659,
          "column": 4
        },
        "end": {
          "line": 661,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.core.Object} Item to check.",
            "paramName": "item",
            "description": " Item to check.",
            "type": "qx.core.Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>True</code> when item is a node,\n</code>false</code> when item is a leaf.",
            "type": "Boolean",
            "desc": " <code>True</code> when item is a node,\n</code>false</code> when item is a leaf."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.tree.core.IVirtualTree",
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "getLevel": {
      "location": {
        "start": {
          "line": 665,
          "column": 4
        },
        "end": {
          "line": 667,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The row to get the nesting level.",
            "paramName": "row",
            "description": " The row to get the nesting level.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The row's nesting level or <code>null</code>.",
            "type": "Integer",
            "desc": " The row's nesting level or <code>null</code>."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.tree.core.IVirtualTree",
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "hasChildren": {
      "location": {
        "start": {
          "line": 671,
          "column": 4
        },
        "end": {
          "line": 673,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} Node to check.",
            "paramName": "node",
            "description": " Node to check.",
            "type": "qx.core.Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>True</code> when the node has visible children,\n<code>false</code> otherwise.",
            "type": "Boolean",
            "desc": " <code>True</code> when the node has visible children,\n<code>false</code> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.tree.core.IVirtualTree",
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "_getContentPaddingTarget": {
      "location": {
        "start": {
          "line": 681,
          "column": 4
        },
        "end": {
          "line": 683,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the element, to which the content padding should be applied."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The content padding target.",
            "type": "qx.ui.core.Widget",
            "desc": " The content padding target."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyRowHeight": {
      "location": {
        "start": {
          "line": 694,
          "column": 4
        },
        "end": {
          "line": 696,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPROPERTY APPLY METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyOpenMode": {
      "location": {
        "start": {
          "line": 700,
          "column": 4
        },
        "end": {
          "line": 716,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyHideRoot": {
      "location": {
        "start": {
          "line": 720,
          "column": 4
        },
        "end": {
          "line": 722,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyShowTopLevelOpenCloseIcons": {
      "location": {
        "start": {
          "line": 726,
          "column": 4
        },
        "end": {
          "line": 731,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyShowLeafs": {
      "location": {
        "start": {
          "line": 735,
          "column": 4
        },
        "end": {
          "line": 740,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyChildProperty": {
      "location": {
        "start": {
          "line": 744,
          "column": 4
        },
        "end": {
          "line": 746,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyLabelPath": {
      "location": {
        "start": {
          "line": 750,
          "column": 4
        },
        "end": {
          "line": 752,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyIconPath": {
      "location": {
        "start": {
          "line": 756,
          "column": 4
        },
        "end": {
          "line": 758,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyLabelOptions": {
      "location": {
        "start": {
          "line": 762,
          "column": 4
        },
        "end": {
          "line": 764,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyIconOptions": {
      "location": {
        "start": {
          "line": 768,
          "column": 4
        },
        "end": {
          "line": 770,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyModel": {
      "location": {
        "start": {
          "line": 774,
          "column": 4
        },
        "end": {
          "line": 806,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyDelegate": {
      "location": {
        "start": {
          "line": 810,
          "column": 4
        },
        "end": {
          "line": 814,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onChangeBubble": {
      "location": {
        "start": {
          "line": 830,
          "column": 4
        },
        "end": {
          "line": 862,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT HANDLERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Event handler for the changeBubble event. The handler rebuild the lookup\ntable when the child structure changed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Data} The data event.",
            "paramName": "event",
            "description": " The data event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onUpdated": {
      "location": {
        "start": {
          "line": 870,
          "column": 4
        },
        "end": {
          "line": 878,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for the update event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Event} The event.",
            "paramName": "event",
            "description": " The event.",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onOpen": {
      "location": {
        "start": {
          "line": 886,
          "column": 4
        },
        "end": {
          "line": 899,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler to open/close tapped nodes."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.ui.virtual.core.CellEvent} The cell tap event.",
            "paramName": "event",
            "description": " The cell tap event.",
            "type": "qx.ui.virtual.core.CellEvent"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onKeyPress": {
      "location": {
        "start": {
          "line": 909,
          "column": 4
        },
        "end": {
          "line": 960,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for key press events. Open and close the current selected\nitem on key left and right press. Jump to parent on key left if already\nclosed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeySequence} key event.",
            "paramName": "e",
            "description": " key event.",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_beforeApplySelection": {
      "location": {
        "start": {
          "line": 975,
          "column": 4
        },
        "end": {
          "line": 987,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSELECTION HOOK METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\nThe hook method sets the first visible parent not as new selection when\nthe current selection is empty and the selection mode is one selection."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "newSelection {Array} The newSelection which will be set to the selection manager.",
            "paramName": "newSelection",
            "description": " The newSelection which will be set to the selection manager.",
            "type": "Array"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_afterApplySelection": {
      "location": {
        "start": {
          "line": 994,
          "column": 4
        },
        "end": {
          "line": 1004,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\nThe hook method builds the parent chain form the current selected item."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__applyModelChanges": {
      "location": {
        "start": {
          "line": 1018,
          "column": 4
        },
        "end": {
          "line": 1022,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nHELPER METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Helper method to apply model changes. Normally build the lookup table and\napply the default selection."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "buildLookupTable": {
      "location": {
        "start": {
          "line": 1030,
          "column": 4
        },
        "end": {
          "line": 1071,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper method to build the internal data structure."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__getVisibleChildrenFrom": {
      "location": {
        "start": {
          "line": 1083,
          "column": 4
        },
        "end": {
          "line": 1141,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper method to get all visible children form the passed parent node.\nThe algorithm implements a depth-first search with a complexity:\n<code>O(n)</code> and <code>n</code> are all visible items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} The start node to start search.",
            "paramName": "node",
            "description": " The start node to start search.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "nestedLevel {Integer} The nested level from the start node.",
            "paramName": "nestedLevel",
            "description": " The nested level from the start node.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} All visible children form the parent.",
            "type": "Array",
            "desc": " All visible children form the parent."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__openNode": {
      "location": {
        "start": {
          "line": 1150,
          "column": 4
        },
        "end": {
          "line": 1156,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper method to set the node to the open nodes data structure when it\nis not included."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} Node to set to open nodes.",
            "paramName": "node",
            "description": " Node to set to open nodes.",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__openNodeAndAllParents": {
      "location": {
        "start": {
          "line": 1169,
          "column": 4
        },
        "end": {
          "line": 1199,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper method to set the target node and all his parents to the open\nnodes data structure. The algorithm implements a depth-first search with\na complexity: <code>O(n)</code> and <code>n</code> are all model items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "startNode {qx.core.Object} Start (root) node to search.",
            "paramName": "startNode",
            "description": " Start (root) node to search.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetNode {qx.core.Object} Target node to open (and his parents).",
            "paramName": "targetNode",
            "description": " Target node to open (and his parents).",
            "type": "qx.core.Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>True</code> when the targetNode and his\nparents could opened, <code>false</code> otherwise.",
            "type": "Boolean",
            "desc": " <code>True</code> when the targetNode and his\nparents could opened, <code>false</code> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__updateRowCount": {
      "location": {
        "start": {
          "line": 1205,
          "column": 4
        },
        "end": {
          "line": 1209,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper method to update the row count."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getParent": {
      "location": {
        "start": {
          "line": 1222,
          "column": 4
        },
        "end": {
          "line": 1240,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper method to get the parent node. Node! This only works with leaf and\nnodes which are in the internal lookup table."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.core.Object} Node or leaf to get parent.",
            "paramName": "item",
            "description": " Node or leaf to get parent.",
            "type": "qx.core.Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object|null} The parent note or <code>null</code> when\nno parent found.",
            "type": "qx.core.Object|null",
            "desc": " The parent note or <code>null</code> when\nno parent found."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__buildParentChain": {
      "location": {
        "start": {
          "line": 1248,
          "column": 4
        },
        "end": {
          "line": 1257,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Builds the parent chain form the passed item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} Item to build parent chain.",
            "paramName": "item",
            "description": " Item to build parent chain.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getVisibleParent": {
      "location": {
        "start": {
          "line": 1265,
          "column": 4
        },
        "end": {
          "line": 1282,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Return the first visible parent node from the last selected node."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The first visible node.",
            "type": "var",
            "desc": " The first visible node."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getSelection": {
      "type": "function",
      "name": "getSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.data.Array",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSelection": {
      "type": "function",
      "name": "setSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.data.Array",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetSelection": {
      "type": "function",
      "name": "resetSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "setValue": {
      "type": "function",
      "name": "setValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.virtual.selection.MModel",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "setValue implements part of the {@link qx.ui.form.IField} interface."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "selection {qx.data.IListData|null} List data to select as value.",
            "paramName": "selection",
            "description": " List data to select as value.",
            "type": [
              "qx.data.IListData",
              "null"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null} The status of this operation.",
            "type": "null",
            "desc": " The status of this operation."
          }
        ]
      }
    },
    "getValue": {
      "type": "function",
      "name": "getValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.virtual.selection.MModel",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "getValue implements part of the {@link qx.ui.form.IField} interface."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.IListData} The current selection.",
            "type": "qx.data.IListData",
            "desc": " The current selection."
          }
        ]
      }
    },
    "resetValue": {
      "type": "function",
      "name": "resetValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "_initSelectionManager": {
      "type": "function",
      "name": "_initSelectionManager",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "setAutoScrollIntoView": {
      "type": "function",
      "name": "setAutoScrollIntoView",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.virtual.selection.MModel",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determines, if automatically scrolling of selected item is active.\nSet <code>false</code> to suspend auto scrolling."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Set <code>false</code> to suspend auto scrolling.",
            "paramName": "value",
            "description": " Set <code>false</code> to suspend auto scrolling.",
            "type": "Boolean"
          }
        ]
      }
    },
    "getAutoScrollIntoView": {
      "type": "function",
      "name": "getAutoScrollIntoView",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.virtual.selection.MModel",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns true, if automatically scrolling of selected item is active."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>false</code> if auto scrolling is suspended.",
            "type": "Boolean",
            "desc": " Returns <code>false</code> if auto scrolling is suspended."
          }
        ]
      }
    },
    "_updateSelection": {
      "type": "function",
      "name": "_updateSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "_applySelection": {
      "type": "function",
      "name": "_applySelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "_applySelectionMode": {
      "type": "function",
      "name": "_applySelectionMode",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "_applyDragSelection": {
      "type": "function",
      "name": "_applyDragSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "_applyQuickSelection": {
      "type": "function",
      "name": "_applyQuickSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "_onChangeSelection": {
      "type": "function",
      "name": "_onChangeSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.virtual.selection.MModel",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSELECTION HANDLERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Event handler for the internal selection change {@link #selection}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} the change event.",
            "paramName": "e",
            "description": " the change event.",
            "type": "qx.event.type.Data"
          }
        ]
      }
    },
    "_onManagerChangeSelection": {
      "type": "function",
      "name": "_onManagerChangeSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.virtual.selection.MModel",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for the selection change from the <code>_manager</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} the change event.",
            "paramName": "e",
            "description": " the change event.",
            "type": "qx.event.type.Data"
          }
        ]
      }
    },
    "__synchronizeSelection": {
      "type": "function",
      "name": "__synchronizeSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "__replaceSelection": {
      "type": "function",
      "name": "__replaceSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.virtual.selection.MModel",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Replace the current selection with the passed selection Array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "newSelection {qx.data.Array} The new selection.",
            "paramName": "newSelection",
            "description": " The new selection.",
            "type": "qx.data.Array"
          }
        ]
      }
    },
    "__isSelectionEquals": {
      "type": "function",
      "name": "__isSelectionEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.virtual.selection.MModel",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Checks whether the local and the manager selection are equal."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the selections are equal,\n<code>false</code> otherwise.",
            "type": "Boolean",
            "desc": " <code>true</code> if the selections are equal,\n<code>false</code> otherwise."
          }
        ]
      }
    },
    "_applyDefaultSelection": {
      "type": "function",
      "name": "_applyDefaultSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.virtual.selection.MModel"
    },
    "getSelectionMode": {
      "type": "function",
      "name": "getSelectionMode",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSelectionMode": {
      "type": "function",
      "name": "setSelectionMode",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetSelectionMode": {
      "type": "function",
      "name": "resetSelectionMode",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getDragSelection": {
      "type": "function",
      "name": "getDragSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isDragSelection": {
      "type": "function",
      "name": "isDragSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDragSelection": {
      "type": "function",
      "name": "setDragSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDragSelection": {
      "type": "function",
      "name": "resetDragSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getQuickSelection": {
      "type": "function",
      "name": "getQuickSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isQuickSelection": {
      "type": "function",
      "name": "isQuickSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setQuickSelection": {
      "type": "function",
      "name": "setQuickSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetQuickSelection": {
      "type": "function",
      "name": "resetQuickSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "_applyContentPadding": {
      "type": "function",
      "name": "_applyContentPadding",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MContentPadding"
    },
    "getContentPaddingTop": {
      "type": "function",
      "name": "getContentPaddingTop",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setContentPaddingTop": {
      "type": "function",
      "name": "setContentPaddingTop",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetContentPaddingTop": {
      "type": "function",
      "name": "resetContentPaddingTop",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding"
    },
    "getContentPaddingRight": {
      "type": "function",
      "name": "getContentPaddingRight",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setContentPaddingRight": {
      "type": "function",
      "name": "setContentPaddingRight",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetContentPaddingRight": {
      "type": "function",
      "name": "resetContentPaddingRight",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding"
    },
    "getContentPaddingBottom": {
      "type": "function",
      "name": "getContentPaddingBottom",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setContentPaddingBottom": {
      "type": "function",
      "name": "setContentPaddingBottom",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetContentPaddingBottom": {
      "type": "function",
      "name": "resetContentPaddingBottom",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding"
    },
    "getContentPaddingLeft": {
      "type": "function",
      "name": "getContentPaddingLeft",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setContentPaddingLeft": {
      "type": "function",
      "name": "setContentPaddingLeft",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetContentPaddingLeft": {
      "type": "function",
      "name": "resetContentPaddingLeft",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding"
    },
    "getContentPadding": {
      "type": "function",
      "name": "getContentPadding",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setContentPadding": {
      "type": "function",
      "name": "setContentPadding",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetContentPadding": {
      "type": "function",
      "name": "resetContentPadding",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MContentPadding"
    },
    "getItemHeight": {
      "type": "function",
      "name": "getItemHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setItemHeight": {
      "type": "function",
      "name": "setItemHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetItemHeight": {
      "type": "function",
      "name": "resetItemHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOpenMode": {
      "type": "function",
      "name": "getOpenMode",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOpenMode": {
      "type": "function",
      "name": "setOpenMode",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOpenMode": {
      "type": "function",
      "name": "resetOpenMode",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getHideRoot": {
      "type": "function",
      "name": "getHideRoot",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isHideRoot": {
      "type": "function",
      "name": "isHideRoot",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setHideRoot": {
      "type": "function",
      "name": "setHideRoot",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetHideRoot": {
      "type": "function",
      "name": "resetHideRoot",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getShowTopLevelOpenCloseIcons": {
      "type": "function",
      "name": "getShowTopLevelOpenCloseIcons",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setShowTopLevelOpenCloseIcons": {
      "type": "function",
      "name": "setShowTopLevelOpenCloseIcons",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetShowTopLevelOpenCloseIcons": {
      "type": "function",
      "name": "resetShowTopLevelOpenCloseIcons",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getShowLeafs": {
      "type": "function",
      "name": "getShowLeafs",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isShowLeafs": {
      "type": "function",
      "name": "isShowLeafs",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setShowLeafs": {
      "type": "function",
      "name": "setShowLeafs",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetShowLeafs": {
      "type": "function",
      "name": "resetShowLeafs",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getChildProperty": {
      "type": "function",
      "name": "getChildProperty",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setChildProperty": {
      "type": "function",
      "name": "setChildProperty",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetChildProperty": {
      "type": "function",
      "name": "resetChildProperty",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getLabelPath": {
      "type": "function",
      "name": "getLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setLabelPath": {
      "type": "function",
      "name": "setLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetLabelPath": {
      "type": "function",
      "name": "resetLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getIconPath": {
      "type": "function",
      "name": "getIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setIconPath": {
      "type": "function",
      "name": "setIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetIconPath": {
      "type": "function",
      "name": "resetIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getLabelOptions": {
      "type": "function",
      "name": "getLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setLabelOptions": {
      "type": "function",
      "name": "setLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetLabelOptions": {
      "type": "function",
      "name": "resetLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getIconOptions": {
      "type": "function",
      "name": "getIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setIconOptions": {
      "type": "function",
      "name": "setIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetIconOptions": {
      "type": "function",
      "name": "resetIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getModel": {
      "type": "function",
      "name": "getModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setModel": {
      "type": "function",
      "name": "setModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetModel": {
      "type": "function",
      "name": "resetModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getDelegate": {
      "type": "function",
      "name": "getDelegate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDelegate": {
      "type": "function",
      "name": "setDelegate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDelegate": {
      "type": "function",
      "name": "resetDelegate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1286,
        "column": 2
      },
      "end": {
        "line": 1321,
        "column": 3
      }
    }
  },
  "descendants": []
}