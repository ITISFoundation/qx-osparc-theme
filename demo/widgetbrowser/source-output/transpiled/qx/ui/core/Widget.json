{
  "className": "qx.ui.core.Widget",
  "packageName": "qx.ui.core",
  "name": "Widget",
  "superClass": "qx.ui.core.LayoutItem",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [
    "qx.locale.MTranslation"
  ],
  "clazz": {
    "location": {
      "start": {
        "line": 42,
        "column": 0
      },
      "end": {
        "line": 3945,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "***********************************************************************\n\n\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "This is the base class for all widgets.\n\n*External Documentation*\n\n<a href='http://manual.qooxdoo.org/${qxversion}/pages/widget.html' target='_blank'>\nDocumentation of this widget in the qooxdoo manual.</a>\n\nNOTE: Instances of this class must be disposed of after use"
        }
      ],
      "@use": [
        {
          "name": "@use",
          "body": "qx.ui.core.EventHandler"
        },
        {
          "name": "@use",
          "body": "qx.event.handler.DragDrop"
        }
      ],
      "@asset": [
        {
          "name": "@asset",
          "body": "qx/static/blank.gif"
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "qx.ui.root.Inline"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 55,
        "column": 2
      },
      "end": {
        "line": 66,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "properties": {
    "paddingTop": {
      "location": {
        "start": {
          "line": 392,
          "column": 4
        },
        "end": {
          "line": 398,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPADDING\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Padding of the widget (top)"
          }
        ]
      },
      "name": "paddingTop",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyPadding",
      "check": "Integer",
      "defaultValue": 0
    },
    "paddingRight": {
      "location": {
        "start": {
          "line": 402,
          "column": 4
        },
        "end": {
          "line": 408,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Padding of the widget (right)"
          }
        ]
      },
      "name": "paddingRight",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyPadding",
      "check": "Integer",
      "defaultValue": 0
    },
    "paddingBottom": {
      "location": {
        "start": {
          "line": 412,
          "column": 4
        },
        "end": {
          "line": 418,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Padding of the widget (bottom)"
          }
        ]
      },
      "name": "paddingBottom",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyPadding",
      "check": "Integer",
      "defaultValue": 0
    },
    "paddingLeft": {
      "location": {
        "start": {
          "line": 422,
          "column": 4
        },
        "end": {
          "line": 428,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Padding of the widget (left)"
          }
        ]
      },
      "name": "paddingLeft",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyPadding",
      "check": "Integer",
      "defaultValue": 0
    },
    "padding": {
      "location": {
        "start": {
          "line": 439,
          "column": 4
        },
        "end": {
          "line": 444,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The 'padding' property is a shorthand property for setting 'paddingTop',\n'paddingRight', 'paddingBottom' and 'paddingLeft' at the same time.\n\nIf four values are specified they apply to top, right, bottom and left respectively.\nIf there is only one value, it applies to all sides, if there are two or three,\nthe missing values are taken from the opposite side."
          }
        ]
      },
      "name": "padding",
      "propertyType": "new",
      "themeable": true
    },
    "zIndex": {
      "location": {
        "start": {
          "line": 461,
          "column": 4
        },
        "end": {
          "line": 469,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSTYLING PROPERTIES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "The z-index property sets the stack order of an element. An element with\ngreater stack order is always in front of another element with lower stack order."
          }
        ]
      },
      "name": "zIndex",
      "propertyType": "new",
      "themeable": true,
      "event": "changeZIndex",
      "apply": "_applyZIndex",
      "allowNull": true,
      "check": "Integer",
      "defaultValue": 10
    },
    "decorator": {
      "location": {
        "start": {
          "line": 479,
          "column": 4
        },
        "end": {
          "line": 487,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The decorator property points to an object, which is responsible\nfor drawing the widget's decoration, e.g. border, background or shadow.\n\nThis can be a decorator object or a string pointing to a decorator\ndefined in the decoration theme."
          }
        ]
      },
      "name": "decorator",
      "propertyType": "new",
      "themeable": true,
      "event": "changeDecorator",
      "apply": "_applyDecorator",
      "allowNull": true,
      "check": "Decorator"
    },
    "backgroundColor": {
      "location": {
        "start": {
          "line": 493,
          "column": 4
        },
        "end": {
          "line": 500,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The background color the rendered widget."
          }
        ]
      },
      "name": "backgroundColor",
      "propertyType": "new",
      "themeable": true,
      "event": "changeBackgroundColor",
      "apply": "_applyBackgroundColor",
      "allowNull": true,
      "check": "Color"
    },
    "textColor": {
      "location": {
        "start": {
          "line": 506,
          "column": 4
        },
        "end": {
          "line": 514,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The text color the rendered widget."
          }
        ]
      },
      "name": "textColor",
      "propertyType": "new",
      "themeable": true,
      "event": "changeTextColor",
      "inheritable": true,
      "apply": "_applyTextColor",
      "allowNull": true,
      "check": "Color"
    },
    "font": {
      "location": {
        "start": {
          "line": 521,
          "column": 4
        },
        "end": {
          "line": 530,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The widget's font. The value is either a font name defined in the font\ntheme or an instance of {@link qx.bom.Font}."
          }
        ]
      },
      "name": "font",
      "propertyType": "new",
      "themeable": true,
      "event": "changeFont",
      "inheritable": true,
      "apply": "_applyFont",
      "allowNull": true,
      "check": "Font"
    },
    "opacity": {
      "location": {
        "start": {
          "line": 541,
          "column": 4
        },
        "end": {
          "line": 548,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Mapping to native style property opacity.\n\nThe uniform opacity setting to be applied across an entire object.\nBehaves like the new CSS-3 Property.\nAny values outside the range 0.0 (fully transparent) to 1.0\n(fully opaque) will be clamped to this range."
          }
        ]
      },
      "name": "opacity",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyOpacity",
      "allowNull": true,
      "check": "Number"
    },
    "cursor": {
      "location": {
        "start": {
          "line": 577,
          "column": 4
        },
        "end": {
          "line": 585,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Mapping to native style property cursor.\n\nThe name of the cursor to show when the pointer is over the widget.\nThis is any valid CSS2 cursor name defined by W3C.\n\nThe following values are possible crossbrowser:\n<ul><li>default</li>\n<li>crosshair</li>\n<li>pointer</li>\n<li>move</li>\n<li>n-resize</li>\n<li>ne-resize</li>\n<li>e-resize</li>\n<li>se-resize</li>\n<li>s-resize</li>\n<li>sw-resize</li>\n<li>w-resize</li>\n<li>nw-resize</li>\n<li>nesw-resize</li>\n<li>nwse-resize</li>\n<li>text</li>\n<li>wait</li>\n<li>help </li>\n</ul>"
          }
        ]
      },
      "name": "cursor",
      "propertyType": "new",
      "themeable": true,
      "inheritable": true,
      "apply": "_applyCursor",
      "allowNull": true,
      "check": "String"
    },
    "toolTip": {
      "location": {
        "start": {
          "line": 597,
          "column": 4
        },
        "end": {
          "line": 601,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the tooltip instance to use for this widget. If only the tooltip\ntext and icon have to be set its better to use the {@link #toolTipText}\nand {@link #toolTipIcon} properties since they use a shared tooltip\ninstance.\n\nIf this property is set the {@link #toolTipText} and {@link #toolTipIcon}\nproperties are ignored."
          }
        ]
      },
      "name": "toolTip",
      "propertyType": "new",
      "allowNull": true,
      "check": "qx.ui.tooltip.ToolTip"
    },
    "toolTipText": {
      "location": {
        "start": {
          "line": 610,
          "column": 4
        },
        "end": {
          "line": 616,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The text of the widget's tooltip. This text can contain HTML markup.\nThe text is displayed using a shared tooltip instance. If the tooltip\nmust be customized beyond the text and an icon {@link #toolTipIcon}, the\n{@link #toolTip} property has to be used"
          }
        ]
      },
      "name": "toolTipText",
      "propertyType": "new",
      "event": "changeToolTipText",
      "apply": "_applyToolTipText",
      "allowNull": true,
      "check": "String"
    },
    "toolTipIcon": {
      "location": {
        "start": {
          "line": 625,
          "column": 4
        },
        "end": {
          "line": 630,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The icon URI of the widget's tooltip. This icon is displayed using a shared\ntooltip instance. If the tooltip must be customized beyond the tooltip text\n{@link #toolTipText} and the icon, the {@link #toolTip} property has to be\nused."
          }
        ]
      },
      "name": "toolTipIcon",
      "propertyType": "new",
      "event": "changeToolTipText",
      "allowNull": true,
      "check": "String"
    },
    "blockToolTip": {
      "location": {
        "start": {
          "line": 635,
          "column": 4
        },
        "end": {
          "line": 639,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Controls if a tooltip should shown or not."
          }
        ]
      },
      "name": "blockToolTip",
      "propertyType": "new",
      "check": "Boolean",
      "defaultValue": false
    },
    "showToolTipWhenDisabled": {
      "location": {
        "start": {
          "line": 644,
          "column": 4
        },
        "end": {
          "line": 648,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Forces to show tooltip when widget is disabled."
          }
        ]
      },
      "name": "showToolTipWhenDisabled",
      "propertyType": "new",
      "check": "Boolean",
      "defaultValue": false
    },
    "visibility": {
      "location": {
        "start": {
          "line": 667,
          "column": 4
        },
        "end": {
          "line": 673,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nMANAGEMENT PROPERTIES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Controls the visibility. Valid values are:\n\n<ul>\n<li><b>visible</b>: Render the widget</li>\n<li><b>hidden</b>: Hide the widget but don't relayout the widget's parent.</li>\n<li><b>excluded</b>: Hide the widget and relayout the parent as if the\nwidget was not a child of its parent.</li>\n</ul>"
          }
        ]
      },
      "name": "visibility",
      "propertyType": "new",
      "event": "changeVisibility",
      "apply": "_applyVisibility",
      "possibleValues": [
        "visible",
        "hidden",
        "excluded"
      ],
      "defaultValue": "visible"
    },
    "enabled": {
      "location": {
        "start": {
          "line": 682,
          "column": 4
        },
        "end": {
          "line": 689,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget is enabled. Disabled widgets are usually grayed out\nand do not process user created events. While in the disabled state most\nuser input events are blocked. Only the {@link #pointerover} and\n{@link #pointerout} events will be dispatched."
          }
        ]
      },
      "name": "enabled",
      "propertyType": "new",
      "event": "changeEnabled",
      "inheritable": true,
      "apply": "_applyEnabled",
      "check": "Boolean",
      "defaultValue": true
    },
    "anonymous": {
      "location": {
        "start": {
          "line": 701,
          "column": 4
        },
        "end": {
          "line": 706,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget is anonymous.\n\nAnonymous widgets are ignored in the event hierarchy. This is useful\nfor combined widgets where the internal structure do not have a custom\nappearance with a different styling from the element around. This is\nespecially true for widgets like checkboxes or buttons where the text\nor icon are handled synchronously for state changes to the outer widget."
          }
        ]
      },
      "name": "anonymous",
      "propertyType": "new",
      "apply": "_applyAnonymous",
      "check": "Boolean",
      "defaultValue": false
    },
    "tabIndex": {
      "location": {
        "start": {
          "line": 716,
          "column": 4
        },
        "end": {
          "line": 721,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Defines the tab index of an widget. If widgets with tab indexes are part\nof the current focus root these elements are sorted in first priority. Afterwards\nthe sorting continues by rendered position, zIndex and other criteria.\n\nPlease note: The value must be between 1 and 32000."
          }
        ]
      },
      "name": "tabIndex",
      "propertyType": "new",
      "apply": "_applyTabIndex",
      "allowNull": true,
      "check": "Integer"
    },
    "focusable": {
      "location": {
        "start": {
          "line": 732,
          "column": 4
        },
        "end": {
          "line": 737,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget is focusable e.g. rendering a focus border and visualize\nas active element.\n\nSee also {@link #isTabable} which allows runtime checks for\n<code>isChecked</code> or other stuff to test whether the widget is\nreachable via the TAB key."
          }
        ]
      },
      "name": "focusable",
      "propertyType": "new",
      "apply": "_applyFocusable",
      "check": "Boolean",
      "defaultValue": false
    },
    "keepFocus": {
      "location": {
        "start": {
          "line": 749,
          "column": 4
        },
        "end": {
          "line": 754,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "If this property is enabled, the widget and all of its child widgets\nwill never get focused. The focus keeps at the currently\nfocused widget.\n\nThis only works for widgets which are not {@link #focusable}.\n\nThis is mainly useful for widget authors. Please use with caution!"
          }
        ]
      },
      "name": "keepFocus",
      "propertyType": "new",
      "apply": "_applyKeepFocus",
      "check": "Boolean",
      "defaultValue": false
    },
    "keepActive": {
      "location": {
        "start": {
          "line": 764,
          "column": 4
        },
        "end": {
          "line": 769,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "If this property if enabled, the widget and all of its child widgets\nwill never get activated. The activation keeps at the currently\nactivated widget.\n\nThis is mainly useful for widget authors. Please use with caution!"
          }
        ]
      },
      "name": "keepActive",
      "propertyType": "new",
      "apply": "_applyKeepActive",
      "check": "Boolean",
      "defaultValue": false
    },
    "draggable": {
      "location": {
        "start": {
          "line": 773,
          "column": 4
        },
        "end": {
          "line": 778,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget acts as a source for drag&drop operations"
          }
        ]
      },
      "name": "draggable",
      "propertyType": "new",
      "apply": "_applyDraggable",
      "check": "Boolean",
      "defaultValue": false
    },
    "droppable": {
      "location": {
        "start": {
          "line": 782,
          "column": 4
        },
        "end": {
          "line": 787,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget acts as a target for drag&drop operations"
          }
        ]
      },
      "name": "droppable",
      "propertyType": "new",
      "apply": "_applyDroppable",
      "check": "Boolean",
      "defaultValue": false
    },
    "selectable": {
      "location": {
        "start": {
          "line": 797,
          "column": 4
        },
        "end": {
          "line": 803,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget contains content which may be selected by the user.\n\nIf the value set to <code>true</code> the native browser selection can\nbe used for text selection. But it is normally useful for\nforms fields, longer texts/documents, editors, etc."
          }
        ]
      },
      "name": "selectable",
      "propertyType": "new",
      "event": "changeSelectable",
      "apply": "_applySelectable",
      "check": "Boolean",
      "defaultValue": false
    },
    "contextMenu": {
      "location": {
        "start": {
          "line": 809,
          "column": 4
        },
        "end": {
          "line": 815,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether to show a context menu and which one"
          }
        ]
      },
      "name": "contextMenu",
      "propertyType": "new",
      "event": "changeContextMenu",
      "apply": "_applyContextMenu",
      "allowNull": true,
      "check": "qx.ui.menu.Menu"
    },
    "nativeContextMenu": {
      "location": {
        "start": {
          "line": 824,
          "column": 4
        },
        "end": {
          "line": 831,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the native context menu should be enabled for this widget. To\nglobally enable the native context menu set the {@link #nativeContextMenu}\nproperty of the root widget ({@link qx.ui.root.Abstract}) to\n<code>true</code>."
          }
        ]
      },
      "name": "nativeContextMenu",
      "propertyType": "new",
      "themeable": true,
      "event": "changeNativeContextMenu",
      "apply": "_applyNativeContextMenu",
      "check": "Boolean",
      "defaultValue": false
    },
    "appearance": {
      "location": {
        "start": {
          "line": 838,
          "column": 4
        },
        "end": {
          "line": 844,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The appearance ID. This ID is used to identify the appearance theme\nentry to use for this widget. This controls the styling of the element."
          }
        ]
      },
      "name": "appearance",
      "propertyType": "new",
      "event": "changeAppearance",
      "apply": "_applyAppearance",
      "check": "String",
      "defaultValue": "widget"
    }
  },
  "members": {
    "__contentElement": {
      "location": {
        "start": {
          "line": 933,
          "column": 4
        },
        "end": {
          "line": 933,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__initialAppearanceApplied": {
      "location": {
        "start": {
          "line": 934,
          "column": 4
        },
        "end": {
          "line": 934,
          "column": 37
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__toolTipTextListenerId": {
      "location": {
        "start": {
          "line": 935,
          "column": 4
        },
        "end": {
          "line": 935,
          "column": 34
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__layoutManager": {
      "location": {
        "start": {
          "line": 947,
          "column": 4
        },
        "end": {
          "line": 947,
          "column": 26
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nLAYOUT INTERFACE\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.layout.Abstract} The connected layout manager"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_getLayout": {
      "location": {
        "start": {
          "line": 951,
          "column": 4
        },
        "end": {
          "line": 953,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Abstract} The widget's layout manager",
            "type": "qx.ui.layout.Abstract",
            "desc": " The widget's layout manager"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "_setLayout": {
      "location": {
        "start": {
          "line": 964,
          "column": 4
        },
        "end": {
          "line": 982,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set a layout manager for the widget. A a layout manager can only be connected\nwith one widget. Reset the connection with a previous widget first, if you\nlike to use it in another widget instead."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "layout {qx.ui.layout.Abstract} The new layout or\n<code>null</code> to reset the layout.",
            "paramName": "layout",
            "description": " The new layout or\n<code>null</code> to reset the layout.",
            "type": "qx.ui.layout.Abstract"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setLayoutParent": {
      "location": {
        "start": {
          "line": 986,
          "column": 4
        },
        "end": {
          "line": 1009,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "parent {qx.ui.core.Widget|null} The new parent.",
            "paramName": "parent",
            "description": " The new parent.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "_updateInsets": {
      "location": {
        "start": {
          "line": 1013,
          "column": 4
        },
        "end": {
          "line": 1013,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether insets have changed and must be updated"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "renderLayout": {
      "location": {
        "start": {
          "line": 1017,
          "column": 4
        },
        "end": {
          "line": 1095,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "left {Integer} Any integer value for the left position,\nalways in pixels",
            "paramName": "left",
            "description": " Any integer value for the left position,\nalways in pixels",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "top {Integer} Any integer value for the top position,\nalways in pixels",
            "paramName": "top",
            "description": " Any integer value for the top position,\nalways in pixels",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer} Any positive integer value for the width,\nalways in pixels",
            "paramName": "width",
            "description": " Any positive integer value for the width,\nalways in pixels",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "height {Integer} Any positive integer value for the height,\nalways in pixels",
            "paramName": "height",
            "description": " Any positive integer value for the height,\nalways in pixels",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map of which layout sizes changed.",
            "type": "Map",
            "desc": " A map of which layout sizes changed."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "__separators": {
      "location": {
        "start": {
          "line": 1112,
          "column": 4
        },
        "end": {
          "line": 1112,
          "column": 23
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSEPARATOR SUPPORT\n---------------------------------------------------------------------------"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "clearSeparators": {
      "location": {
        "start": {
          "line": 1115,
          "column": 4
        },
        "end": {
          "line": 1135,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "renderSeparator": {
      "location": {
        "start": {
          "line": 1139,
          "column": 4
        },
        "end": {
          "line": 1172,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "separator {String|qx.ui.decoration.IDecorator} The separator to render",
            "paramName": "separator",
            "description": " The separator to render",
            "type": [
              "String",
              "qx.ui.decoration.IDecorator"
            ]
          },
          {
            "name": "@param",
            "body": "bounds {Map} Contains the left and top coordinate and the width and height\nof the separator to render.",
            "paramName": "bounds",
            "description": " Contains the left and top coordinate and the width and height\nof the separator to render.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "_computeSizeHint": {
      "location": {
        "start": {
          "line": 1187,
          "column": 4
        },
        "end": {
          "line": 1284,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSIZE HINTS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The map with the preferred width/height and the allowed\nminimum and maximum values.",
            "type": "Map",
            "desc": " The map with the preferred width/height and the allowed\nminimum and maximum values."
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "invalidateLayoutCache": {
      "location": {
        "start": {
          "line": 1288,
          "column": 4
        },
        "end": {
          "line": 1295,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "_getContentHint": {
      "location": {
        "start": {
          "line": 1310,
          "column": 4
        },
        "end": {
          "line": 1344,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the recommended/natural dimensions of the widget's content.\n\nFor labels and images this may be their natural size when defined without\nany dimensions. For containers this may be the recommended size of the\nunderlying layout manager.\n\nDeveloper note: This can be overwritten by the derived classes to allow\na custom handling here."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}",
            "type": "Map",
            "desc": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getHeightForWidth": {
      "location": {
        "start": {
          "line": 1348,
          "column": 4
        },
        "end": {
          "line": 1371,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} The computed width",
            "paramName": "width",
            "description": " The computed width",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The desired height",
            "type": "Integer",
            "desc": " The desired height"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "_getContentHeightForWidth": {
      "location": {
        "start": {
          "line": 1381,
          "column": 4
        },
        "end": {
          "line": 1383,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the computed height for the given width."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} Incoming width (as limitation)",
            "paramName": "width",
            "description": " Incoming width (as limitation)",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Computed height while respecting the given width.",
            "type": "Integer",
            "desc": " Computed height while respecting the given width."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getInsets": {
      "location": {
        "start": {
          "line": 1402,
          "column": 4
        },
        "end": {
          "line": 1444,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nINSET CALCULATION SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns the sum of the widget's padding and border width."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Contains the keys <code>top</code>, <code>right</code>,\n<code>bottom</code> and <code>left</code>. All values are integers.",
            "type": "Map",
            "desc": " Contains the keys <code>top</code>, <code>right</code>,\n<code>bottom</code> and <code>left</code>. All values are integers."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getInnerSize": {
      "location": {
        "start": {
          "line": 1466,
          "column": 4
        },
        "end": {
          "line": 1479,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCOMPUTED LAYOUT SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns the widget's computed inner size as available\nthrough the layout process.\n\nThis function is guaranteed to return a correct value\nduring a {@link #resize} or {@link #move} event dispatch."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The widget inner dimension in pixel (if the layout is\nvalid). Contains the keys <code>width</code> and <code>height</code>.",
            "type": "Map",
            "desc": " The widget inner dimension in pixel (if the layout is\nvalid). Contains the keys <code>width</code> and <code>height</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fadeOut": {
      "location": {
        "start": {
          "line": 1497,
          "column": 4
        },
        "end": {
          "line": 1499,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nANIMATION SUPPORT: USER API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Fade out this widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} Time in ms.",
            "paramName": "duration",
            "description": " Time in ms.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.element.AnimationHandle} The animation handle to react for\nthe fade animation.",
            "type": "qx.bom.element.AnimationHandle",
            "desc": " The animation handle to react for\nthe fade animation."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fadeIn": {
      "location": {
        "start": {
          "line": 1507,
          "column": 4
        },
        "end": {
          "line": 1509,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fade in the widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} Time in ms.",
            "paramName": "duration",
            "description": " Time in ms.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.element.AnimationHandle} The animation handle to react for\nthe fade animation.",
            "type": "qx.bom.element.AnimationHandle",
            "desc": " The animation handle to react for\nthe fade animation."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyAnonymous": {
      "location": {
        "start": {
          "line": 1519,
          "column": 4
        },
        "end": {
          "line": 1525,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nVISIBILITY SUPPORT: USER API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "show": {
      "location": {
        "start": {
          "line": 1532,
          "column": 4
        },
        "end": {
          "line": 1534,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Make this widget visible."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hide": {
      "location": {
        "start": {
          "line": 1541,
          "column": 4
        },
        "end": {
          "line": 1543,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Hide this widget."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "exclude": {
      "location": {
        "start": {
          "line": 1550,
          "column": 4
        },
        "end": {
          "line": 1552,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Hide this widget and exclude it from the underlying layout."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isVisible": {
      "location": {
        "start": {
          "line": 1562,
          "column": 4
        },
        "end": {
          "line": 1564,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget is locally visible.\n\nNote: This method does not respect the hierarchy."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget is visible",
            "type": "Boolean",
            "desc": " Returns <code>true</code> when the widget is visible"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isHidden": {
      "location": {
        "start": {
          "line": 1574,
          "column": 4
        },
        "end": {
          "line": 1576,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget is locally hidden.\n\nNote: This method does not respect the hierarchy."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget is hidden",
            "type": "Boolean",
            "desc": " Returns <code>true</code> when the widget is hidden"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isExcluded": {
      "location": {
        "start": {
          "line": 1586,
          "column": 4
        },
        "end": {
          "line": 1588,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget is locally excluded.\n\nNote: This method does not respect the hierarchy."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget is excluded",
            "type": "Boolean",
            "desc": " Returns <code>true</code> when the widget is excluded"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "isSeeable": {
      "location": {
        "start": {
          "line": 1599,
          "column": 4
        },
        "end": {
          "line": 1612,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Detects if the widget and all its parents are visible.\n\nWARNING: Please use this method with caution because it flushes the\ninternal queues which might be an expensive operation."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the widget is currently on the screen",
            "type": "Boolean",
            "desc": " true, if the widget is currently on the screen"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__createContentElement": {
      "location": {
        "start": {
          "line": 1629,
          "column": 4
        },
        "end": {
          "line": 1655,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCREATION OF HTML ELEMENTS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Create the widget's content HTML element."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} The content HTML element",
            "type": "qx.html.Element",
            "desc": " The content HTML element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_createContentElement": {
      "location": {
        "start": {
          "line": 1668,
          "column": 4
        },
        "end": {
          "line": 1674,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the content element. The style properties\nposition and zIndex are modified from the Widget\ncore.\n\nThis function may be overridden to customize a class\ncontent."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} The widget's content element",
            "type": "qx.html.Element",
            "desc": " The widget's content element"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getContentElement": {
      "location": {
        "start": {
          "line": 1683,
          "column": 4
        },
        "end": {
          "line": 1685,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the element wrapper of the widget's content element.\nThis method exposes widget internal and must be used with caution!"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} The widget's content element",
            "type": "qx.html.Element",
            "desc": " The widget's content element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__widgetChildren": {
      "location": {
        "start": {
          "line": 1695,
          "column": 4
        },
        "end": {
          "line": 1695,
          "column": 27
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCHILDREN HANDLING\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.core.LayoutItem[]} List of all child widgets"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "getLayoutChildren": {
      "location": {
        "start": {
          "line": 1705,
          "column": 4
        },
        "end": {
          "line": 1727,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns all children, which are layout relevant. This excludes all widgets,\nwhich have a {@link qx.ui.core.Widget#visibility} value of <code>exclude</code>."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} All layout relevant children.",
            "type": "qx.ui.core.Widget[]",
            "desc": " All layout relevant children."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scheduleLayoutUpdate": {
      "location": {
        "start": {
          "line": 1734,
          "column": 4
        },
        "end": {
          "line": 1736,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Marks the layout of this widget as invalid and triggers a layout update.\nThis is a shortcut for <code>qx.ui.core.queue.Layout.add(this);</code>."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "invalidateLayoutChildren": {
      "location": {
        "start": {
          "line": 1742,
          "column": 4
        },
        "end": {
          "line": 1750,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the cache for children which should be laid out."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasLayoutChildren": {
      "location": {
        "start": {
          "line": 1760,
          "column": 4
        },
        "end": {
          "line": 1777,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether the layout has children, which are layout relevant. This\nexcludes all widgets, which have a {@link qx.ui.core.Widget#visibility}\nvalue of <code>exclude</code>."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the layout has layout relevant children",
            "type": "Boolean",
            "desc": " Whether the layout has layout relevant children"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getChildrenContainer": {
      "location": {
        "start": {
          "line": 1787,
          "column": 4
        },
        "end": {
          "line": 1789,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the widget which contains the children and\nis relevant for laying them out. This is from the user point of\nview and may not be identical to the technical structure."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} Widget which contains the children.",
            "type": "qx.ui.core.Widget",
            "desc": " Widget which contains the children."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__emptyChildren": {
      "location": {
        "start": {
          "line": 1798,
          "column": 4
        },
        "end": {
          "line": 1798,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} Placeholder for children list in empty widgets.\nMainly to keep instance number low."
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__emptyChildren)"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_getChildren": {
      "location": {
        "start": {
          "line": 1807,
          "column": 4
        },
        "end": {
          "line": 1809,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the children list"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{LayoutItem[]} The children array (Arrays are\nreference types, so please do not modify it in-place).",
            "type": "LayoutItem[]",
            "desc": " The children array (Arrays are\nreference types, so please do not modify it in-place)."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_indexOf": {
      "location": {
        "start": {
          "line": 1820,
          "column": 4
        },
        "end": {
          "line": 1828,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the index position of the given widget if it is\na child widget. Otherwise it returns <code>-1</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {Widget} the widget to query for",
            "paramName": "child",
            "description": " the widget to query for",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\nthe given widget is no child of this layout.",
            "type": "Integer",
            "desc": " The index position or <code>-1</code> when\nthe given widget is no child of this layout."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_hasChildren": {
      "location": {
        "start": {
          "line": 1836,
          "column": 4
        },
        "end": {
          "line": 1840,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget contains children."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "Boolean",
            "desc": " Returns <code>true</code> when the widget has children."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "addChildrenToQueue": {
      "location": {
        "start": {
          "line": 1848,
          "column": 4
        },
        "end": {
          "line": 1863,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Recursively adds all children to the given queue"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "queue {Array} The queue to add widgets to",
            "paramName": "queue",
            "description": " The queue to add widgets to",
            "type": "Array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_add": {
      "location": {
        "start": {
          "line": 1876,
          "column": 4
        },
        "end": {
          "line": 1894,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds a new child widget.\n\nThe supported keys of the layout options map depend on the layout manager\nused to position the widget. The options are documented in the class\ndocumentation of each layout manager {@link qx.ui.layout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the widget to add.",
            "paramName": "child",
            "description": " the widget to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addAt": {
      "location": {
        "start": {
          "line": 1906,
          "column": 4
        },
        "end": {
          "line": 1930,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a child widget at the specified index"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted. If no\nwidget exists at the given index, the new widget gets appended to the\ncurrent list of children.",
            "paramName": "index",
            "description": " Index, at which the widget will be inserted. If no\nwidget exists at the given index, the new widget gets appended to the\ncurrent list of children.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addBefore": {
      "location": {
        "start": {
          "line": 1940,
          "column": 4
        },
        "end": {
          "line": 1963,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a widget before another already inserted widget"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {LayoutItem} widget before the new widget will be inserted.",
            "paramName": "before",
            "description": " widget before the new widget will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addAfter": {
      "location": {
        "start": {
          "line": 1974,
          "column": 4
        },
        "end": {
          "line": 1997,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a widget after another already inserted widget"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {LayoutItem} widget, after which the new widget will\nbe inserted",
            "paramName": "after",
            "description": " widget, after which the new widget will\nbe inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_remove": {
      "location": {
        "start": {
          "line": 2005,
          "column": 4
        },
        "end": {
          "line": 2013,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the given child widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the widget to remove",
            "paramName": "child",
            "description": " the widget to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_removeAt": {
      "location": {
        "start": {
          "line": 2022,
          "column": 4
        },
        "end": {
          "line": 2034,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the widget at the specified index."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove.",
            "paramName": "index",
            "description": " Index of the widget to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The removed item.",
            "type": "qx.ui.core.LayoutItem",
            "desc": " The removed item."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_removeAll": {
      "location": {
        "start": {
          "line": 2042,
          "column": 4
        },
        "end": {
          "line": 2060,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove all children."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the removed children.",
            "type": "Array",
            "desc": " An array containing the removed children."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_afterAddChild": {
      "location": {
        "start": {
          "line": 2078,
          "column": 4
        },
        "end": {
          "line": 2078,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCHILDREN HANDLING - TEMPLATE METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "This method gets called each time after a child widget was added and can\nbe overridden to get notified about child adds."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(child)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} The added child.",
            "paramName": "child",
            "description": " The added child.",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_afterRemoveChild": {
      "location": {
        "start": {
          "line": 2088,
          "column": 4
        },
        "end": {
          "line": 2088,
          "column": 28
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This method gets called each time after a child widget was removed and\ncan be overridden to get notified about child removes."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(child)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} The removed child.",
            "paramName": "child",
            "description": " The removed child.",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "__addHelper": {
      "location": {
        "start": {
          "line": 2106,
          "column": 4
        },
        "end": {
          "line": 2140,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCHILDREN HANDLING - IMPLEMENTATION\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Convenience function to add a child widget. It will insert the child to\nthe parent widget and schedule a layout update."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} The child to add.",
            "paramName": "child",
            "description": " The child to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map|null} Optional layout data for the widget.",
            "paramName": "options",
            "description": " Optional layout data for the widget.",
            "type": [
              "Map",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__removeHelper": {
      "location": {
        "start": {
          "line": 2149,
          "column": 4
        },
        "end": {
          "line": 2174,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Convenience function to remove a child widget. It will remove it\nfrom the parent widget and schedule a layout update."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} The child to remove.",
            "paramName": "child",
            "description": " The child to remove.",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "capture": {
      "location": {
        "start": {
          "line": 2196,
          "column": 4
        },
        "end": {
          "line": 2198,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENTS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Enables pointer event capturing. All pointer events will dispatched on this\nwidget until capturing is disabled using {@link #releaseCapture} or a\npointer button is clicked. If the widgets becomes the capturing widget the\n{@link #capture} event is fired. Once it loses capture mode the\n{@link #losecapture} event is fired."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "capture {Boolean?true} If true all events originating in\nthe container are captured. If false events originating in the container\nare not captured.",
            "paramName": "capture",
            "description": " If true all events originating in\nthe container are captured. If false events originating in the container\nare not captured.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "releaseCapture": {
      "location": {
        "start": {
          "line": 2204,
          "column": 4
        },
        "end": {
          "line": 2206,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Disables pointer capture mode enabled by {@link #capture}."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isCapturing": {
      "location": {
        "start": {
          "line": 2214,
          "column": 4
        },
        "end": {
          "line": 2222,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Checks if pointer event capturing is enabled for this widget."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if capturing is active",
            "type": "Boolean",
            "desc": " <code>true</code> if capturing is active"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyPadding": {
      "location": {
        "start": {
          "line": 2234,
          "column": 4
        },
        "end": {
          "line": 2240,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPADDING SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__updateContentPadding": {
      "location": {
        "start": {
          "line": 2249,
          "column": 4
        },
        "end": {
          "line": 2258,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper to updated the css padding of the content element considering the\npadding of the decorator."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "style {String} The name of the css padding property e.g. <code>paddingTop</code>",
            "paramName": "style",
            "description": " The name of the css padding property e.g. <code>paddingTop</code>",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {Number} The value to set.",
            "paramName": "value",
            "description": " The value to set.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyDecorator": {
      "location": {
        "start": {
          "line": 2268,
          "column": 4
        },
        "end": {
          "line": 2284,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nDECORATION SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyToolTipText": {
      "location": {
        "start": {
          "line": 2296,
          "column": 4
        },
        "end": {
          "line": 2313,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nOTHER PROPERTIES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyTextColor": {
      "location": {
        "start": {
          "line": 2316,
          "column": 4
        },
        "end": {
          "line": 2318,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyZIndex": {
      "location": {
        "start": {
          "line": 2322,
          "column": 4
        },
        "end": {
          "line": 2324,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyVisibility": {
      "location": {
        "start": {
          "line": 2328,
          "column": 4
        },
        "end": {
          "line": 2346,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyOpacity": {
      "location": {
        "start": {
          "line": 2350,
          "column": 4
        },
        "end": {
          "line": 2352,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyCursor": {
      "location": {
        "start": {
          "line": 2356,
          "column": 4
        },
        "end": {
          "line": 2367,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyBackgroundColor": {
      "location": {
        "start": {
          "line": 2371,
          "column": 4
        },
        "end": {
          "line": 2377,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyFont": {
      "location": {
        "start": {
          "line": 2381,
          "column": 4
        },
        "end": {
          "line": 2383,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onChangeTheme": {
      "location": {
        "start": {
          "line": 2393,
          "column": 4
        },
        "end": {
          "line": 2425,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nDYNAMIC THEME SWITCH SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "__states": {
      "location": {
        "start": {
          "line": 2436,
          "column": 4
        },
        "end": {
          "line": 2436,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSTATE HANDLING\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} The current widget states"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "$$stateChanges": {
      "location": {
        "start": {
          "line": 2440,
          "column": 4
        },
        "end": {
          "line": 2440,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the widget has state changes which are not yet queued"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "_forwardStates": {
      "location": {
        "start": {
          "line": 2444,
          "column": 4
        },
        "end": {
          "line": 2444,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Can be overridden to forward states to the child controls."
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "hasState": {
      "location": {
        "start": {
          "line": 2453,
          "column": 4
        },
        "end": {
          "line": 2457,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether a state is set."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} the state to check.",
            "paramName": "state",
            "description": " the state to check.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the state is set.",
            "type": "Boolean",
            "desc": " whether the state is set."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addState": {
      "location": {
        "start": {
          "line": 2465,
          "column": 4
        },
        "end": {
          "line": 2504,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets a state."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} The state to add",
            "paramName": "state",
            "description": " The state to add",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeState": {
      "location": {
        "start": {
          "line": 2512,
          "column": 4
        },
        "end": {
          "line": 2546,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Clears a state."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} the state to clear.",
            "paramName": "state",
            "description": " the state to clear.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "replaceState": {
      "location": {
        "start": {
          "line": 2557,
          "column": 4
        },
        "end": {
          "line": 2592,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Replaces the first state with the second one.\n\nThis method is ideal for state transitions e.g. normal => selected."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "old {String} Previous state",
            "paramName": "old",
            "description": " Previous state",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {String} New state",
            "paramName": "value",
            "description": " New state",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__appearanceSelector": {
      "location": {
        "start": {
          "line": 2605,
          "column": 4
        },
        "end": {
          "line": 2605,
          "column": 31
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nAPPEARANCE SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String} The currently compiled selector to lookup the matching appearance"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__updateSelector": {
      "location": {
        "start": {
          "line": 2609,
          "column": 4
        },
        "end": {
          "line": 2609,
          "column": 27
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the selectors needs to be recomputed before updating appearance"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "syncAppearance": {
      "location": {
        "start": {
          "line": 2617,
          "column": 4
        },
        "end": {
          "line": 2701,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Renders the appearance using the current widget states.\n\nUsed exclusively by {qx.ui.core.queue.Appearance}."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyAppearance": {
      "location": {
        "start": {
          "line": 2705,
          "column": 4
        },
        "end": {
          "line": 2707,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "checkAppearanceNeeds": {
      "location": {
        "start": {
          "line": 2716,
          "column": 4
        },
        "end": {
          "line": 2736,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper method called from the visibility queue to detect outstanding changes\nto the appearance."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateAppearance": {
      "location": {
        "start": {
          "line": 2743,
          "column": 4
        },
        "end": {
          "line": 2765,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Refreshes the appearance of this widget and all\nregistered child controls."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "syncWidget": {
      "location": {
        "start": {
          "line": 2783,
          "column": 4
        },
        "end": {
          "line": 2785,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nWIDGET QUEUE\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "This method is called during the flush of the\n{@link qx.ui.core.queue.Widget widget queue}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "jobs {Map} A map of jobs.",
            "paramName": "jobs",
            "description": " A map of jobs.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getEventTarget": {
      "location": {
        "start": {
          "line": 2804,
          "column": 4
        },
        "end": {
          "line": 2817,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns the next event target in the parent chain. May\nalso return the widget itself if it is not anonymous."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} A working event target of this widget.\nMay be <code>null</code> as well.",
            "type": "qx.ui.core.Widget",
            "desc": " A working event target of this widget.\nMay be <code>null</code> as well."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFocusTarget": {
      "location": {
        "start": {
          "line": 2827,
          "column": 4
        },
        "end": {
          "line": 2844,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the next focus target in the parent chain. May\nalso return the widget itself if it is not anonymous and focusable."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} A working focus target of this widget.\nMay be <code>null</code> as well.",
            "type": "qx.ui.core.Widget",
            "desc": " A working focus target of this widget.\nMay be <code>null</code> as well."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFocusElement": {
      "location": {
        "start": {
          "line": 2852,
          "column": 4
        },
        "end": {
          "line": 2854,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the element which should be focused."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} The html element to focus.",
            "type": "qx.html.Element",
            "desc": " The html element to focus."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isTabable": {
      "location": {
        "start": {
          "line": 2866,
          "column": 4
        },
        "end": {
          "line": 2868,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget is reachable by pressing the TAB key.\n\nNormally tests for both, the focusable property and a positive or\nundefined tabIndex property. The widget must have a DOM element\nsince only visible widgets are tabable."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the element is tabable.",
            "type": "Boolean",
            "desc": " Whether the element is tabable."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyFocusable": {
      "location": {
        "start": {
          "line": 2872,
          "column": 4
        },
        "end": {
          "line": 2897,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyKeepFocus": {
      "location": {
        "start": {
          "line": 2901,
          "column": 4
        },
        "end": {
          "line": 2905,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyKeepActive": {
      "location": {
        "start": {
          "line": 2909,
          "column": 4
        },
        "end": {
          "line": 2913,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyTabIndex": {
      "location": {
        "start": {
          "line": 2917,
          "column": 4
        },
        "end": {
          "line": 2928,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applySelectable": {
      "location": {
        "start": {
          "line": 2932,
          "column": 4
        },
        "end": {
          "line": 2941,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyEnabled": {
      "location": {
        "start": {
          "line": 2945,
          "column": 4
        },
        "end": {
          "line": 2995,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyNativeContextMenu": {
      "location": {
        "start": {
          "line": 3007,
          "column": 4
        },
        "end": {
          "line": 3009,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCONTEXT MENU\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyContextMenu": {
      "location": {
        "start": {
          "line": 3013,
          "column": 4
        },
        "end": {
          "line": 3043,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onContextMenuOpen": {
      "location": {
        "start": {
          "line": 3051,
          "column": 4
        },
        "end": {
          "line": 3064,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event listener for <code>contextmenu</code> event"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The event object",
            "paramName": "e",
            "description": " The event object",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onBeforeContextMenuOpen": {
      "location": {
        "start": {
          "line": 3072,
          "column": 4
        },
        "end": {
          "line": 3077,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event listener for <code>beforeContextmenuOpen</code> event"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The data event",
            "paramName": "e",
            "description": " The data event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onStopEvent": {
      "location": {
        "start": {
          "line": 3094,
          "column": 4
        },
        "end": {
          "line": 3096,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nUSEFUL COMMON EVENT LISTENERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Event listener which stops a bubbling event from\npropagates further."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Any bubbling event",
            "paramName": "e",
            "description": " Any bubbling event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getDragDropCursor": {
      "location": {
        "start": {
          "line": 3114,
          "column": 4
        },
        "end": {
          "line": 3116,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nDRAG & DROP SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Helper to return a instance of a {@link qx.ui.core.DragDropCursor}.\nIf you want to use your own DragDropCursor, override this method\nand return your custom instance."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.DragDropCursor} A drag drop cursor implementation.",
            "type": "qx.ui.core.DragDropCursor",
            "desc": " A drag drop cursor implementation."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyDraggable": {
      "location": {
        "start": {
          "line": 3119,
          "column": 4
        },
        "end": {
          "line": 3146,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyDroppable": {
      "location": {
        "start": {
          "line": 3150,
          "column": 4
        },
        "end": {
          "line": 3158,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onDragStart": {
      "location": {
        "start": {
          "line": 3166,
          "column": 4
        },
        "end": {
          "line": 3170,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event listener for own <code>dragstart</code> event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} Drag event",
            "paramName": "e",
            "description": " Drag event",
            "type": "qx.event.type.Drag"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onDrag": {
      "location": {
        "start": {
          "line": 3178,
          "column": 4
        },
        "end": {
          "line": 3180,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event listener for own <code>drag</code> event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} Drag event",
            "paramName": "e",
            "description": " Drag event",
            "type": "qx.event.type.Drag"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onDragEnd": {
      "location": {
        "start": {
          "line": 3188,
          "column": 4
        },
        "end": {
          "line": 3192,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event listener for own <code>dragend</code> event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} Drag event",
            "paramName": "e",
            "description": " Drag event",
            "type": "qx.event.type.Drag"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onDragChange": {
      "location": {
        "start": {
          "line": 3200,
          "column": 4
        },
        "end": {
          "line": 3205,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event listener for own <code>dragchange</code> event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} Drag event",
            "paramName": "e",
            "description": " Drag event",
            "type": "qx.event.type.Drag"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "visualizeFocus": {
      "location": {
        "start": {
          "line": 3226,
          "column": 4
        },
        "end": {
          "line": 3228,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nVISUALIZE FOCUS STATES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Event handler which is executed when the widget receives the focus.\n\nThis method is used by the {@link qx.ui.core.FocusHandler} to\napply states etc. to a focused widget."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "visualizeBlur": {
      "location": {
        "start": {
          "line": 3239,
          "column": 4
        },
        "end": {
          "line": 3241,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler which is executed when the widget lost the focus.\n\nThis method is used by the {@link qx.ui.core.FocusHandler} to\nremove states etc. from a previously focused widget."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollChildIntoView": {
      "location": {
        "start": {
          "line": 3269,
          "column": 4
        },
        "end": {
          "line": 3307,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSCROLL CHILD INTO VIEW\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "The method scrolls the given item into view."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} Child to scroll into view",
            "paramName": "child",
            "description": " Child to scroll into view",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "alignX {String?null} Alignment of the item. Allowed values:\n<code>left</code> or <code>right</code>. Could also be null.\nWithout a given alignment the method tries to scroll the widget\nwith the minimum effort needed.",
            "paramName": "alignX",
            "description": " Alignment of the item. Allowed values:\n<code>left</code> or <code>right</code>. Could also be null.\nWithout a given alignment the method tries to scroll the widget\nwith the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "alignY {String?null} Alignment of the item. Allowed values:\n<code>top</code> or <code>bottom</code>. Could also be null.\nWithout a given alignment the method tries to scroll the widget\nwith the minimum effort needed.",
            "paramName": "alignY",
            "description": " Alignment of the item. Allowed values:\n<code>top</code> or <code>bottom</code>. Could also be null.\nWithout a given alignment the method tries to scroll the widget\nwith the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?true} Whether the execution should be made\ndirectly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\ndirectly when possible",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollChildIntoViewX": {
      "location": {
        "start": {
          "line": 3321,
          "column": 4
        },
        "end": {
          "line": 3323,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The method scrolls the given item into view (x-axis only)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} Child to scroll into view",
            "paramName": "child",
            "description": " Child to scroll into view",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "align {String?null} Alignment of the item. Allowed values:\n<code>left</code> or <code>right</code>. Could also be null.\nWithout a given alignment the method tries to scroll the widget\nwith the minimum effort needed.",
            "paramName": "align",
            "description": " Alignment of the item. Allowed values:\n<code>left</code> or <code>right</code>. Could also be null.\nWithout a given alignment the method tries to scroll the widget\nwith the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?true} Whether the execution should be made\ndirectly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\ndirectly when possible",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollChildIntoViewY": {
      "location": {
        "start": {
          "line": 3337,
          "column": 4
        },
        "end": {
          "line": 3339,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The method scrolls the given item into view (y-axis only)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} Child to scroll into view",
            "paramName": "child",
            "description": " Child to scroll into view",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "align {String?null} Alignment of the element. Allowed values:\n<code>top</code> or <code>bottom</code>. Could also be null.\nWithout a given alignment the method tries to scroll the widget\nwith the minimum effort needed.",
            "paramName": "align",
            "description": " Alignment of the element. Allowed values:\n<code>top</code> or <code>bottom</code>. Could also be null.\nWithout a given alignment the method tries to scroll the widget\nwith the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?true} Whether the execution should be made\ndirectly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\ndirectly when possible",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "focus": {
      "location": {
        "start": {
          "line": 3355,
          "column": 4
        },
        "end": {
          "line": 3362,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nFOCUS SYSTEM USER ACCESS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Focus this widget."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "blur": {
      "location": {
        "start": {
          "line": 3369,
          "column": 4
        },
        "end": {
          "line": 3376,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove focus from this widget."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "activate": {
      "location": {
        "start": {
          "line": 3383,
          "column": 4
        },
        "end": {
          "line": 3385,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Activate this widget e.g. for keyboard events."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deactivate": {
      "location": {
        "start": {
          "line": 3392,
          "column": 4
        },
        "end": {
          "line": 3394,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Deactivate this widget e.g. for keyboard events."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "tabFocus": {
      "location": {
        "start": {
          "line": 3404,
          "column": 4
        },
        "end": {
          "line": 3406,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Focus this widget when using the keyboard. This is\nmainly thought for the advanced qooxdoo keyboard handling\nand should not be used by the application developer."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasChildControl": {
      "location": {
        "start": {
          "line": 3424,
          "column": 4
        },
        "end": {
          "line": 3431,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCHILD CONTROL SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Whether the given ID is assigned to a child control."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the child control is registered.",
            "type": "Boolean",
            "desc": " <code>true</code> when the child control is registered."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__childControls": {
      "location": {
        "start": {
          "line": 3435,
          "column": 4
        },
        "end": {
          "line": 3435,
          "column": 26
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Map of instantiated child controls"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_getCreatedChildControls": {
      "location": {
        "start": {
          "line": 3443,
          "column": 4
        },
        "end": {
          "line": 3445,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a map of all already created child controls"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} mapping of child control id to the child widget.",
            "type": "Map",
            "desc": " mapping of child control id to the child widget."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getChildControl": {
      "location": {
        "start": {
          "line": 3466,
          "column": 4
        },
        "end": {
          "line": 3487,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the child control from the given ID. Returns\n<code>null</code> when the child control is unknown.\n\nIt is designed for widget authors, who want to access child controls,\nwhich are created by the widget itself.\n\n<b>Warning</b>: This method exposes widget internals and modifying the\nreturned sub widget may bring the widget into an inconsistent state.\nAccessing child controls defined in a super class or in an foreign class\nis not supported. Do not use it if the result can be achieved using public\nAPI or theming."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "notcreate {Boolean?false} Whether the child control\nshould not be created dynamically if not yet available.",
            "paramName": "notcreate",
            "description": " Whether the child control\nshould not be created dynamically if not yet available.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} Child control",
            "type": "qx.ui.core.Widget",
            "desc": " Child control"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_showChildControl": {
      "location": {
        "start": {
          "line": 3496,
          "column": 4
        },
        "end": {
          "line": 3501,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Shows the given child control by ID"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} the child control",
            "type": "qx.ui.core.Widget",
            "desc": " the child control"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_excludeChildControl": {
      "location": {
        "start": {
          "line": 3509,
          "column": 4
        },
        "end": {
          "line": 3515,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Excludes the given child control by ID"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isChildControlVisible": {
      "location": {
        "start": {
          "line": 3524,
          "column": 4
        },
        "end": {
          "line": 3532,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the given child control is visible."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the child control is visible.",
            "type": "Boolean",
            "desc": " <code>true</code> when the child control is visible."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_releaseChildControl": {
      "location": {
        "start": {
          "line": 3542,
          "column": 4
        },
        "end": {
          "line": 3568,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Release the child control by ID and decouple the\nchild from the parent. This method does not dispose the child control."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The released control",
            "type": "qx.ui.core.Widget",
            "desc": " The released control"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_createChildControl": {
      "location": {
        "start": {
          "line": 3581,
          "column": 4
        },
        "end": {
          "line": 3630,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Force the creation of the given child control by ID.\n\nDo not override this method! Override {@link #_createChildControlImpl}\ninstead if you need to support new controls."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control",
            "paramName": "id",
            "description": " ID of the child control",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The created control",
            "type": "qx.ui.core.Widget",
            "desc": " The created control"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when the control was created before"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_createChildControlImpl": {
      "location": {
        "start": {
          "line": 3644,
          "column": 4
        },
        "end": {
          "line": 3646,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal method to create child controls. This method\nshould be overwritten by classes which extends this one\nto support new child control types."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "paramName": "id",
            "description": " ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "hash {String?undefined} If a child control name contains a #,\nall text following the # will be the hash argument.",
            "paramName": "hash",
            "description": " If a child control name contains a #,\nall text following the # will be the hash argument.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The created control or <code>null</code>",
            "type": "qx.ui.core.Widget",
            "desc": " The created control or <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_disposeChildControls": {
      "location": {
        "start": {
          "line": 3654,
          "column": 4
        },
        "end": {
          "line": 3674,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Dispose all registered controls. This is automatically\nexecuted by the widget."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_findTopControl": {
      "location": {
        "start": {
          "line": 3683,
          "column": 4
        },
        "end": {
          "line": 3696,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Finds and returns the top level control. This is the first\nwidget which is not a child control of any other widget."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The top control",
            "type": "qx.ui.core.Widget",
            "desc": " The top control"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getSubcontrolId": {
      "location": {
        "start": {
          "line": 3706,
          "column": 4
        },
        "end": {
          "line": 3709,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Return the ID (name) if this instance was a created as a child control of another widget.\n\nSee the first parameter id in {@link qx.ui.core.Widget#_createChildControlImpl}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} ID of the current widget or null if it was not created as a subcontrol",
            "type": "String|null",
            "desc": " ID of the current widget or null if it was not created as a subcontrol"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getContentLocation": {
      "location": {
        "start": {
          "line": 3742,
          "column": 4
        },
        "end": {
          "line": 3746,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nLOWER LEVEL ACCESS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Computes the location of the content element in context of the document\ndimensions.\n\nSupported modes:\n\n* <code>margin</code>: Calculate from the margin box of the element\n(bigger than the visual appearance: including margins of given element)\n* <code>box</code>: Calculates the offset box of the element (default,\nuses the same size as visible)\n* <code>border</code>: Calculate the border box (useful to align to\nborder edges of two elements).\n* <code>scroll</code>: Calculate the scroll box (relevant for absolute\npositioned content).\n* <code>padding</code>: Calculate the padding box (relevant for\nstatic/relative positioned content)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mode {String?box} A supported option. See comment above.",
            "paramName": "mode",
            "description": " A supported option. See comment above.",
            "optional": true,
            "defaultValue": "box",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Returns a map with <code>left</code>, <code>top</code>,\n<code>right</code> and <code>bottom</code> which contains the distance\nof the element relative to the document.",
            "type": "Map",
            "desc": " Returns a map with <code>left</code>, <code>top</code>,\n<code>right</code> and <code>bottom</code> which contains the distance\nof the element relative to the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setDomLeft": {
      "location": {
        "start": {
          "line": 3759,
          "column": 4
        },
        "end": {
          "line": 3767,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Directly modifies the relative left position in relation\nto the parent element.\n\nUse with caution! This may be used for animations, drag&drop\nor other cases where high performance location manipulation\nis important. Otherwise please use {@link qx.ui.core.LayoutItem#setUserBounds} instead."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} Left position",
            "paramName": "value",
            "description": " Left position",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setDomTop": {
      "location": {
        "start": {
          "line": 3780,
          "column": 4
        },
        "end": {
          "line": 3788,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Directly modifies the relative top position in relation\nto the parent element.\n\nUse with caution! This may be used for animations, drag&drop\nor other cases where high performance location manipulation\nis important. Otherwise please use {@link qx.ui.core.LayoutItem#setUserBounds} instead."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} Top position",
            "paramName": "value",
            "description": " Top position",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setDomPosition": {
      "location": {
        "start": {
          "line": 3802,
          "column": 4
        },
        "end": {
          "line": 3814,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Directly modifies the relative left and top position in relation\nto the parent element.\n\nUse with caution! This may be used for animations, drag&drop\nor other cases where high performance location manipulation\nis important. Otherwise please use {@link qx.ui.core.LayoutItem#setUserBounds} instead."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "left {Integer} Left position",
            "paramName": "left",
            "description": " Left position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "top {Integer} Top position",
            "paramName": "top",
            "description": " Top position",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "destroy": {
      "location": {
        "start": {
          "line": 3832,
          "column": 4
        },
        "end": {
          "line": 3844,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nENHANCED DISPOSE SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Removes this widget from its parent and disposes it.\n\nPlease note that the widget is not disposed synchronously. The\nreal dispose happens after the next queue flush."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clone": {
      "location": {
        "start": {
          "line": 3857,
          "column": 4
        },
        "end": {
          "line": 3870,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCLONE SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object} The clone",
            "type": "qx.core.Object",
            "desc": " The clone"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem",
        "qx.core.Object"
      ]
    },
    "tr": {
      "type": "function",
      "name": "tr",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Translate a message\nMark the message for translation."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "varargs {Object} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "desc": " The translated message or localized string"
          }
        ]
      }
    },
    "trn": {
      "type": "function",
      "name": "trn",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Translate a plural message\nMark the messages for translation.\n\nDepending on the third argument the plural or the singular form is chosen."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "singularMessageId {String} message id of the singular form (may contain format strings)",
            "paramName": "singularMessageId",
            "description": " message id of the singular form (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "pluralMessageId {String} message id of the plural form (may contain format strings)",
            "paramName": "pluralMessageId",
            "description": " message id of the plural form (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "count {Integer} if greater than 1 the plural form otherwise the singular form is returned.",
            "paramName": "count",
            "description": " if greater than 1 the plural form otherwise the singular form is returned.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {Object} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "desc": " The translated message or localized string"
          }
        ]
      }
    },
    "trc": {
      "type": "function",
      "name": "trc",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Translate a message with translation hint\nMark the messages for translation."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "hint {String} hint for the translator of the message. Will be included in the .po file.",
            "paramName": "hint",
            "description": " hint for the translator of the message. Will be included in the .po file.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "varargs {Object} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "desc": " The translated message or localized string"
          }
        ]
      }
    },
    "trnc": {
      "type": "function",
      "name": "trnc",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Translate a plural message with translation hint\nMark the messages for translation.\n\nDepending on the third argument the plural or the singular form is chosen."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "hint {String} hint for the translator of the message. Will be included in the .po file.",
            "paramName": "hint",
            "description": " hint for the translator of the message. Will be included in the .po file.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "singularMessageId {String} message id of the singular form (may contain format strings)",
            "paramName": "singularMessageId",
            "description": " message id of the singular form (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "pluralMessageId {String} message id of the plural form (may contain format strings)",
            "paramName": "pluralMessageId",
            "description": " message id of the plural form (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "count {Integer} if greater than 1 the plural form otherwise the singular form is returned.",
            "paramName": "count",
            "description": " if greater than 1 the plural form otherwise the singular form is returned.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {Object} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "desc": " The translated message or localized string"
          }
        ]
      }
    },
    "marktr": {
      "type": "function",
      "name": "marktr",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Mark the message for translation but return the original message."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} the message ID",
            "paramName": "messageId",
            "description": " the message ID",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} messageId",
            "type": "String",
            "desc": " messageId"
          }
        ]
      }
    },
    "bind": {
      "type": "function",
      "name": "bind",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The bind method delegates the call to the\n{@link qx.data.SingleValueBinding#bind} function. As source, the current\nobject (this) will be used."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourcePropertyChain {String} The property chain which represents\nthe source property.",
            "paramName": "sourcePropertyChain",
            "description": " The property chain which represents\nthe source property.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which the source should\nbe bind to.",
            "paramName": "targetObject",
            "description": " The object which the source should\nbe bind to.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The property name of the target object.",
            "paramName": "targetProperty",
            "description": " The property name of the target object.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "options {Map} A map containing the options. See\n{@link qx.data.SingleValueBinding#bind} for more\ninformation.",
            "paramName": "options",
            "description": " A map containing the options. See\n{@link qx.data.SingleValueBinding#bind} for more\ninformation.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Returns the internal id for that binding. This can be used\nfor referencing the binding e.g. for removing. This is not an atomic\nid so you can't you use it as a hash-map index.",
            "type": "var",
            "desc": " Returns the internal id for that binding. This can be used\nfor referencing the binding e.g. for removing. This is not an atomic\nid so you can't you use it as a hash-map index."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the event is no data event or\nthere is no property definition for object and property (source and\ntarget)."
          }
        ]
      }
    },
    "bindAsync": {
      "type": "function",
      "name": "bindAsync",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The bind method delegates the call to the\n{@link qx.data.SingleValueBinding#bind} function. As source, the current\nobject (this) will be used."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourcePropertyChain {String} The property chain which represents\nthe source property.",
            "paramName": "sourcePropertyChain",
            "description": " The property chain which represents\nthe source property.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which the source should\nbe bind to.",
            "paramName": "targetObject",
            "description": " The object which the source should\nbe bind to.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The property name of the target object.",
            "paramName": "targetProperty",
            "description": " The property name of the target object.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "options {Map} A map containing the options. See\n{@link qx.data.SingleValueBinding#bind} for more\ninformation.",
            "paramName": "options",
            "description": " A map containing the options. See\n{@link qx.data.SingleValueBinding#bind} for more\ninformation.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} A promise which is resolved when the initial value\nhas been set on the target.  Note that this does NOT resolve when subsequent\nvalues are returned.  The promise value is the internal id for that binding.\nThe id can be used for referencing the binding e.g. for removing. This is not\nan atomic id so you can't you use it as a hash-map index.",
            "type": "qx.Promise",
            "desc": " A promise which is resolved when the initial value\nhas been set on the target.  Note that this does NOT resolve when subsequent\nvalues are returned.  The promise value is the internal id for that binding.\nThe id can be used for referencing the binding e.g. for removing. This is not\nan atomic id so you can't you use it as a hash-map index."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the event is no data event or\nthere is no property definition for object and property (source and\ntarget)."
          }
        ]
      }
    },
    "removeBinding": {
      "type": "function",
      "name": "removeBinding",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the binding with the given id from the current object. The\nid has to be the id returned by any of the bind functions."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {var} The id of the binding.",
            "paramName": "id",
            "description": " The id of the binding.",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the binding could not be found."
          }
        ]
      }
    },
    "removeRelatedBindings": {
      "type": "function",
      "name": "removeRelatedBindings",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes all bindings between the object and the related one."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "relatedObject {qx.core.Object} The object of which related\nbindings should be removed.",
            "paramName": "relatedObject",
            "description": " The object of which related\nbindings should be removed.",
            "type": "qx.core.Object"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If one of the bindings listed internally can not be\nremoved."
          }
        ]
      }
    },
    "removeAllBindings": {
      "type": "function",
      "name": "removeAllBindings",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding"
    },
    "getBindings": {
      "type": "function",
      "name": "getBindings",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns an array which lists all bindings for the object."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of binding informations. Every binding\ninformation is an array itself containing id, sourceObject, sourceEvent,\ntargetObject and targetProperty in that order.",
            "type": "qx.data.Array",
            "desc": " An array of binding informations. Every binding\ninformation is an array itself containing id, sourceObject, sourceEvent,\ntargetObject and targetProperty in that order."
          }
        ]
      }
    },
    "debug": {
      "type": "function",
      "name": "debug",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Logs a debug message."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "type": "var"
          }
        ]
      }
    },
    "info": {
      "type": "function",
      "name": "info",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Logs an info message."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "type": "var"
          }
        ]
      }
    },
    "warn": {
      "type": "function",
      "name": "warn",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Logs a warning message."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "type": "var"
          }
        ]
      }
    },
    "error": {
      "type": "function",
      "name": "error",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Logs an error message."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "type": "var"
          }
        ]
      }
    },
    "trace": {
      "type": "function",
      "name": "trace",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Logs an error message with the current stack trace"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "type": "var"
          }
        ]
      }
    },
    "__logMessage": {
      "type": "function",
      "name": "__logMessage",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper that calls the appropriate logger function with the current object\nand any number of items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "level {String} The log level of the message",
            "paramName": "level",
            "description": " The log level of the message",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "varargs {arguments} Arguments list to be logged",
            "paramName": "varargs",
            "description": " Arguments list to be logged",
            "type": "arguments"
          }
        ]
      }
    },
    "addListener": {
      "type": "function",
      "name": "addListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add event listener to this object."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\nthe event listener. When not given, the corresponding dispatcher\nusually falls back to a default, which is the target\nby convention. Note this is not a strict requirement, i.e.\ncustom dispatchers can follow a different strategy.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\nthe event listener. When not given, the corresponding dispatcher\nusually falls back to a default, which is the target\nby convention. Note this is not a strict requirement, i.e.\ncustom dispatchers can follow a different strategy.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\ncapturing phase or the bubbling phase of the event. The default is\nto attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\ncapturing phase or the bubbling phase of the event. The default is\nto attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\nusing the {@link #removeListenerById} method.",
            "type": "String",
            "desc": " An opaque id, which can be used to remove the event listener\nusing the {@link #removeListenerById} method."
          }
        ]
      }
    },
    "addListenerOnce": {
      "type": "function",
      "name": "addListenerOnce",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add event listener to this object, which is only called once. After the\nlistener is called the event listener gets removed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object ? window} reference to the 'this' variable inside the callback",
            "paramName": "context",
            "description": " reference to the 'this' variable inside the callback",
            "optional": true,
            "defaultValue": "window",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\ncapturing phase or the bubbling phase of the event. The default is\nto attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\ncapturing phase or the bubbling phase of the event. The default is\nto attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\nusing the {@link #removeListenerById} method.",
            "type": "String",
            "desc": " An opaque id, which can be used to remove the event listener\nusing the {@link #removeListenerById} method."
          }
        ]
      }
    },
    "removeListener": {
      "type": "function",
      "name": "removeListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove event listener from this object"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} reference to the 'this' variable inside the callback",
            "paramName": "self",
            "description": " reference to the 'this' variable inside the callback",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to remove the event listener of\nthe bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to remove the event listener of\nthe bubbling or of the capturing phase.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "Boolean",
            "desc": " Whether the event was removed successfully (has existed)"
          }
        ]
      }
    },
    "removeListenerById": {
      "type": "function",
      "name": "removeListenerById",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes an event listener from an event target by an id returned by\n{@link #addListener}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id returned by {@link #addListener}",
            "paramName": "id",
            "description": " The id returned by {@link #addListener}",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "Boolean",
            "desc": " Whether the event was removed successfully (has existed)"
          }
        ]
      }
    },
    "hasListener": {
      "type": "function",
      "name": "hasListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Check if there are one or more listeners for an event type."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to check for listeners of\nthe bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to check for listeners of\nthe bubbling or of the capturing phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the object has a listener of the given type.",
            "type": "Boolean",
            "desc": " Whether the object has a listener of the given type."
          }
        ]
      }
    },
    "dispatchEvent": {
      "type": "function",
      "name": "dispatchEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Dispatch an event on this object"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Event} event to dispatch",
            "paramName": "evt",
            "description": " event to dispatch",
            "type": "qx.event.type.Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented.",
            "type": "Boolean",
            "desc": " Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireEvent": {
      "type": "function",
      "name": "fireEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates and dispatches an event on this object."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\nthe event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\nthe event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented.",
            "type": "Boolean",
            "desc": " Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireNonBubblingEvent": {
      "type": "function",
      "name": "fireNonBubblingEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Create an event object and dispatch it on this object.\nThe event dispatched with this method does never bubble! Use only if you\nare sure that bubbling is not required."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\nthe event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\nthe event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented.",
            "type": "Boolean",
            "desc": " Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireDataEvent": {
      "type": "function",
      "name": "fireDataEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates and dispatches an non-bubbling data event on this object."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var} User defined data attached to the event object",
            "paramName": "data",
            "description": " User defined data attached to the event object",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "oldData {var?null} The event's old data (optional)",
            "paramName": "oldData",
            "description": " The event's old data (optional)",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\naction prevented. The default action can either be the browser's\ndefault action of a native event (e.g. open the context menu on a\nright click) or the default action of a qooxdoo class (e.g. close\nthe window widget). The default action can be prevented by calling\n{@link qx.event.type.Event#preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\naction prevented. The default action can either be the browser's\ndefault action of a native event (e.g. open the context menu on a\nright click) or the default action of a qooxdoo class (e.g. close\nthe window widget). The default action can be prevented by calling\n{@link qx.event.type.Event#preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented.",
            "type": "Boolean",
            "desc": " Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "set": {
      "type": "function",
      "name": "set",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets multiple properties at once by using a property list or\nsets one property and its value by the first and second argument.\nAs a fallback, if no generated property setter could be found, a\nhandwritten setter will be searched and invoked if available."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "data {Map | String} a map of property values. The key is the name of the property.",
            "paramName": "data",
            "description": " a map of property values. The key is the name of the property.",
            "type": [
              "Map",
              "String"
            ]
          },
          {
            "name": "@param",
            "body": "value {var?} the value, only used when <code>data</code> is a string.",
            "paramName": "value",
            "description": " the value, only used when <code>data</code> is a string.",
            "optional": true,
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Returns this instance if <code>data</code> is a map\nor a non-generated setter is called; otherwise returns <code>value</code>.",
            "type": "qx.core.Object",
            "desc": " Returns this instance if <code>data</code> is a map\nor a non-generated setter is called; otherwise returns <code>value</code>."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist"
          }
        ]
      }
    },
    "get": {
      "type": "function",
      "name": "get",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the value of the given property. If no generated getter could be\nfound, a fallback tries to access a handwritten getter."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The value of the value",
            "type": "var",
            "desc": " The value of the value"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist"
          }
        ]
      }
    },
    "reset": {
      "type": "function",
      "name": "reset",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the value of the given property. If no generated resetter could be\nfound, a handwritten resetter will be invoked, if available."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "String"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist"
          }
        ]
      }
    },
    "isPropertyInitialized": {
      "type": "function",
      "name": "isPropertyInitialized",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Checks if the property is initialized, i.e. has a defined init value or\nhas got a value by a setter method."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property",
            "paramName": "prop",
            "description": " Name of the property",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the property is initialized",
            "type": "Boolean",
            "desc": " If the property is initialized"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the property defined does not exist"
          }
        ]
      }
    },
    "assert": {
      "type": "function",
      "name": "assert",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the condition evaluates to <code>true</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {var} Condition to check for. Must evaluate to\n<code>true</code>.",
            "paramName": "condition",
            "description": " Condition to check for. Must evaluate to\n<code>true</code>.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "fail": {
      "type": "function",
      "name": "fail",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Raise an {@link AssertionError}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "compact {Boolean} Show less verbose message. Default: false.",
            "paramName": "compact",
            "description": " Show less verbose message. Default: false.",
            "type": "Boolean"
          }
        ]
      }
    },
    "assertTrue": {
      "type": "function",
      "name": "assertTrue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is <code>true</code> (Identity check)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n<code>true</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n<code>true</code>.",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertFalse": {
      "type": "function",
      "name": "assertFalse",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is <code>false</code> (Identity check)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n<code>false</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n<code>false</code>.",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertEquals": {
      "type": "function",
      "name": "assertEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both values are equal. (Uses the equality operator\n<code>==</code>.)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNotEquals": {
      "type": "function",
      "name": "assertNotEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both values are not equal. (Uses the not equality operator\n<code>!=</code>.)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertEqualsFloat": {
      "type": "function",
      "name": "assertEqualsFloat",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both float values are equal. This might be needed because\nof the natural floating point inaccuracy of computers."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNotEqualsFloat": {
      "type": "function",
      "name": "assertNotEqualsFloat",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both float values are not equal. This might be needed\nbecause of the natural floating point inaccuracy of computers."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertIdentical": {
      "type": "function",
      "name": "assertIdentical",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both values are identical. (Uses the identity operator\n<code>===</code>.)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNotIdentical": {
      "type": "function",
      "name": "assertNotIdentical",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both values are not identical. (Uses the not identity operator\n<code>!==</code>.)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNotUndefined": {
      "type": "function",
      "name": "assertNotUndefined",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is not <code>undefined</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertUndefined": {
      "type": "function",
      "name": "assertUndefined",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is <code>undefined</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNotNull": {
      "type": "function",
      "name": "assertNotNull",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is not <code>null</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNull": {
      "type": "function",
      "name": "assertNull",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is <code>null</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertJsonEquals": {
      "type": "function",
      "name": "assertJsonEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the first two arguments are equal, when serialized into\nJSON."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} The expected value",
            "paramName": "expected",
            "description": " The expected value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} The found value",
            "paramName": "found",
            "description": " The found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertMatch": {
      "type": "function",
      "name": "assertMatch",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the given string matches the regular expression"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} String, which should match the regular expression",
            "paramName": "str",
            "description": " String, which should match the regular expression",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "re {RegExp} Regular expression to match",
            "paramName": "re",
            "description": " Regular expression to match",
            "type": "RegExp"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertArgumentsCount": {
      "type": "function",
      "name": "assertArgumentsCount",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the number of arguments is within the given range"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} The <code>arguments<code> variable of a function",
            "paramName": "args",
            "description": " The <code>arguments<code> variable of a function",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "minCount {Integer} Minimal number of arguments",
            "paramName": "minCount",
            "description": " Minimal number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxCount {Integer} Maximum number of arguments",
            "paramName": "maxCount",
            "description": " Maximum number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertEventFired": {
      "type": "function",
      "name": "assertEventFired",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that an event is fired."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\nfires the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\nfires the event.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "listener {Function?null} The function which will be invoked in the\nlistener. The function has one parameter called e which is the event.",
            "paramName": "listener",
            "description": " The function which will be invoked in the\nlistener. The function has one parameter called e which is the event.",
            "optional": true,
            "defaultValue": "null",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "msg {String?\"\"} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "optional": true,
            "defaultValue": "\"\"",
            "type": "String"
          }
        ]
      }
    },
    "assertEventNotFired": {
      "type": "function",
      "name": "assertEventNotFired",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that an event is not fired."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\nshould not fire the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\nshould not fire the event.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertException": {
      "type": "function",
      "name": "assertException",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Asserts that the callback raises a matching exception."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} function to check",
            "paramName": "callback",
            "description": " function to check",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "exception {Error?Error} Expected constructor of the exception.\nThe assertion fails if the raised exception is not an instance of the\nparameter.",
            "paramName": "exception",
            "description": " Expected constructor of the exception.\nThe assertion fails if the raised exception is not an instance of the\nparameter.",
            "optional": true,
            "defaultValue": "Error",
            "type": "Error"
          },
          {
            "name": "@param",
            "body": "re {String|RegExp} The assertion fails if the error message does\nnot match this parameter",
            "paramName": "re",
            "description": " The assertion fails if the error message does\nnot match this parameter",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertInArray": {
      "type": "function",
      "name": "assertInArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an item in the given array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of valid values",
            "paramName": "array",
            "description": " List of valid values",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNotInArray": {
      "type": "function",
      "name": "assertNotInArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is NOT an item in the given array"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of values",
            "paramName": "array",
            "description": " List of values",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails",
            "type": "String"
          }
        ]
      }
    },
    "assertArrayEquals": {
      "type": "function",
      "name": "assertArrayEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both array have identical array items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Array} The expected array",
            "paramName": "expected",
            "description": " The expected array",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "found {Array} The found array",
            "paramName": "found",
            "description": " The found array",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertKeyInMap": {
      "type": "function",
      "name": "assertKeyInMap",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a key in the given map."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "map {Map} Map, where the keys represent the valid values",
            "paramName": "map",
            "description": " Map, where the keys represent the valid values",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertFunction": {
      "type": "function",
      "name": "assertFunction",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a function."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertString": {
      "type": "function",
      "name": "assertString",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a string."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertBoolean": {
      "type": "function",
      "name": "assertBoolean",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a boolean."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNumber": {
      "type": "function",
      "name": "assertNumber",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a number."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertPositiveNumber": {
      "type": "function",
      "name": "assertPositiveNumber",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a number >= 0."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertInteger": {
      "type": "function",
      "name": "assertInteger",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an integer."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertPositiveInteger": {
      "type": "function",
      "name": "assertPositiveInteger",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an integer >= 0."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertInRange": {
      "type": "function",
      "name": "assertInRange",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is inside the given range."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "min {Number} lower bound",
            "paramName": "min",
            "description": " lower bound",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "max {Number} upper bound",
            "paramName": "max",
            "description": " upper bound",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertObject": {
      "type": "function",
      "name": "assertObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an object."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertArray": {
      "type": "function",
      "name": "assertArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertMap": {
      "type": "function",
      "name": "assertMap",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a map either created using <code>new Object</code>\nor by using the object literal notation <code>{ ... }</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertRegExp": {
      "type": "function",
      "name": "assertRegExp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a regular expression."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertType": {
      "type": "function",
      "name": "assertType",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value has the given type using the <code>typeof</code>\noperator. Because the type is not always what it is supposed to be it is\nbetter to use more explicit checks like {@link #assertString} or\n{@link #assertArray}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} expected type of the value",
            "paramName": "type",
            "description": " expected type of the value",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertInstance": {
      "type": "function",
      "name": "assertInstance",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an instance of the given class."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "clazz {Class} The value must be an instance of this class",
            "paramName": "clazz",
            "description": " The value must be an instance of this class",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertInterface": {
      "type": "function",
      "name": "assertInterface",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value implements the given interface."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "iface {Class} The value must implement this interface",
            "paramName": "iface",
            "description": " The value must implement this interface",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertCssColor": {
      "type": "function",
      "name": "assertCssColor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value represents the given CSS color value. This method\nparses the color strings and compares the RGB values. It is able to\nparse values supported by {@link qx.util.ColorUtil#stringToRgb}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {String} The expected color",
            "paramName": "expected",
            "description": " The expected color",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {String} The value to check",
            "paramName": "value",
            "description": " The value to check",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertElement": {
      "type": "function",
      "name": "assertElement",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a DOM element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertQxObject": {
      "type": "function",
      "name": "assertQxObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an instance of {@link qx.core.Object}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertQxWidget": {
      "type": "function",
      "name": "assertQxWidget",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an instance of {@link qx.ui.core.Widget}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "getMinWidth": {
      "type": "function",
      "name": "getMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMinWidth": {
      "type": "function",
      "name": "setMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMinWidth": {
      "type": "function",
      "name": "resetMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getWidth": {
      "type": "function",
      "name": "getWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setWidth": {
      "type": "function",
      "name": "setWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetWidth": {
      "type": "function",
      "name": "resetWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMaxWidth": {
      "type": "function",
      "name": "getMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMaxWidth": {
      "type": "function",
      "name": "setMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMaxWidth": {
      "type": "function",
      "name": "resetMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMinHeight": {
      "type": "function",
      "name": "getMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMinHeight": {
      "type": "function",
      "name": "setMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMinHeight": {
      "type": "function",
      "name": "resetMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getHeight": {
      "type": "function",
      "name": "getHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setHeight": {
      "type": "function",
      "name": "setHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetHeight": {
      "type": "function",
      "name": "resetHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMaxHeight": {
      "type": "function",
      "name": "getMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMaxHeight": {
      "type": "function",
      "name": "setMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMaxHeight": {
      "type": "function",
      "name": "resetMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowGrowX": {
      "type": "function",
      "name": "getAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isAllowGrowX": {
      "type": "function",
      "name": "isAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowGrowX": {
      "type": "function",
      "name": "setAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowGrowX": {
      "type": "function",
      "name": "resetAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowShrinkX": {
      "type": "function",
      "name": "getAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isAllowShrinkX": {
      "type": "function",
      "name": "isAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowShrinkX": {
      "type": "function",
      "name": "setAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowShrinkX": {
      "type": "function",
      "name": "resetAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowGrowY": {
      "type": "function",
      "name": "getAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isAllowGrowY": {
      "type": "function",
      "name": "isAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowGrowY": {
      "type": "function",
      "name": "setAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowGrowY": {
      "type": "function",
      "name": "resetAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowShrinkY": {
      "type": "function",
      "name": "getAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isAllowShrinkY": {
      "type": "function",
      "name": "isAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowShrinkY": {
      "type": "function",
      "name": "setAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowShrinkY": {
      "type": "function",
      "name": "resetAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowStretchX": {
      "type": "function",
      "name": "getAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowStretchX": {
      "type": "function",
      "name": "setAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowStretchX": {
      "type": "function",
      "name": "resetAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowStretchY": {
      "type": "function",
      "name": "getAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowStretchY": {
      "type": "function",
      "name": "setAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowStretchY": {
      "type": "function",
      "name": "resetAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMarginTop": {
      "type": "function",
      "name": "getMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMarginTop": {
      "type": "function",
      "name": "setMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMarginTop": {
      "type": "function",
      "name": "resetMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMarginRight": {
      "type": "function",
      "name": "getMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMarginRight": {
      "type": "function",
      "name": "setMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMarginRight": {
      "type": "function",
      "name": "resetMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMarginBottom": {
      "type": "function",
      "name": "getMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMarginBottom": {
      "type": "function",
      "name": "setMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMarginBottom": {
      "type": "function",
      "name": "resetMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMarginLeft": {
      "type": "function",
      "name": "getMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMarginLeft": {
      "type": "function",
      "name": "setMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMarginLeft": {
      "type": "function",
      "name": "resetMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMargin": {
      "type": "function",
      "name": "getMargin",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMargin": {
      "type": "function",
      "name": "setMargin",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMargin": {
      "type": "function",
      "name": "resetMargin",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAlignX": {
      "type": "function",
      "name": "getAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAlignX": {
      "type": "function",
      "name": "setAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAlignX": {
      "type": "function",
      "name": "resetAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAlignY": {
      "type": "function",
      "name": "getAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAlignY": {
      "type": "function",
      "name": "setAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAlignY": {
      "type": "function",
      "name": "resetAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getPaddingTop": {
      "type": "function",
      "name": "getPaddingTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPaddingTop": {
      "type": "function",
      "name": "setPaddingTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPaddingTop": {
      "type": "function",
      "name": "resetPaddingTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getPaddingRight": {
      "type": "function",
      "name": "getPaddingRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPaddingRight": {
      "type": "function",
      "name": "setPaddingRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPaddingRight": {
      "type": "function",
      "name": "resetPaddingRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getPaddingBottom": {
      "type": "function",
      "name": "getPaddingBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPaddingBottom": {
      "type": "function",
      "name": "setPaddingBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPaddingBottom": {
      "type": "function",
      "name": "resetPaddingBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getPaddingLeft": {
      "type": "function",
      "name": "getPaddingLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPaddingLeft": {
      "type": "function",
      "name": "setPaddingLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPaddingLeft": {
      "type": "function",
      "name": "resetPaddingLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getPadding": {
      "type": "function",
      "name": "getPadding",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPadding": {
      "type": "function",
      "name": "setPadding",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPadding": {
      "type": "function",
      "name": "resetPadding",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getZIndex": {
      "type": "function",
      "name": "getZIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setZIndex": {
      "type": "function",
      "name": "setZIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetZIndex": {
      "type": "function",
      "name": "resetZIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getDecorator": {
      "type": "function",
      "name": "getDecorator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Decorator",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDecorator": {
      "type": "function",
      "name": "setDecorator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Decorator",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDecorator": {
      "type": "function",
      "name": "resetDecorator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getBackgroundColor": {
      "type": "function",
      "name": "getBackgroundColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Color",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setBackgroundColor": {
      "type": "function",
      "name": "setBackgroundColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Color",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetBackgroundColor": {
      "type": "function",
      "name": "resetBackgroundColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getTextColor": {
      "type": "function",
      "name": "getTextColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Color",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setTextColor": {
      "type": "function",
      "name": "setTextColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Color",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetTextColor": {
      "type": "function",
      "name": "resetTextColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getFont": {
      "type": "function",
      "name": "getFont",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Font",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setFont": {
      "type": "function",
      "name": "setFont",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Font",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetFont": {
      "type": "function",
      "name": "resetFont",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOpacity": {
      "type": "function",
      "name": "getOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOpacity": {
      "type": "function",
      "name": "setOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOpacity": {
      "type": "function",
      "name": "resetOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getCursor": {
      "type": "function",
      "name": "getCursor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setCursor": {
      "type": "function",
      "name": "setCursor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetCursor": {
      "type": "function",
      "name": "resetCursor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getToolTip": {
      "type": "function",
      "name": "getToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.tooltip.ToolTip",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setToolTip": {
      "type": "function",
      "name": "setToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.tooltip.ToolTip",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetToolTip": {
      "type": "function",
      "name": "resetToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getToolTipText": {
      "type": "function",
      "name": "getToolTipText",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setToolTipText": {
      "type": "function",
      "name": "setToolTipText",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetToolTipText": {
      "type": "function",
      "name": "resetToolTipText",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getToolTipIcon": {
      "type": "function",
      "name": "getToolTipIcon",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setToolTipIcon": {
      "type": "function",
      "name": "setToolTipIcon",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetToolTipIcon": {
      "type": "function",
      "name": "resetToolTipIcon",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getBlockToolTip": {
      "type": "function",
      "name": "getBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isBlockToolTip": {
      "type": "function",
      "name": "isBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setBlockToolTip": {
      "type": "function",
      "name": "setBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetBlockToolTip": {
      "type": "function",
      "name": "resetBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getShowToolTipWhenDisabled": {
      "type": "function",
      "name": "getShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isShowToolTipWhenDisabled": {
      "type": "function",
      "name": "isShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setShowToolTipWhenDisabled": {
      "type": "function",
      "name": "setShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetShowToolTipWhenDisabled": {
      "type": "function",
      "name": "resetShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getVisibility": {
      "type": "function",
      "name": "getVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setVisibility": {
      "type": "function",
      "name": "setVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetVisibility": {
      "type": "function",
      "name": "resetVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getEnabled": {
      "type": "function",
      "name": "getEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isEnabled": {
      "type": "function",
      "name": "isEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setEnabled": {
      "type": "function",
      "name": "setEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetEnabled": {
      "type": "function",
      "name": "resetEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAnonymous": {
      "type": "function",
      "name": "getAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isAnonymous": {
      "type": "function",
      "name": "isAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAnonymous": {
      "type": "function",
      "name": "setAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAnonymous": {
      "type": "function",
      "name": "resetAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getTabIndex": {
      "type": "function",
      "name": "getTabIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setTabIndex": {
      "type": "function",
      "name": "setTabIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetTabIndex": {
      "type": "function",
      "name": "resetTabIndex",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getFocusable": {
      "type": "function",
      "name": "getFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isFocusable": {
      "type": "function",
      "name": "isFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setFocusable": {
      "type": "function",
      "name": "setFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetFocusable": {
      "type": "function",
      "name": "resetFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getKeepFocus": {
      "type": "function",
      "name": "getKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isKeepFocus": {
      "type": "function",
      "name": "isKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setKeepFocus": {
      "type": "function",
      "name": "setKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetKeepFocus": {
      "type": "function",
      "name": "resetKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getKeepActive": {
      "type": "function",
      "name": "getKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isKeepActive": {
      "type": "function",
      "name": "isKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setKeepActive": {
      "type": "function",
      "name": "setKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetKeepActive": {
      "type": "function",
      "name": "resetKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getDraggable": {
      "type": "function",
      "name": "getDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isDraggable": {
      "type": "function",
      "name": "isDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDraggable": {
      "type": "function",
      "name": "setDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDraggable": {
      "type": "function",
      "name": "resetDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getDroppable": {
      "type": "function",
      "name": "getDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isDroppable": {
      "type": "function",
      "name": "isDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDroppable": {
      "type": "function",
      "name": "setDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDroppable": {
      "type": "function",
      "name": "resetDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getSelectable": {
      "type": "function",
      "name": "getSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isSelectable": {
      "type": "function",
      "name": "isSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSelectable": {
      "type": "function",
      "name": "setSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetSelectable": {
      "type": "function",
      "name": "resetSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getContextMenu": {
      "type": "function",
      "name": "getContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.menu.Menu",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setContextMenu": {
      "type": "function",
      "name": "setContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.menu.Menu",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetContextMenu": {
      "type": "function",
      "name": "resetContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getNativeContextMenu": {
      "type": "function",
      "name": "getNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isNativeContextMenu": {
      "type": "function",
      "name": "isNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setNativeContextMenu": {
      "type": "function",
      "name": "setNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetNativeContextMenu": {
      "type": "function",
      "name": "resetNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAppearance": {
      "type": "function",
      "name": "getAppearance",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAppearance": {
      "type": "function",
      "name": "setAppearance",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAppearance": {
      "type": "function",
      "name": "resetAppearance",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 3884,
        "column": 2
      },
      "end": {
        "line": 3944,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": [
    "qx.ui.container.Composite",
    "qx.ui.basic.Label",
    "qx.ui.core.scroll.AbstractScrollArea",
    "qx.ui.tabview.TabView",
    "qx.ui.root.Abstract",
    "qx.ui.form.AbstractSelectBox",
    "qx.ui.basic.Atom",
    "qx.ui.basic.Image",
    "qx.ui.core.scroll.ScrollPane",
    "qx.ui.container.SlideBar",
    "qx.ui.container.Stack",
    "qx.ui.core.scroll.ScrollBar",
    "qx.ui.table.Table",
    "qx.ui.toolbar.ToolBar",
    "qx.ui.toolbar.Part",
    "qx.ui.menu.Menu",
    "qx.ui.window.Desktop",
    "qx.ui.window.Window",
    "qx.ui.groupbox.GroupBox",
    "qx.ui.control.ColorSelector",
    "qx.ui.control.DateChooser",
    "qx.ui.embed.Flash",
    "qx.ui.embed.Canvas",
    "qx.ui.embed.Html",
    "qx.ui.splitpane.Pane",
    "qx.ui.form.RadioButtonGroup",
    "qx.ui.table.pane.Pane",
    "qx.ui.table.pane.Header",
    "qx.ui.table.pane.Scroller",
    "qx.ui.form.DateField",
    "qx.ui.form.SplitButton",
    "qx.ui.form.Spinner",
    "qx.ui.form.Slider",
    "qx.ui.toolbar.Separator",
    "qx.ui.menu.Separator",
    "qx.ui.menu.AbstractButton",
    "qx.ui.splitpane.Slider",
    "qx.ui.splitpane.Splitter",
    "qx.ui.embed.AbstractIframe",
    "qx.ui.tree.core.AbstractItem",
    "qx.ui.virtual.core.Pane",
    "qx.ui.form.AbstractField",
    "qx.ui.form.core.AbstractVirtualBox",
    "qx.ui.form.renderer.AbstractRenderer",
    "qx.ui.virtual.layer.Abstract"
  ]
}