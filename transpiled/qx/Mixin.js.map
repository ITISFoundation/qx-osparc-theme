{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/qx-osparc-theme/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/Mixin.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "name",
    "config",
    "include",
    "getClass",
    "__validateConfig",
    "mixin",
    "setDisplayNames",
    "key",
    "Function",
    "$$mixin",
    "construct",
    "$$constructor",
    "setDisplayName",
    "$$includes",
    "properties",
    "$$properties",
    "members",
    "$$members",
    "events",
    "$$events",
    "destruct",
    "$$destructor",
    "$$type",
    "toString",
    "genericToString",
    "basename",
    "createNamespace",
    "$$registry",
    "checkCompatibility",
    "mixins",
    "list",
    "flatten",
    "len",
    "length",
    "i",
    "Error",
    "isCompatible",
    "clazz",
    "util",
    "OOUtil",
    "getMixins",
    "push",
    "Mixin",
    "getByName",
    "isDefined",
    "undefined",
    "getTotalNumber",
    "objectGetLength",
    "concat",
    "l",
    "apply",
    "__allowedKeys",
    "allowed",
    "maps",
    "indexOf",
    "classname",
    "a"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * This class is used to define mixins (similar to mixins in Ruby).\n *\n * Mixins are collections of code and variables, which can be merged into\n * other classes. They are similar to classes but don't support inheritance.\n *\n * See the description of the {@link #define} method how a mixin is defined.\n *\n * @require(qx.lang.normalize.Array)\n */\nqx.Bootstrap.define(\"qx.Mixin\",\n{\n  statics :\n  {\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Define a new mixin.\n     *\n     * Example:\n     * <pre class='javascript'>\n     * qx.Mixin.define(\"name\",\n     * {\n     *   include: [SuperMixins],\n     *\n     *   properties: {\n     *     tabIndex: {type: \"number\", init: -1}\n     *   },\n     *\n     *   members:\n     *   {\n     *     prop1: \"foo\",\n     *     meth1: function() {},\n     *     meth2: function() {}\n     *   }\n     * });\n     * </pre>\n     *\n     * @param name {String} name of the mixin\n     * @param config {Map ? null} Mixin definition structure. The configuration map has the following keys:\n     *   <table>\n     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n     *     <tr><th>construct</th><td>Function</td><td>An optional mixin constructor. It is called on instantiation each\n     *         class including this mixin. The constructor takes no parameters.</td></tr>\n     *     <tr><th>destruct</th><td>Function</td><td>An optional mixin destructor.</td></tr>\n     *     <tr><th>include</th><td>Mixin[]</td><td>Array of mixins, which will be merged into the mixin.</td></tr>\n     *     <tr><th>statics</th><td>Map</td><td>\n     *         Map of statics of the mixin. The statics will not get copied into the target class. They remain\n     *         accessible from the mixin. This is the same behaviour as statics in interfaces ({@link qx.Interface#define}).\n     *     </td></tr>\n     *     <tr><th>members</th><td>Map</td><td>Map of members of the mixin.</td></tr>\n     *     <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n     *           {@link qx.core.Property}.</td></tr>\n     *     <tr><th>events</th><td>Map</td><td>\n     *         Map of events the mixin fires. The keys are the names of the events and the values are\n     *         corresponding event type classes.\n     *     </td></tr>\n     *   </table>\n     *\n     * @return {qx.Mixin} The configured mixin\n     */\n    define : function(name, config)\n    {\n      if (config)\n      {\n        // Normalize include\n        if (config.include && !(qx.Bootstrap.getClass(config.include) === \"Array\")) {\n          config.include = [config.include];\n        }\n\n        // Validate incoming data\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.__validateConfig(name, config);\n        }\n\n        // Create Interface from statics\n        var mixin = config.statics ? config.statics : {};\n        qx.Bootstrap.setDisplayNames(mixin, name);\n\n        for(var key in mixin) {\n          if (mixin[key] instanceof Function)\n          {\n            mixin[key].$$mixin = mixin;\n          }\n        }\n\n        // Attach configuration\n        if (config.construct)\n        {\n          mixin.$$constructor = config.construct;\n          qx.Bootstrap.setDisplayName(config.construct, name, \"constructor\");\n        }\n\n        if (config.include) {\n          mixin.$$includes = config.include;\n        }\n\n        if (config.properties) {\n          mixin.$$properties = config.properties;\n        }\n\n        if (config.members)\n        {\n          mixin.$$members = config.members;\n          qx.Bootstrap.setDisplayNames(config.members, name + \".prototype\");\n        }\n\n        for(var key in mixin.$$members)\n        {\n          if (mixin.$$members[key] instanceof Function) {\n            mixin.$$members[key].$$mixin = mixin;\n          }\n        }\n\n        if (config.events) {\n          mixin.$$events = config.events;\n        }\n\n        if (config.destruct)\n        {\n          mixin.$$destructor = config.destruct;\n          qx.Bootstrap.setDisplayName(config.destruct, name, \"destruct\");\n        }\n      }\n      else\n      {\n        var mixin = {};\n      }\n\n      // Add basics\n      mixin.$$type = \"Mixin\";\n      mixin.name = name;\n\n      // Attach toString\n      mixin.toString = this.genericToString;\n\n      // Assign to namespace\n      mixin.basename = qx.Bootstrap.createNamespace(name, mixin);\n\n      // Store class reference in global mixin registry\n      this.$$registry[name] = mixin;\n\n      // Return final mixin\n      return mixin;\n    },\n\n\n    /**\n     * Check compatibility between mixins (including their includes)\n     *\n     * @param mixins {Mixin[]} an array of mixins\n     * @throws {Error} when there is a conflict between the mixins\n     * @return {Boolean} <code>true</code> if the mixin passed the compatibility check\n     */\n    checkCompatibility : function(mixins)\n    {\n      var list = this.flatten(mixins);\n      var len = list.length;\n\n      if (len < 2) {\n        return true;\n      }\n\n      var properties = {};\n      var members = {};\n      var events = {};\n      var mixin;\n\n      for (var i=0; i<len; i++)\n      {\n        mixin = list[i];\n\n        for (var key in mixin.events)\n        {\n          if(events[key]) {\n            throw new Error('Conflict between mixin \"' + mixin.name + '\" and \"' + events[key] + '\" in member \"' + key + '\"!');\n          }\n\n          events[key] = mixin.name;\n        }\n\n        for (var key in mixin.properties)\n        {\n          if(properties[key]) {\n            throw new Error('Conflict between mixin \"' + mixin.name + '\" and \"' + properties[key] + '\" in property \"' + key + '\"!');\n          }\n\n          properties[key] = mixin.name;\n        }\n\n        for (var key in mixin.members)\n        {\n          if(members[key]) {\n            throw new Error('Conflict between mixin \"' + mixin.name + '\" and \"' + members[key] + '\" in member \"' + key + '\"!');\n          }\n\n          members[key] = mixin.name;\n        }\n      }\n\n      return true;\n    },\n\n\n    /**\n     * Checks if a class is compatible to the given mixin (no conflicts)\n     *\n     * @param mixin {Mixin} mixin to check\n     * @param clazz {Class} class to check\n     * @throws {Error} when the given mixin is incompatible to the class\n     * @return {Boolean} true if the mixin is compatible to the given class\n     */\n    isCompatible : function(mixin, clazz)\n    {\n      var list = qx.util.OOUtil.getMixins(clazz);\n      list.push(mixin);\n      return qx.Mixin.checkCompatibility(list);\n    },\n\n\n    /**\n     * Returns a mixin by name\n     *\n     * @param name {String} class name to resolve\n     * @return {Class} the class\n     */\n    getByName : function(name) {\n      return this.$$registry[name];\n    },\n\n\n    /**\n     * Determine if mixin exists\n     *\n     * @param name {String} mixin name to check\n     * @return {Boolean} true if mixin exists\n     */\n    isDefined : function(name) {\n      return this.getByName(name) !== undefined;\n    },\n\n\n    /**\n     * Determine the number of mixins which are defined\n     *\n     * @return {Number} the number of mixins\n     */\n    getTotalNumber : function() {\n      return qx.Bootstrap.objectGetLength(this.$$registry);\n    },\n\n\n    /**\n     * Generates a list of all mixins given plus all the\n     * mixins these includes plus... (deep)\n     *\n     * @param mixins {Mixin[] ? []} List of mixins\n     * @return {Array} List of all mixins\n     */\n    flatten : function(mixins)\n    {\n      if (!mixins) {\n        return [];\n      }\n\n      // we need to create a copy and not to modify the existing array\n      var list = mixins.concat();\n\n      for (var i=0, l=mixins.length; i<l; i++)\n      {\n        if (mixins[i].$$includes) {\n          list.push.apply(list, this.flatten(mixins[i].$$includes));\n        }\n      }\n\n      return list;\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE/INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method will be attached to all mixins to return\n     * a nice identifier for them.\n     *\n     * @internal\n     * @return {String} The mixin identifier\n     */\n    genericToString : function() {\n      return \"[Mixin \" + this.name + \"]\";\n    },\n\n\n    /** Registers all defined mixins */\n    $$registry : {},\n\n\n    /** @type {Map} allowed keys in mixin definition */\n    __allowedKeys : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\":\n      {\n        \"include\"    : \"object\",   // Mixin | Mixin[]\n        \"statics\"    : \"object\",   // Map\n        \"members\"    : \"object\",   // Map\n        \"properties\" : \"object\",   // Map\n        \"events\"     : \"object\",   // Map\n        \"destruct\"   : \"function\", // Function\n        \"construct\"  : \"function\"  // Function\n      },\n\n      \"default\" : null\n    }),\n\n\n    /**\n     * Validates incoming configuration and checks keys and values\n     *\n     * @signature function(name, config)\n     * @param name {String} The name of the class\n     * @param config {Map} Configuration map\n     */\n    __validateConfig : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\": function(name, config)\n      {\n        // Validate keys\n        var allowed = this.__allowedKeys;\n        for (var key in config)\n        {\n          if (!allowed[key]) {\n            throw new Error('The configuration key \"' + key + '\" in mixin \"' + name + '\" is not allowed!');\n          }\n\n          if (config[key] == null) {\n            throw new Error('Invalid key \"' + key + '\" in mixin \"' + name + '\"! The value is undefined/null!');\n          }\n\n          if (allowed[key] !== null && typeof config[key] !== allowed[key]) {\n            throw new Error('Invalid type of key \"' + key + '\" in mixin \"' + name + '\"! The type of the key must be \"' + allowed[key] + '\"!');\n          }\n        }\n\n        // Validate maps\n        var maps = [ \"statics\", \"members\", \"properties\", \"events\" ];\n        for (var i=0, l=maps.length; i<l; i++)\n        {\n          var key = maps[i];\n\n          if (config[key] !== undefined &&\n              ([\n                 \"Array\",\n                 \"RegExp\",\n                 \"Date\"\n               ].indexOf(qx.Bootstrap.getClass(config[key])) != -1 ||\n               config[key].classname !== undefined)) {\n\n            throw new Error('Invalid key \"' + key + '\" in mixin \"' + name + '\"! The value needs to be a map!');\n          }\n        }\n\n        // Validate includes\n        if (config.include)\n        {\n          for (var i=0, a=config.include, l=a.length; i<l; i++)\n          {\n            if (a[i] == null) {\n              throw new Error(\"Includes of mixins must be mixins. The include number '\" + (i+1) + \"' in mixin '\" + name + \"'is undefined/null!\");\n            }\n\n            if (a[i].$$type !== \"Mixin\") {\n              throw new Error(\"Includes of mixins must be mixins. The include number '\" + (i+1) + \"' in mixin '\" + name + \"'is not a mixin!\");\n            }\n          }\n\n          this.checkCompatibility(config.include);\n        }\n      },\n\n      \"default\" : function(name, config) {}\n    })\n  }\n});\n"
  ]
}