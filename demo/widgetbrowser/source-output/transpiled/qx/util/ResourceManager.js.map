{
  "version": 3,
  "sources": [
    "ResourceManager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "statics",
    "__registry",
    "$$resources",
    "__urlPrefix",
    "members",
    "getIds",
    "pathfragment",
    "registry",
    "ids",
    "id",
    "hasOwnProperty",
    "indexOf",
    "push",
    "has",
    "getData",
    "getImageWidth",
    "entry",
    "getImageHeight",
    "getImageFormat",
    "startsWith",
    "getCombinedFormat",
    "clippedtype",
    "isclipped",
    "length",
    "constructor",
    "combId",
    "combImg",
    "toUri",
    "lib",
    "urlPrefix",
    "Environment",
    "get",
    "util",
    "LibraryManager",
    "getInstance",
    "toDataUri",
    "resid",
    "resentry",
    "combined",
    "uri",
    "resstruct",
    "isFontUri",
    "defer",
    "$$libraries",
    "resourceUri",
    "href",
    "baseElements",
    "document",
    "getElementsByTagName",
    "match",
    "window",
    "location",
    "protocol",
    "host",
    "url",
    "URL",
    "substring",
    "lastIndexOf",
    "index",
    "ResourceManager"
  ],
  "mappings": "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",
  "file": "ResourceManager.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Contains information about images (size, format, clipping, ...) and\n * other resources like CSS files, local data, ...\n */\nqx.Class.define(\"qx.util.ResourceManager\",\n{\n  extend  : qx.core.Object,\n  type    : \"singleton\",\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Map} the shared image registry */\n    __registry : qx.$$resources || {},\n\n    /** @type {Map} prefix per library used in HTTPS mode for IE */\n    __urlPrefix : {}\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Get all known resource IDs.\n     *\n     * @param pathfragment{String|null|undefined} an optional path fragment to check against with id.indexOf(pathfragment)\n     * @return {Array|null} an array containing the IDs or null if the registry is not initialized\n     */\n    getIds : function(pathfragment) {\n      var registry = this.self(arguments).__registry;\n      if(!registry) {\n        return null;\n      }\n \n      var ids = [];\n      for (var id in registry) {\n        if (registry.hasOwnProperty(id)) {\n          if(pathfragment && id.indexOf(pathfragment) == -1) {\n            continue;\n          }\n          ids.push(id);\n        }\n      }\n \n      return ids;\n    },\n\n    /**\n     * Whether the registry has information about the given resource.\n     *\n     * @param id {String} The resource to get the information for\n     * @return {Boolean} <code>true</code> when the resource is known.\n     */\n    has : function(id) {\n      return !!this.self(arguments).__registry[id];\n    },\n\n\n    /**\n     * Get information about an resource.\n     *\n     * @param id {String} The resource to get the information for\n     * @return {Array} Registered data or <code>null</code>\n     */\n    getData : function(id) {\n      return this.self(arguments).__registry[id] || null;\n    },\n\n\n    /**\n     * Returns the width of the given resource ID,\n     * when it is not a known image <code>0</code> is\n     * returned.\n     *\n     * @param id {String} Resource identifier\n     * @return {Integer} The image width, maybe <code>null</code> when the width is unknown\n     */\n    getImageWidth : function(id)\n    {\n      var entry = this.self(arguments).__registry[id];\n      return entry ? entry[0] : null;\n    },\n\n\n    /**\n     * Returns the height of the given resource ID,\n     * when it is not a known image <code>0</code> is\n     * returned.\n     *\n     * @param id {String} Resource identifier\n     * @return {Integer} The image height, maybe <code>null</code> when the height is unknown\n     */\n    getImageHeight : function(id)\n    {\n      var entry = this.self(arguments).__registry[id];\n      return entry ? entry[1] : null;\n    },\n\n\n    /**\n     * Returns the format of the given resource ID,\n     * when it is not a known image <code>null</code>\n     * is returned.\n     *\n     * @param id {String} Resource identifier\n     * @return {String} File format of the image\n     */\n    getImageFormat : function(id)\n    {\n      if (id && id.startsWith(\"@\")) {\n        return \"font\";\n      }\n\n      var entry = this.self(arguments).__registry[id];\n      return entry ? entry[2] : null;\n    },\n\n    /**\n     * Returns the format of the combined image (png, gif, ...), if the given\n     * resource identifier is an image contained in one, or the empty string\n     * otherwise.\n     *\n     * @param id {String} Resource identifier\n     * @return {String} The type of the combined image containing id\n     */\n    getCombinedFormat : function(id)\n    {\n      var clippedtype = \"\";\n      var entry = this.self(arguments).__registry[id];\n      var isclipped = entry && entry.length > 4 && typeof(entry[4]) == \"string\"\n        && this.constructor.__registry[entry[4]];\n      if (isclipped){\n        var combId  = entry[4];\n        var combImg = this.constructor.__registry[combId];\n        clippedtype = combImg[2];\n      }\n      return clippedtype;\n    },\n\n\n    /**\n     * Converts the given resource ID to a full qualified URI\n     *\n     * @param id {String} Resource ID\n     * @return {String} Resulting URI\n     */\n    toUri : function(id)\n    {\n      if (id == null) {\n        return id;\n      }\n\n      var entry = this.self(arguments).__registry[id];\n      if (!entry) {\n        return id;\n      }\n\n      if (typeof entry === \"string\") {\n        var lib = entry;\n      }\n      else\n      {\n        var lib = entry[3];\n\n        // no lib reference\n        // may mean that the image has been registered dynamically\n        if (!lib) {\n          return id;\n        }\n      }\n\n      var urlPrefix = \"\";\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\") &&\n          qx.core.Environment.get(\"io.ssl\")) {\n        urlPrefix = this.self(arguments).__urlPrefix[lib];\n      }\n\n      return urlPrefix + qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\") + \"/\" + id;\n    },\n\n    /**\n     * Construct a data: URI for an image resource.\n     *\n     * Constructs a data: URI for a given resource id, if this resource is\n     * contained in a base64 combined image. If this is not the case (e.g.\n     * because the combined image has not been loaded yet), returns the direct\n     * URI to the image file itself.\n     *\n     * @param resid {String} resource id of the image\n     * @return {String} \"data:\" or \"http:\" URI\n     */\n    toDataUri : function (resid)\n    {\n      var resentry = this.constructor.__registry[resid];\n      var combined = resentry ? this.constructor.__registry[resentry[4]] : null;\n      var uri;\n      if (combined) {\n        var resstruct = combined[4][resid];\n        uri = \"data:image/\" + resstruct[\"type\"] + \";\" + resstruct[\"encoding\"] +\n              \",\" + resstruct[\"data\"];\n      }\n      else {\n        uri = this.toUri(resid);\n      }\n      return uri;\n    },\n\n    /**\n     * Checks whether a given resource id for an image is a font handle.\n     *\n     * @param resid {String} resource id of the image\n     * @return {Boolean} True if it's a font URI\n     */\n    isFontUri : function (resid)\n    {\n      return resid ? resid.startsWith(\"@\") : false;\n    }\n  },\n\n\n  defer : function(statics)\n  {\n    if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n    {\n      // To avoid a \"mixed content\" warning in IE when the application is\n      // delivered via HTTPS a prefix has to be added. This will transform the\n      // relative URL to an absolute one in IE.\n      // Though this warning is only displayed in conjunction with images which\n      // are referenced as a CSS \"background-image\", every resource path is\n      // changed when the application is served with HTTPS.\n      if (qx.core.Environment.get(\"io.ssl\"))\n      {\n        for (var lib in qx.$$libraries)\n        {\n          var resourceUri;\n          if (qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\")) {\n            resourceUri = qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\");\n          }\n          else\n          {\n            // default for libraries without a resourceUri set\n            statics.__urlPrefix[lib] = \"\";\n            continue;\n          }\n\n          var href;\n          //first check if there is base url set\n          var baseElements = document.getElementsByTagName(\"base\");\n          if (baseElements.length > 0) {\n            href = baseElements[0].href;\n          }\n\n          // It is valid to to begin a URL with \"//\" so this case has to\n          // be considered. If the to resolved URL begins with \"//\" the\n          // manager prefixes it with \"https:\" to avoid any problems for IE\n          if (resourceUri.match(/^\\/\\//) != null) {\n            statics.__urlPrefix[lib] = window.location.protocol;\n          }\n          // If the resourceUri begins with a single slash, include the current\n          // hostname\n          else if (resourceUri.match(/^\\//) != null)\n          {\n            if (href)\n            {\n              statics.__urlPrefix[lib] = href;\n            }\n            else\n            {\n              statics.__urlPrefix[lib] = window.location.protocol + \"//\" + window.location.host;\n            }\n          }\n          // If the resolved URL begins with \"./\" the final URL has to be\n          // put together using the document.URL property.\n          // IMPORTANT: this is only applicable for the source version\n          else if (resourceUri.match(/^\\.\\//) != null)\n          {\n            var url = document.URL;\n            statics.__urlPrefix[lib] = url.substring(0, url.lastIndexOf(\"/\") + 1);\n          } else if (resourceUri.match(/^http/) != null) {\n            // Let absolute URLs pass through\n            statics.__urlPrefix[lib] = \"\";\n          }\n          else\n          {\n            if (!href)\n            {\n              // check for parameters with URLs as value\n              var index = window.location.href.indexOf(\"?\");\n\n              if (index == -1)\n              {\n                href = window.location.href;\n              }\n              else\n              {\n                href = window.location.href.substring(0, index);\n              }\n            }\n\n            statics.__urlPrefix[lib] = href.substring(0, href.lastIndexOf(\"/\") + 1);\n          }\n        }\n      }\n    }\n  }\n});\n"
  ]
}