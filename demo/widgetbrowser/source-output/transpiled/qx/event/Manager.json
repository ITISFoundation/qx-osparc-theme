{
  "className": "qx.event.Manager",
  "packageName": "qx.event",
  "name": "Manager",
  "superClass": "Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0
      },
      "end": {
        "line": 950,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nFabian Jakobs (fjakobs)\nSebastian Werner (wpbasti)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Wrapper for browser DOM event handling for each browser window/frame."
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.bom.Event"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 42,
        "column": 2
      },
      "end": {
        "line": 78,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": "Creates a new instance of the event handler."
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "win {Window} The DOM window this manager handles the events for",
          "paramName": "win",
          "description": " The DOM window this manager handles the events for",
          "type": "Window"
        },
        {
          "name": "@param",
          "body": "registration {qx.event.Registration} The event registration to use",
          "paramName": "registration",
          "description": " The event registration to use",
          "type": "qx.event.Registration"
        }
      ]
    }
  },
  "members": {
    "__registration": {
      "location": {
        "start": {
          "line": 117,
          "column": 4
        },
        "end": {
          "line": 117,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__listeners": {
      "location": {
        "start": {
          "line": 118,
          "column": 4
        },
        "end": {
          "line": 118,
          "column": 22
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__dispatchers": {
      "location": {
        "start": {
          "line": 120,
          "column": 4
        },
        "end": {
          "line": 120,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__disposeWrapper": {
      "location": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 121,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__handlers": {
      "location": {
        "start": {
          "line": 123,
          "column": 4
        },
        "end": {
          "line": 123,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__handlerCache": {
      "location": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 124,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__window": {
      "location": {
        "start": {
          "line": 125,
          "column": 4
        },
        "end": {
          "line": 125,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__windowId": {
      "location": {
        "start": {
          "line": 126,
          "column": 4
        },
        "end": {
          "line": 126,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__blacklist": {
      "location": {
        "start": {
          "line": 128,
          "column": 4
        },
        "end": {
          "line": 128,
          "column": 22
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__clearBlackList": {
      "location": {
        "start": {
          "line": 129,
          "column": 4
        },
        "end": {
          "line": 129,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getWindow": {
      "location": {
        "start": {
          "line": 144,
          "column": 4
        },
        "end": {
          "line": 146,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nHELPERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Get the window instance the event manager is responsible for"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Window} DOM window instance",
            "type": "Window",
            "desc": " DOM window instance"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getWindowId": {
      "location": {
        "start": {
          "line": 154,
          "column": 4
        },
        "end": {
          "line": 156,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the hashcode of the manager's window"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The window's hashcode",
            "type": "String",
            "desc": " The window's hashcode"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getHandler": {
      "location": {
        "start": {
          "line": 165,
          "column": 4
        },
        "end": {
          "line": 174,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns an instance of the given handler class for this manager(window)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} Any class which implements {@link qx.event.IEventHandler}",
            "paramName": "clazz",
            "description": " Any class which implements {@link qx.event.IEventHandler}",
            "type": "Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The instance used by this manager",
            "type": "Object",
            "desc": " The instance used by this manager"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDispatcher": {
      "location": {
        "start": {
          "line": 183,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns an instance of the given dispatcher class for this manager(window)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} Any class which implements {@link qx.event.IEventHandler}",
            "paramName": "clazz",
            "description": " Any class which implements {@link qx.event.IEventHandler}",
            "type": "Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The instance used by this manager",
            "type": "Object",
            "desc": " The instance used by this manager"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getListeners": {
      "location": {
        "start": {
          "line": 216,
          "column": 4
        },
        "end": {
          "line": 229,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT LISTENER MANAGEMENT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Get a copy of all event listeners for the given combination\nof target, event type and phase.\n\nThis method is especially useful and for event handlers to\nto query the listeners registered in the manager."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String} Event type",
            "paramName": "type",
            "description": " Event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether the listener is for the\ncapturing phase of the bubbling phase.",
            "paramName": "capture",
            "description": " Whether the listener is for the\ncapturing phase of the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array | null} Array of registered event handlers. May return\nnull when no listener were found.",
            "type": "Array | null",
            "desc": " Array of registered event handlers. May return\nnull when no listener were found."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAllListeners": {
      "location": {
        "start": {
          "line": 239,
          "column": 4
        },
        "end": {
          "line": 241,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns all registered listeners."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} All registered listeners. The key is the hash code form an object.",
            "type": "Map",
            "desc": " All registered listeners. The key is the hash code form an object."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "serializeListeners": {
      "location": {
        "start": {
          "line": 251,
          "column": 4
        },
        "end": {
          "line": 282,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a serialized array of all events attached on the given target."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map[]} Array of maps where everyone contains the keys:\n<code>handler</code>, <code>self</code>, <code>type</code> and <code>capture</code>.",
            "type": "Map[]",
            "desc": " Array of maps where everyone contains the keys:\n<code>handler</code>, <code>self</code>, <code>type</code> and <code>capture</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toggleAttachedEvents": {
      "location": {
        "start": {
          "line": 298,
          "column": 4
        },
        "end": {
          "line": 320,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This method might be used to temporally remove all events\ndirectly attached to the given target. This do not work\nhave any effect on bubbling events normally.\n\nThis is mainly thought for detaching events in IE, before\ncloning them. It also removes all leak scenarios\nwhen unloading a document and may be used here as well."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "enable {Boolean} Whether to enable or disable the events",
            "paramName": "enable",
            "description": " Whether to enable or disable the events",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasListener": {
      "location": {
        "start": {
          "line": 333,
          "column": 4
        },
        "end": {
          "line": 355,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Check whether there are one or more listeners for an event type\nregistered at the target."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String} The event type",
            "paramName": "type",
            "description": " The event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to check for listeners of\nthe bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to check for listeners of\nthe bubbling or of the capturing phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the target has event listeners of the given type.",
            "type": "Boolean",
            "desc": " Whether the target has event listeners of the given type."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "importListeners": {
      "location": {
        "start": {
          "line": 373,
          "column": 4
        },
        "end": {
          "line": 413,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Imports a list of event listeners at once. This only\nworks for newly created elements as it replaces\nall existing data structures.\n\nWorks with a map of data. Each entry in this map should be a\nmap again with the keys <code>type</code>, <code>listener</code>,\n<code>self</code>, <code>capture</code> and an optional <code>unique</code>.\n\nThe values are identical to the parameters of {@link #addListener}.\nFor details please have a look there."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "list {Map} A map where every listener has an unique key.",
            "paramName": "list",
            "description": " A map where every listener has an unique key.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addListener": {
      "location": {
        "start": {
          "line": 436,
          "column": 4
        },
        "end": {
          "line": 485,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add an event listener to any valid target. The event listener is passed an\ninstance of {@link qx.event.type.Event} containing all relevant information\nabout the event as parameter."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String} Name of the event e.g. \"click\", \"keydown\", ...",
            "paramName": "type",
            "description": " Name of the event e.g. \"click\", \"keydown\", ...",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} Event listener function",
            "paramName": "listener",
            "description": " Event listener function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\nthe event listener. When not given, the corresponding dispatcher\nusually falls back to a default, which is the target\nby convention. Note this is not a strict requirement, i.e.\ncustom dispatchers can follow a different strategy.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\nthe event listener. When not given, the corresponding dispatcher\nusually falls back to a default, which is the target\nby convention. Note this is not a strict requirement, i.e.\ncustom dispatchers can follow a different strategy.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\ncapturing phase or the bubbling phase of the event. The default is\nto attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\ncapturing phase or the bubbling phase of the event. The default is\nto attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque ID, which can be used to remove the event listener\nusing the {@link #removeListenerById} method.",
            "type": "String",
            "desc": " An opaque ID, which can be used to remove the event listener\nusing the {@link #removeListenerById} method."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the parameters are wrong"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "findHandler": {
      "location": {
        "start": {
          "line": 496,
          "column": 4
        },
        "end": {
          "line": 579,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the event handler class matching the given event target and type"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The event target",
            "paramName": "target",
            "description": " The event target",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} The event type",
            "paramName": "type",
            "description": " The event type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.IEventHandler|null} The best matching event handler or\n<code>null</code>.",
            "type": "qx.event.IEventHandler|null",
            "desc": " The best matching event handler or\n<code>null</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__registerAtHandler": {
      "location": {
        "start": {
          "line": 592,
          "column": 4
        },
        "end": {
          "line": 610,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This method is called each time an event listener for one of the\nsupported events is added using {qx.event.Manager#addListener}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\ncapturing phase or the bubbling phase of the event.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\ncapturing phase or the bubbling phase of the event.",
            "type": "Boolean"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if there is no handler for the event"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "removeListener": {
      "location": {
        "start": {
          "line": 626,
          "column": 4
        },
        "end": {
          "line": 679,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove an event listener from an event target."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String} Name of the event",
            "paramName": "type",
            "description": " Name of the event",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} The pointer to the event listener",
            "paramName": "listener",
            "description": " The pointer to the event listener",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\nthe event listener.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\nthe event listener.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to remove the event listener of\nthe bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to remove the event listener of\nthe bubbling or of the capturing phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (was existant)",
            "type": "Boolean",
            "desc": " Whether the event was removed successfully (was existant)"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the parameters are wrong"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeListenerById": {
      "location": {
        "start": {
          "line": 690,
          "column": 4
        },
        "end": {
          "line": 739,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes an event listener from an event target by an ID returned by\n{@link #addListener}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} The event target",
            "paramName": "target",
            "description": " The event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "id {String} The ID returned by {@link #addListener}",
            "paramName": "id",
            "description": " The ID returned by {@link #addListener}",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the handler was removed",
            "type": "Boolean",
            "desc": " <code>true</code> if the handler was removed"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAllListeners": {
      "location": {
        "start": {
          "line": 748,
          "column": 4
        },
        "end": {
          "line": 778,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove all event listeners, which are attached to the given event target."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} The event target to remove all event listeners from.",
            "paramName": "target",
            "description": " The event target to remove all event listeners from.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the events were existant and were removed successfully.",
            "type": "Boolean",
            "desc": " Whether the events were existant and were removed successfully."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deleteAllListeners": {
      "location": {
        "start": {
          "line": 790,
          "column": 4
        },
        "end": {
          "line": 792,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal helper for deleting the internal listener  data structure for\nthe given targetKey."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetKey {String} Hash code for the object to delete its\nlisteners.",
            "paramName": "targetKey",
            "description": " Hash code for the object to delete its\nlisteners.",
            "type": "String"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__unregisterAtHandler": {
      "location": {
        "start": {
          "line": 806,
          "column": 4
        },
        "end": {
          "line": 824,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This method is called each time the an event listener for one of the\nsupported events is removed by using {qx.event.Manager#removeListener}\nand no other event listener is listening on this type."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\ncapturing phase or the bubbling phase of the event.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\ncapturing phase or the bubbling phase of the event.",
            "type": "Boolean"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if there is no handler for the event"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "dispatchEvent": {
      "location": {
        "start": {
          "line": 849,
          "column": 4
        },
        "end": {
          "line": 908,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT DISPATCH\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Dispatches an event object using the qooxdoo event handler system. The\nevent will only be visible in event listeners attached using\n{@link #addListener}. After dispatching the event object will be pooled\nfor later reuse or disposed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "event {qx.event.type.Event} The event object to dispatch. The event\nobject must be obtained using {@link qx.event.Registration#createEvent}\nand initialized using {@link qx.event.type.Event#init}.",
            "paramName": "event",
            "description": " The event object to dispatch. The event\nobject must be obtained using {@link qx.event.Registration#createEvent}\nand initialized using {@link qx.event.type.Event#init}.",
            "type": "qx.event.type.Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the event default was prevented or not.\nReturns true, when the event was NOT prevented.",
            "type": "Boolean",
            "desc": " whether the event default was prevented or not.\nReturns true, when the event was NOT prevented."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if there is no dispatcher for the event"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "dispose": {
      "location": {
        "start": {
          "line": 914,
          "column": 4
        },
        "end": {
          "line": 925,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Dispose the event manager"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.IDisposable",
      "appearsIn": [
        "qx.core.IDisposable"
      ]
    },
    "__addToBlacklist": {
      "location": {
        "start": {
          "line": 932,
          "column": 4
        },
        "end": {
          "line": 938,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add event to blacklist."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "uid {number} unique event id",
            "paramName": "uid",
            "description": " unique event id",
            "type": "number"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "isBlacklisted": {
      "location": {
        "start": {
          "line": 946,
          "column": 4
        },
        "end": {
          "line": 948,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Check if the event with the given id has been removed and is therefore blacklisted for event handling"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "uid {number} unique event id",
            "paramName": "uid",
            "description": " unique event id",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{boolean}",
            "type": "boolean",
            "desc": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}