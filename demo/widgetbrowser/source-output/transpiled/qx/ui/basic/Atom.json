{
  "className": "qx.ui.basic.Atom",
  "packageName": "qx.ui.basic",
  "name": "Atom",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 48,
        "column": 0
      },
      "end": {
        "line": 344,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "A multi-purpose widget, which combines a label with an icon.\n\nThe intended purpose of qx.ui.basic.Atom is to easily align the common icon-text\ncombination in different ways.\n\nThis is useful for all types of buttons, tooltips, ...\n\n*Example*\n\nHere is a little example of how to use the widget.\n\n<pre class='javascript'>\nvar atom = new qx.ui.basic.Atom(\"Icon Right\", \"icon/32/actions/go-next.png\");\nthis.getRoot().add(atom);\n</pre>\n\nThis example creates an atom with the label \"Icon Right\" and an icon.\n\n*External Documentation*\n\n<a href='http://manual.qooxdoo.org/${qxversion}/pages/widget/atom.html' target='_blank'>\nDocumentation of this widget in the qooxdoo manual.</a>"
        }
      ],
      "@childControl": [
        {
          "name": "@childControl",
          "body": "label {qx.ui.basic.Label} label part of the atom"
        },
        {
          "name": "@childControl",
          "body": "icon {qx.ui.basic.Image} icon part of the atom"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 63,
        "column": 2
      },
      "end": {
        "line": 80,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "label {String} Label to use",
          "paramName": "label",
          "description": " Label to use",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "icon {String?null} Icon to use",
          "paramName": "icon",
          "description": " Icon to use",
          "optional": true,
          "defaultValue": "null",
          "type": "String"
        }
      ]
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 93,
          "column": 4
        },
        "end": {
          "line": 97,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "defaultValue": "atom",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "label": {
      "location": {
        "start": {
          "line": 101,
          "column": 4
        },
        "end": {
          "line": 107,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The label/caption/text of the qx.ui.basic.Atom instance"
          }
        ]
      },
      "name": "label",
      "propertyType": "new",
      "event": "changeLabel",
      "apply": "_applyLabel",
      "allowNull": true,
      "check": "String"
    },
    "rich": {
      "location": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 121,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Switches between rich HTML and text content. The text mode (<code>false</code>) supports\nadvanced features like ellipsis when the available space is not\nenough. HTML mode (<code>true</code>) supports multi-line content and all the\nmarkup features of HTML content."
          }
        ]
      },
      "name": "rich",
      "propertyType": "new",
      "apply": "_applyRich",
      "check": "Boolean",
      "defaultValue": false
    },
    "icon": {
      "location": {
        "start": {
          "line": 125,
          "column": 4
        },
        "end": {
          "line": 132,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Any URI String supported by qx.ui.basic.Image to display an icon"
          }
        ]
      },
      "name": "icon",
      "propertyType": "new",
      "themeable": true,
      "event": "changeIcon",
      "apply": "_applyIcon",
      "allowNull": true,
      "check": "String"
    },
    "gap": {
      "location": {
        "start": {
          "line": 138,
          "column": 4
        },
        "end": {
          "line": 146,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The space between the icon and the label"
          }
        ]
      },
      "name": "gap",
      "propertyType": "new",
      "themeable": true,
      "event": "changeGap",
      "apply": "_applyGap",
      "allowNull": false,
      "check": "Integer",
      "defaultValue": 4
    },
    "show": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 161,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Configure the visibility of the sub elements/widgets.\nPossible values: both, label, icon"
          }
        ]
      },
      "name": "show",
      "propertyType": "new",
      "themeable": true,
      "event": "changeShow",
      "inheritable": true,
      "apply": "_applyShow",
      "possibleValues": [
        "both",
        "label",
        "icon"
      ],
      "defaultValue": "both"
    },
    "iconPosition": {
      "location": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 174,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The position of the icon in relation to the text.\nOnly useful/needed if text and icon is configured and 'show' is configured as 'both' (default)"
          }
        ]
      },
      "name": "iconPosition",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyIconPosition",
      "possibleValues": [
        "top",
        "right",
        "bottom",
        "left",
        "top-left",
        "bottom-left",
        "top-right",
        "bottom-right"
      ],
      "defaultValue": "left"
    },
    "center": {
      "location": {
        "start": {
          "line": 186,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the content should be rendered centrally when to much space\nis available. Enabling this property centers in both axis. The behavior\nwhen disabled of the centering depends on the {@link #iconPosition} property.\nIf the icon position is <code>left</code> or <code>right</code>, the X axis\nis not centered, only the Y axis. If the icon position is <code>top</code>\nor <code>bottom</code>, the Y axis is not centered. In case of e.g. an\nicon position of <code>top-left</code> no axis is centered."
          }
        ]
      },
      "name": "center",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyCenter",
      "check": "Boolean",
      "defaultValue": false
    }
  },
  "members": {
    "_createChildControlImpl": {
      "location": {
        "start": {
          "line": 206,
          "column": 4
        },
        "end": {
          "line": 234,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "paramName": "id",
            "description": " ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "hash {String?undefined} If a child control name contains a #,\nall text following the # will be the hash argument.",
            "paramName": "hash",
            "description": " If a child control name contains a #,\nall text following the # will be the hash argument.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The created control or <code>null</code>",
            "type": "qx.ui.core.Widget",
            "desc": " The created control or <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_forwardStates": {
      "location": {
        "start": {
          "line": 241,
          "column": 4
        },
        "end": {
          "line": 245,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_forwardStates)"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_handleLabel": {
      "location": {
        "start": {
          "line": 251,
          "column": 4
        },
        "end": {
          "line": 258,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates the visibility of the label"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleIcon": {
      "location": {
        "start": {
          "line": 264,
          "column": 4
        },
        "end": {
          "line": 271,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates the visibility of the icon"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyLabel": {
      "location": {
        "start": {
          "line": 275,
          "column": 4
        },
        "end": {
          "line": 283,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyRich": {
      "location": {
        "start": {
          "line": 287,
          "column": 4
        },
        "end": {
          "line": 293,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyIcon": {
      "location": {
        "start": {
          "line": 297,
          "column": 4
        },
        "end": {
          "line": 305,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyGap": {
      "location": {
        "start": {
          "line": 309,
          "column": 4
        },
        "end": {
          "line": 311,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyShow": {
      "location": {
        "start": {
          "line": 315,
          "column": 4
        },
        "end": {
          "line": 319,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyIconPosition": {
      "location": {
        "start": {
          "line": 323,
          "column": 4
        },
        "end": {
          "line": 325,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyCenter": {
      "location": {
        "start": {
          "line": 329,
          "column": 4
        },
        "end": {
          "line": 331,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applySelectable": {
      "location": {
        "start": {
          "line": 335,
          "column": 4
        },
        "end": {
          "line": 342,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "getLabel": {
      "type": "function",
      "name": "getLabel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setLabel": {
      "type": "function",
      "name": "setLabel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetLabel": {
      "type": "function",
      "name": "resetLabel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getRich": {
      "type": "function",
      "name": "getRich",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isRich": {
      "type": "function",
      "name": "isRich",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setRich": {
      "type": "function",
      "name": "setRich",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetRich": {
      "type": "function",
      "name": "resetRich",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getIcon": {
      "type": "function",
      "name": "getIcon",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setIcon": {
      "type": "function",
      "name": "setIcon",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetIcon": {
      "type": "function",
      "name": "resetIcon",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getGap": {
      "type": "function",
      "name": "getGap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setGap": {
      "type": "function",
      "name": "setGap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetGap": {
      "type": "function",
      "name": "resetGap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getShow": {
      "type": "function",
      "name": "getShow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setShow": {
      "type": "function",
      "name": "setShow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetShow": {
      "type": "function",
      "name": "resetShow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getIconPosition": {
      "type": "function",
      "name": "getIconPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setIconPosition": {
      "type": "function",
      "name": "setIconPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetIconPosition": {
      "type": "function",
      "name": "resetIconPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getCenter": {
      "type": "function",
      "name": "getCenter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isCenter": {
      "type": "function",
      "name": "isCenter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setCenter": {
      "type": "function",
      "name": "setCenter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetCenter": {
      "type": "function",
      "name": "resetCenter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "descendants": [
    "qx.ui.form.ListItem",
    "qx.ui.form.Button",
    "qx.ui.form.ToggleButton",
    "qx.ui.form.HoverButton"
  ]
}