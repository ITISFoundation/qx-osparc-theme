{
  "className": "qx.ui.table.model.Simple",
  "packageName": "qx.ui.table.model",
  "name": "Simple",
  "superClass": "qx.ui.table.model.Abstract",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 22,
        "column": 0
      },
      "end": {
        "line": 759,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2006 STZ-IDA, Germany, http://www.stz-ida.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nTil Schneider (til132)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "A simple table model that provides an API for changing the model data."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 27,
        "column": 2
      },
      "end": {
        "line": 38,
        "column": 3
      }
    }
  },
  "properties": {
    "caseSensitiveSorting": {
      "location": {
        "start": {
          "line": 45,
          "column": 4
        },
        "end": {
          "line": 49,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether sorting should be case sensitive"
          }
        ]
      },
      "name": "caseSensitiveSorting",
      "propertyType": "new",
      "check": "Boolean",
      "defaultValue": true
    }
  },
  "members": {
    "_rowArr": {
      "location": {
        "start": {
          "line": 150,
          "column": 4
        },
        "end": {
          "line": 150,
          "column": 18
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "__editableColArr": {
      "location": {
        "start": {
          "line": 151,
          "column": 4
        },
        "end": {
          "line": 151,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__sortableColArr": {
      "location": {
        "start": {
          "line": 152,
          "column": 4
        },
        "end": {
          "line": 152,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__sortMethods": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 153,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__sortColumnIndex": {
      "location": {
        "start": {
          "line": 154,
          "column": 4
        },
        "end": {
          "line": 154,
          "column": 28
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__sortAscending": {
      "location": {
        "start": {
          "line": 155,
          "column": 4
        },
        "end": {
          "line": 155,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getRowData": {
      "location": {
        "start": {
          "line": 159,
          "column": 4
        },
        "end": {
          "line": 167,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowIndex {Integer} the model index of the row.",
            "paramName": "rowIndex",
            "description": " the model index of the row.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} the row data as an object or null if the model does not support row data\nobjects. The details on the object returned are determined by the model\nimplementation only.",
            "type": "Object",
            "desc": " the row data as an object or null if the model does not support row data\nobjects. The details on the object returned are determined by the model\nimplementation only."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "getRowDataAsMap": {
      "location": {
        "start": {
          "line": 177,
          "column": 4
        },
        "end": {
          "line": 201,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the data of one row as map containing the column IDs as key and\nthe cell values as value. Also the meta data is included."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowIndex {Integer} the model index of the row.",
            "paramName": "rowIndex",
            "description": " the model index of the row.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} a Map containing the column values.",
            "type": "Map",
            "desc": " a Map containing the column values."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDataAsMapArray": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 220,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the whole data as an array of maps.\n\nNote: Individual items are retrieved by {@link #getRowDataAsMap}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map[]} Array of row data maps",
            "type": "Map[]",
            "desc": " Array of row data maps"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setEditable": {
      "location": {
        "start": {
          "line": 228,
          "column": 4
        },
        "end": {
          "line": 237,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets all columns editable or not editable."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "editable {Boolean} whether all columns are editable.",
            "paramName": "editable",
            "description": " whether all columns are editable.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setColumnEditable": {
      "location": {
        "start": {
          "line": 246,
          "column": 4
        },
        "end": {
          "line": 258,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets whether a column is editable."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column of which to set the editable state.",
            "paramName": "columnIndex",
            "description": " the column of which to set the editable state.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "editable {Boolean} whether the column should be editable.",
            "paramName": "editable",
            "description": " whether the column should be editable.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isColumnEditable": {
      "location": {
        "start": {
          "line": 261,
          "column": 4
        },
        "end": {
          "line": 263,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column to check.",
            "paramName": "columnIndex",
            "description": " the column to check.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the column is editable.",
            "type": "Boolean",
            "desc": " whether the column is editable."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "setColumnSortable": {
      "location": {
        "start": {
          "line": 272,
          "column": 4
        },
        "end": {
          "line": 283,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets whether a column is sortable."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column of which to set the sortable state.",
            "paramName": "columnIndex",
            "description": " the column of which to set the sortable state.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "sortable {Boolean} whether the column should be sortable.",
            "paramName": "sortable",
            "description": " whether the column should be sortable.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isColumnSortable": {
      "location": {
        "start": {
          "line": 287,
          "column": 4
        },
        "end": {
          "line": 293,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column to check.",
            "paramName": "columnIndex",
            "description": " the column to check.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the column is sortable.",
            "type": "Boolean",
            "desc": " whether the column is sortable."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "sortByColumn": {
      "location": {
        "start": {
          "line": 296,
          "column": 4
        },
        "end": {
          "line": 342,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column to sort by.",
            "paramName": "columnIndex",
            "description": " the column to sort by.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "ascending {Boolean} whether to sort ascending.",
            "paramName": "ascending",
            "description": " whether to sort ascending.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "setSortMethods": {
      "location": {
        "start": {
          "line": 376,
          "column": 4
        },
        "end": {
          "line": 395,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Specify the methods to use for ascending and descending sorts of a\nparticular column."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer}\nThe index of the column for which the sort methods are being\nprovided.",
            "paramName": "columnIndex",
            "description": "\nThe index of the column for which the sort methods are being\nprovided.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "compare {Function|Map}\nIf provided as a Function, this is the comparator function to sort in\nascending order. It takes two parameters: the two arrays of row data,\nrow1 and row2, being compared. It may determine which column of the\nrow data to sort on by accessing arguments.callee.columnIndex.  The\ncomparator function must return 1, 0 or -1, when the column in row1\nis greater than, equal to, or less than, respectively, the column in\nrow2.\n\nIf this parameter is a Map, it shall have two properties: \"ascending\"\nand \"descending\". The property value of each is a comparator\nfunction, as described above.\n\nIf only the \"ascending\" function is provided (i.e. this parameter is\na Function, not a Map), then the \"descending\" function is built\ndynamically by passing the two parameters to the \"ascending\" function\nin reversed order. <i>Use of a dynamically-built \"descending\" function\ngenerates at least one extra function call for each row in the table,\nand possibly many more. If the table is expected to have more than\nabout 1000 rows, you will likely want to provide a map with a custom\n\"descending\" sort function as well as the \"ascending\" one.</i>",
            "paramName": "compare",
            "description": "\nIf provided as a Function, this is the comparator function to sort in\nascending order. It takes two parameters: the two arrays of row data,\nrow1 and row2, being compared. It may determine which column of the\nrow data to sort on by accessing arguments.callee.columnIndex.  The\ncomparator function must return 1, 0 or -1, when the column in row1\nis greater than, equal to, or less than, respectively, the column in\nrow2.\n\nIf this parameter is a Map, it shall have two properties: \"ascending\"\nand \"descending\". The property value of each is a comparator\nfunction, as described above.\n\nIf only the \"ascending\" function is provided (i.e. this parameter is\na Function, not a Map), then the \"descending\" function is built\ndynamically by passing the two parameters to the \"ascending\" function\nin reversed order. <i>Use of a dynamically-built \"descending\" function\ngenerates at least one extra function call for each row in the table,\nand possibly many more. If the table is expected to have more than\nabout 1000 rows, you will likely want to provide a map with a custom\n\"descending\" sort function as well as the \"ascending\" one.</i>",
            "type": [
              "Function",
              "Map"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSortMethods": {
      "location": {
        "start": {
          "line": 409,
          "column": 4
        },
        "end": {
          "line": 411,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the sortMethod(s) for a table column."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} The index of the column for which the sort\nmethods are being  provided.",
            "paramName": "columnIndex",
            "description": " The index of the column for which the sort\nmethods are being  provided.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} a map with the two properties \"ascending\"\nand \"descending\" for the specified column.\nThe property value of each is a comparator function, as described\nin {@link #setSortMethods}.",
            "type": "Map",
            "desc": " a map with the two properties \"ascending\"\nand \"descending\" for the specified column.\nThe property value of each is a comparator function, as described\nin {@link #setSortMethods}."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clearSorting": {
      "location": {
        "start": {
          "line": 417,
          "column": 4
        },
        "end": {
          "line": 426,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Clears the sorting."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSortColumnIndex": {
      "location": {
        "start": {
          "line": 429,
          "column": 4
        },
        "end": {
          "line": 431,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the column index the model is sorted by.",
            "type": "Integer",
            "desc": " the column index the model is sorted by."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "_setSortColumnIndex": {
      "location": {
        "start": {
          "line": 441,
          "column": 4
        },
        "end": {
          "line": 444,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set the sort column index\n\nWARNING: This should be called only by subclasses with intimate\nknowledge of what they are doing!"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} index of the column",
            "paramName": "columnIndex",
            "description": " index of the column",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "isSortAscending": {
      "location": {
        "start": {
          "line": 447,
          "column": 4
        },
        "end": {
          "line": 449,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the model is sorted ascending.",
            "type": "Boolean",
            "desc": " whether the model is sorted ascending."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "_setSortAscending": {
      "location": {
        "start": {
          "line": 461,
          "column": 4
        },
        "end": {
          "line": 464,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set whether to sort in ascending order or not.\n\nWARNING: This should be called only by subclasses with intimate\nknowledge of what they are doing!"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ascending {Boolean}\n<i>true</i> for an ascending sort;\n<i> false</i> for a descending sort.",
            "paramName": "ascending",
            "description": "\n<i>true</i> for an ascending sort;\n<i> false</i> for a descending sort.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getRowCount": {
      "location": {
        "start": {
          "line": 467,
          "column": 4
        },
        "end": {
          "line": 469,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the number of rows.",
            "type": "Integer",
            "desc": " the number of rows."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "getValue": {
      "location": {
        "start": {
          "line": 472,
          "column": 4
        },
        "end": {
          "line": 479,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the index of the column",
            "paramName": "columnIndex",
            "description": " the index of the column",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rowIndex {Integer} the index of the row",
            "paramName": "rowIndex",
            "description": " the index of the row",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "setValue": {
      "location": {
        "start": {
          "line": 482,
          "column": 4
        },
        "end": {
          "line": 506,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} index of the column",
            "paramName": "columnIndex",
            "description": " index of the column",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rowIndex {Integer} index of the row",
            "paramName": "rowIndex",
            "description": " index of the row",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "value {var} Value to be set",
            "paramName": "value",
            "description": " Value to be set",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "setData": {
      "location": {
        "start": {
          "line": 517,
          "column": 4
        },
        "end": {
          "line": 538,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the whole data in a bulk."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowArr {var[][]} An array containing an array for each row. Each\nrow-array contains the values in that row in the order of the columns\nin this model.",
            "paramName": "rowArr",
            "description": " An array containing an array for each row. Each\nrow-array contains the values in that row in the order of the columns\nin this model.",
            "type": "var[][]"
          },
          {
            "name": "@param",
            "body": "clearSorting {Boolean ? true} Whether to clear the sort state.",
            "paramName": "clearSorting",
            "description": " Whether to clear the sort state.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getData": {
      "location": {
        "start": {
          "line": 551,
          "column": 4
        },
        "end": {
          "line": 553,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the data of this model.\n\nWarning: Do not alter this array! If you want to change the data use\n{@link #setData}, {@link #setDataAsMapArray} or {@link #setValue} instead."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var[][]} An array containing an array for each row. Each\nrow-array contains the values in that row in the order of the columns\nin this model.",
            "type": "var[][]",
            "desc": " An array containing an array for each row. Each\nrow-array contains the values in that row in the order of the columns\nin this model."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setDataAsMapArray": {
      "location": {
        "start": {
          "line": 565,
          "column": 4
        },
        "end": {
          "line": 567,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the whole data in a bulk."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mapArr {Map[]} An array containing a map for each row. Each\nrow-map contains the column IDs as key and the cell values as value.",
            "paramName": "mapArr",
            "description": " An array containing a map for each row. Each\nrow-map contains the column IDs as key and the cell values as value.",
            "type": "Map[]"
          },
          {
            "name": "@param",
            "body": "rememberMaps {Boolean ? false} Whether to remember the original maps.\nIf true {@link #getRowData} will return the original map.",
            "paramName": "rememberMaps",
            "description": " Whether to remember the original maps.\nIf true {@link #getRowData} will return the original map.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "clearSorting {Boolean ? true} Whether to clear the sort state.",
            "paramName": "clearSorting",
            "description": " Whether to clear the sort state.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addRows": {
      "location": {
        "start": {
          "line": 582,
          "column": 4
        },
        "end": {
          "line": 607,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds some rows to the model.\n\nWarning: The given array will be altered!"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowArr {var[][]} An array containing an array for each row. Each\nrow-array contains the values in that row in the order of the columns\nin this model.",
            "paramName": "rowArr",
            "description": " An array containing an array for each row. Each\nrow-array contains the values in that row in the order of the columns\nin this model.",
            "type": "var[][]"
          },
          {
            "name": "@param",
            "body": "startIndex {Integer ? null} The index where to insert the new rows. If null,\nthe rows are appended to the end.",
            "paramName": "startIndex",
            "description": " The index where to insert the new rows. If null,\nthe rows are appended to the end.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "clearSorting {Boolean ? true} Whether to clear the sort state.",
            "paramName": "clearSorting",
            "description": " Whether to clear the sort state.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addRowsAsMapArray": {
      "location": {
        "start": {
          "line": 623,
          "column": 4
        },
        "end": {
          "line": 625,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds some rows to the model.\n\nWarning: The given array (mapArr) will be altered!"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mapArr {Map[]} An array containing a map for each row. Each\nrow-map contains the column IDs as key and the cell values as value.",
            "paramName": "mapArr",
            "description": " An array containing a map for each row. Each\nrow-map contains the column IDs as key and the cell values as value.",
            "type": "Map[]"
          },
          {
            "name": "@param",
            "body": "startIndex {Integer ? null} The index where to insert the new rows. If null,\nthe rows are appended to the end.",
            "paramName": "startIndex",
            "description": " The index where to insert the new rows. If null,\nthe rows are appended to the end.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rememberMaps {Boolean ? false} Whether to remember the original maps.\nIf true {@link #getRowData} will return the original map.",
            "paramName": "rememberMaps",
            "description": " Whether to remember the original maps.\nIf true {@link #getRowData} will return the original map.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "clearSorting {Boolean ? true} Whether to clear the sort state.",
            "paramName": "clearSorting",
            "description": " Whether to clear the sort state.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRows": {
      "location": {
        "start": {
          "line": 641,
          "column": 4
        },
        "end": {
          "line": 666,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets rows in the model. The rows overwrite the old rows starting at\n<code>startIndex</code> to <code>startIndex+rowArr.length</code>.\n\nWarning: The given array will be altered!"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowArr {var[][]} An array containing an array for each row. Each\nrow-array contains the values in that row in the order of the columns\nin this model.",
            "paramName": "rowArr",
            "description": " An array containing an array for each row. Each\nrow-array contains the values in that row in the order of the columns\nin this model.",
            "type": "var[][]"
          },
          {
            "name": "@param",
            "body": "startIndex {Integer ? null} The index where to insert the new rows. If null,\nthe rows are set from the beginning (0).",
            "paramName": "startIndex",
            "description": " The index where to insert the new rows. If null,\nthe rows are set from the beginning (0).",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "clearSorting {Boolean ? true} Whether to clear the sort state.",
            "paramName": "clearSorting",
            "description": " Whether to clear the sort state.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRowsAsMapArray": {
      "location": {
        "start": {
          "line": 683,
          "column": 4
        },
        "end": {
          "line": 685,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set rows in the model. The rows overwrite the old rows starting at\n<code>startIndex</code> to <code>startIndex+rowArr.length</code>.\n\nWarning: The given array (mapArr) will be altered!"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mapArr {Map[]} An array containing a map for each row. Each\nrow-map contains the column IDs as key and the cell values as value.",
            "paramName": "mapArr",
            "description": " An array containing a map for each row. Each\nrow-map contains the column IDs as key and the cell values as value.",
            "type": "Map[]"
          },
          {
            "name": "@param",
            "body": "startIndex {Integer ? null} The index where to insert the new rows. If null,\nthe rows are appended to the end.",
            "paramName": "startIndex",
            "description": " The index where to insert the new rows. If null,\nthe rows are appended to the end.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rememberMaps {Boolean ? false} Whether to remember the original maps.\nIf true {@link #getRowData} will return the original map.",
            "paramName": "rememberMaps",
            "description": " Whether to remember the original maps.\nIf true {@link #getRowData} will return the original map.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "clearSorting {Boolean ? true} Whether to clear the sort state.",
            "paramName": "clearSorting",
            "description": " Whether to clear the sort state.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeRows": {
      "location": {
        "start": {
          "line": 695,
          "column": 4
        },
        "end": {
          "line": 714,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes some rows from the model."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "startIndex {Integer} the index of the first row to remove.",
            "paramName": "startIndex",
            "description": " the index of the first row to remove.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "howMany {Integer} the number of rows to remove.",
            "paramName": "howMany",
            "description": " the number of rows to remove.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "clearSorting {Boolean ? true} Whether to clear the sort state.",
            "paramName": "clearSorting",
            "description": " Whether to clear the sort state.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_mapArray2RowArr": {
      "location": {
        "start": {
          "line": 728,
          "column": 4
        },
        "end": {
          "line": 750,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates an array of maps to an array of arrays."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mapArr {Map[]} An array containing a map for each row. Each\nrow-map contains the column IDs as key and the cell values as value.",
            "paramName": "mapArr",
            "description": " An array containing a map for each row. Each\nrow-map contains the column IDs as key and the cell values as value.",
            "type": "Map[]"
          },
          {
            "name": "@param",
            "body": "rememberMaps {Boolean ? false} Whether to remember the original maps.\nIf true {@link #getRowData} will return the original map.",
            "paramName": "rememberMaps",
            "description": " Whether to remember the original maps.\nIf true {@link #getRowData} will return the original map.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var[][]} An array containing an array for each row. Each\nrow-array contains the values in that row in the order of the columns\nin this model.",
            "type": "var[][]",
            "desc": " An array containing an array for each row. Each\nrow-array contains the values in that row in the order of the columns\nin this model."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getCaseSensitiveSorting": {
      "type": "function",
      "name": "getCaseSensitiveSorting",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isCaseSensitiveSorting": {
      "type": "function",
      "name": "isCaseSensitiveSorting",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setCaseSensitiveSorting": {
      "type": "function",
      "name": "setCaseSensitiveSorting",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetCaseSensitiveSorting": {
      "type": "function",
      "name": "resetCaseSensitiveSorting",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 754,
        "column": 2
      },
      "end": {
        "line": 758,
        "column": 3
      }
    }
  },
  "descendants": []
}