{
  "className": "qx.ui.core.MPlacement",
  "packageName": "qx.ui.core",
  "name": "MPlacement",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0
      },
      "end": {
        "line": 581,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nMartin Wittemann (martinwittemann)\nChristian Hagendorn (chris_schmidt)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Methods to place popup like widgets to other widgets, points,\npointer event coordinates, etc."
        }
      ]
    }
  },
  "type": "mixin",
  "properties": {
    "position": {
      "type": "property",
      "name": "position",
      "abstract": false,
      "mixin": true,
      "access": "public"
    },
    "placeMethod": {
      "type": "property",
      "name": "placeMethod",
      "abstract": false,
      "mixin": true,
      "access": "public"
    },
    "domMove": {
      "type": "property",
      "name": "domMove",
      "abstract": false,
      "mixin": true,
      "access": "public"
    },
    "placementModeX": {
      "type": "property",
      "name": "placementModeX",
      "abstract": false,
      "mixin": true,
      "access": "public"
    },
    "placementModeY": {
      "type": "property",
      "name": "placementModeY",
      "abstract": false,
      "mixin": true,
      "access": "public"
    },
    "offsetLeft": {
      "type": "property",
      "name": "offsetLeft",
      "abstract": false,
      "mixin": true,
      "access": "public"
    },
    "offsetTop": {
      "type": "property",
      "name": "offsetTop",
      "abstract": false,
      "mixin": true,
      "access": "public"
    },
    "offsetRight": {
      "type": "property",
      "name": "offsetRight",
      "abstract": false,
      "mixin": true,
      "access": "public"
    },
    "offsetBottom": {
      "type": "property",
      "name": "offsetBottom",
      "abstract": false,
      "mixin": true,
      "access": "public"
    },
    "offset": {
      "type": "property",
      "name": "offset",
      "abstract": false,
      "mixin": true,
      "access": "public"
    }
  },
  "members": {
    "__ptwLiveUpdater": {
      "location": {
        "start": {
          "line": 208,
          "column": 4
        },
        "end": {
          "line": 208,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__ptwLiveDisappearListener": {
      "location": {
        "start": {
          "line": 209,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 37
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__ptwLiveUpdateDisappearListener": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 210,
          "column": 43
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getLayoutLocation": {
      "location": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 282,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the location data like {qx.bom.element.Location#get} does,\nbut does not rely on DOM elements coordinates to be rendered. Instead,\nthis method works with the available layout data available in the moment\nwhen it is executed.\nThis works best when called in some type of <code>resize</code> or\n<code>move</code> event which are supported by all widgets out of the\nbox."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Any widget",
            "paramName": "widget",
            "description": " Any widget",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|null} Returns a map with <code>left</code>, <code>top</code>,\n<code>right</code> and <code>bottom</code> which contains the distance\nof the widget relative coords the document.",
            "type": "Map|null",
            "desc": " Returns a map with <code>left</code>, <code>top</code>,\n<code>right</code> and <code>bottom</code> which contains the distance\nof the widget relative coords the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "moveTo": {
      "location": {
        "start": {
          "line": 296,
          "column": 4
        },
        "end": {
          "line": 345,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the position. Uses low-level, high-performance DOM\nmethods when the property {@link #domMove} is enabled.\nChecks if an always visible element is set and moves the widget to not\noverlay the always visible widget if possible. The algorithm tries to\nmove the widget as far left as necessary but not of the screen.\n({@link #setVisibleElement})"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "left {Integer} The left position",
            "paramName": "left",
            "description": " The left position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "top {Integer} The top position",
            "paramName": "top",
            "description": " The top position",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "placeToWidget": {
      "location": {
        "start": {
          "line": 358,
          "column": 4
        },
        "end": {
          "line": 390,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Places the widget to another (at least laid out) widget. The DOM\nelement is not needed, but the bounds are needed to compute the\nlocation of the widget to align to."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {qx.ui.core.Widget} Target coords align coords",
            "paramName": "target",
            "description": " Target coords align coords",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "liveupdate {Boolean} Flag indicating if the position of the\nwidget should be checked and corrected automatically.",
            "paramName": "liveupdate",
            "description": " Flag indicating if the position of the\nwidget should be checked and corrected automatically.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if the widget was successfully placed",
            "type": "Boolean",
            "desc": " true if the widget was successfully placed"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__cleanupFromLastPlaceToWidgetLiveUpdate": {
      "location": {
        "start": {
          "line": 396,
          "column": 4
        },
        "end": {
          "line": 409,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes all resources allocated by the last run of placeToWidget with liveupdate=true"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "placeToPointer": {
      "location": {
        "start": {
          "line": 417,
          "column": 4
        },
        "end": {
          "line": 431,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Places the widget to the pointer position."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Pointer} Pointer event to align to",
            "paramName": "event",
            "description": " Pointer event to align to",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "placeToElement": {
      "location": {
        "start": {
          "line": 441,
          "column": 4
        },
        "end": {
          "line": 473,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Places the widget to any (rendered) DOM element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to align to",
            "paramName": "elem",
            "description": " DOM element to align to",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "liveupdate {Boolean} Flag indicating if the position of the\nwidget should be checked and corrected automatically.",
            "paramName": "liveupdate",
            "description": " Flag indicating if the position of the\nwidget should be checked and corrected automatically.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "placeToPoint": {
      "location": {
        "start": {
          "line": 482,
          "column": 4
        },
        "end": {
          "line": 493,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Places the widget in relation to the given point"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "point {Map} Coordinate of any point with the keys <code>left</code>\nand <code>top</code>.",
            "paramName": "point",
            "description": " Coordinate of any point with the keys <code>left</code>\nand <code>top</code>.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getPlacementOffsets": {
      "location": {
        "start": {
          "line": 501,
          "column": 4
        },
        "end": {
          "line": 509,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the placement offsets as a map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The placement offsets",
            "type": "Map",
            "desc": " The placement offsets"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__getPlacementSize": {
      "location": {
        "start": {
          "line": 523,
          "column": 4
        },
        "end": {
          "line": 541,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the size of the object to place. The callback will be called with\nthe size as first argument. This methods works asynchronously.\n\nThe size of the object to place is the size of the widget. If a widget\nincluding this mixin needs a different size it can implement the method\n<code>_computePlacementSize</code>, which returns the size."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} This function will be called with the size as\nfirst argument",
            "paramName": "callback",
            "description": " This function will be called with the size as\nfirst argument",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_place": {
      "location": {
        "start": {
          "line": 552,
          "column": 4
        },
        "end": {
          "line": 573,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal method to read specific this properties and\napply the results to the this afterwards."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "coords {Map} Location of the object to align the this to. This map\nshould have the keys <code>left</code>, <code>top</code>, <code>right</code>\nand <code>bottom</code>.",
            "paramName": "coords",
            "description": " Location of the object to align the this to. This map\nshould have the keys <code>left</code>, <code>top</code>, <code>right</code>\nand <code>bottom</code>.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getPosition": {
      "type": "function",
      "name": "getPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPosition": {
      "type": "function",
      "name": "setPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPosition": {
      "type": "function",
      "name": "resetPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getPlaceMethod": {
      "type": "function",
      "name": "getPlaceMethod",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPlaceMethod": {
      "type": "function",
      "name": "setPlaceMethod",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPlaceMethod": {
      "type": "function",
      "name": "resetPlaceMethod",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getDomMove": {
      "type": "function",
      "name": "getDomMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isDomMove": {
      "type": "function",
      "name": "isDomMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDomMove": {
      "type": "function",
      "name": "setDomMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDomMove": {
      "type": "function",
      "name": "resetDomMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getPlacementModeX": {
      "type": "function",
      "name": "getPlacementModeX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPlacementModeX": {
      "type": "function",
      "name": "setPlacementModeX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPlacementModeX": {
      "type": "function",
      "name": "resetPlacementModeX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getPlacementModeY": {
      "type": "function",
      "name": "getPlacementModeY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPlacementModeY": {
      "type": "function",
      "name": "setPlacementModeY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPlacementModeY": {
      "type": "function",
      "name": "resetPlacementModeY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOffsetLeft": {
      "type": "function",
      "name": "getOffsetLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOffsetLeft": {
      "type": "function",
      "name": "setOffsetLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOffsetLeft": {
      "type": "function",
      "name": "resetOffsetLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOffsetTop": {
      "type": "function",
      "name": "getOffsetTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOffsetTop": {
      "type": "function",
      "name": "setOffsetTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOffsetTop": {
      "type": "function",
      "name": "resetOffsetTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOffsetRight": {
      "type": "function",
      "name": "getOffsetRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOffsetRight": {
      "type": "function",
      "name": "setOffsetRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOffsetRight": {
      "type": "function",
      "name": "resetOffsetRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOffsetBottom": {
      "type": "function",
      "name": "getOffsetBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOffsetBottom": {
      "type": "function",
      "name": "setOffsetBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOffsetBottom": {
      "type": "function",
      "name": "resetOffsetBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOffset": {
      "type": "function",
      "name": "getOffset",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOffset": {
      "type": "function",
      "name": "setOffset",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOffset": {
      "type": "function",
      "name": "resetOffset",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 577,
        "column": 2
      },
      "end": {
        "line": 580,
        "column": 3
      }
    }
  },
  "descendants": []
}