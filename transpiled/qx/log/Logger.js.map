{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/qx-osparc-theme/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/log/Logger.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__level",
    "setLevel",
    "value",
    "getLevel",
    "setTreshold",
    "__buffer",
    "setMaxMessages",
    "getTreshold",
    "getMaxMessages",
    "__appenders",
    "__appendersByName",
    "__filters",
    "__id",
    "register",
    "appender",
    "$$id",
    "id",
    "appenderName",
    "classname",
    "entries",
    "getAllLogEvents",
    "i",
    "l",
    "length",
    "entry",
    "appenders",
    "__getAppenders",
    "loggerName",
    "level",
    "process",
    "unregister",
    "addFilter",
    "logger",
    "RegExp",
    "push",
    "loggerMatch",
    "resetFilters",
    "debug",
    "object",
    "message",
    "log",
    "Logger",
    "__log",
    "arguments",
    "info",
    "warn",
    "error",
    "trace",
    "isLoggerEnabled",
    "dev",
    "StackTrace",
    "getStackTrace",
    "args",
    "lang",
    "Array",
    "fromArguments",
    "join",
    "deprecatedMethodWarning",
    "fcn",
    "msg",
    "functionName",
    "Function",
    "getName",
    "deprecatedClassWarning",
    "clazz",
    "className",
    "deprecatedEventWarning",
    "event",
    "self",
    "deprecatedMixinWarning",
    "mixinName",
    "name",
    "deprecatedConstantWarning",
    "constant",
    "__defineGetter__",
    "constantValue",
    "deprecateMethodOverriding",
    "baseclass",
    "methodName",
    "constructor",
    "prototype",
    "hasOwnProperty",
    "superclass",
    "clear",
    "clearHistory",
    "RingBuffer",
    "__levels",
    "__appendersCache",
    "__getLoggerName",
    "Object",
    "keys",
    "start",
    "items",
    "__serialize",
    "time",
    "Date",
    "offset",
    "LOADSTART",
    "win",
    "window",
    "isQxCoreObject",
    "toHashCode",
    "$$type",
    "levels",
    "cacheId",
    "undefined",
    "filter",
    "test",
    "__detect",
    "type",
    "nodeType",
    "Error",
    "toString",
    "deep",
    "text",
    "nodeValue",
    "nodeName",
    "toLowerCase",
    "getStackTraceFromError",
    "basename",
    "temp",
    "sorted",
    "key",
    "sort",
    "number",
    "defer",
    "logs",
    "$$logs"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * John Spackman (john.spackman@zenesis.com)\n\n************************************************************************ */\n\n/**\n * Main qooxdoo logging class.\n *\n * Used as central logging feature by qx.core.Object.\n *\n * Extremely modular and lightweight to support logging at bootstrap and\n * at shutdown as well.\n *\n * * Supports dynamic appenders to push the output to the user\n * * Supports buffering of the last 50 messages (configurable)\n * * Supports different debug levels (\"debug\", \"info\", \"warn\" or \"error\")\n * * Simple data serialization for incoming messages\n *\n * Typical use of this class is via qx.core.MLogging which is included into most\n * classes, so you would use \"this.debug(...)\" etc, but qx.log.Logger.debug(),\n * .warn(), .error(), .info(), and .trace() can be used directly for static code.\n *\n * The first parameter is expected to be the context object, ie the object which\n * is sending the log; this can be null but that will prevent the filtering from\n * filtering on class name so ideally it will be a real qx.core.Object derived\n * object.  Other parameters are any Javascript object which will be serialized\n * into the log message\n *\n * <pre class=\"javascript\">\n *  qx.log.Logger.warn(myObject, \"This is a message to log\", myParam, otherData);\n * </pre>\n *\n *\n * The output of logging is controlled by \"appenders\", which are classes that\n * accept a log message and output it somehow (see examples in qx.log.appender.*);\n * typical examples are qx.log.appender.Console which outputs to the browser\n * console, or qx.log.appender.Native which outputs messages into a popup\n * window as part of your Qooxdoo UI.\n *\n * While it's quick and easy to add logging calls to code as and when you need it,\n * it is often convenient to control which logging calls output messages at runtime\n * rather than having to edit code. @see qx.log.Logger#addFilter\n *\n * @require(qx.dev.StackTrace)\n */\nqx.Bootstrap.define(\"qx.log.Logger\",\n{\n  statics :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      CONFIGURATION\n    ---------------------------------------------------------------------------\n    */\n\n    __level : \"debug\",\n\n\n    /**\n     * Configures the minimum log level required for new messages.\n     *\n     * @param value {String} One of \"debug\", \"info\", \"warn\" or \"error\".\n     */\n    setLevel : function(value) {\n      this.__level = value;\n    },\n\n\n    /**\n     * Returns the currently configured minimum log level required for new\n     * messages.\n     *\n     * @return {Integer} Debug level\n     */\n    getLevel : function() {\n      return this.__level;\n    },\n\n\n    /**\n     * Configures the number of messages to be kept in the buffer.\n     *\n     * @param value {Integer} Any positive integer\n     */\n    setTreshold : function(value) {\n      this.__buffer.setMaxMessages(value);\n    },\n\n\n    /**\n     * Returns the currently configured number of messages to be kept in the\n     * buffer.\n     *\n     * @return {Integer} Treshold value\n     */\n    getTreshold : function() {\n      return this.__buffer.getMaxMessages();\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPENDER MANAGEMENT\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Map} Map of all known appenders by ID */\n    __appenders : [],\n\n\n    /** @type {Map} Map of all known appenders by name */\n    __appendersByName: {},\n\n\n    /** @type {Array} Array of filters to apply when selecting appenders to append to */\n    __filters: [],\n\n\n    /** @type {Integer} Last free appender ID */\n    __id : 0,\n\n\n    /**\n     * Registers the given appender and inserts the last cached messages.\n     * \n     * Note that an appender is named by it's class name, unless it has a property\n     * called `appenderName`\n     *\n     * @param appender {Class} A static appender class supporting at\n     *   least a <code>process()</code> method to handle incoming messages.\n     */\n    register : function(appender)\n    {\n      if (appender.$$id) {\n        return;\n      }\n\n      // Register appender\n      var id = this.__id++;\n      var appenderName = appender.appenderName || appender.classname;\n      this.__appenders[id] = appender;\n      this.__appendersByName[appenderName] = appender;\n      appender.$$id = id;\n\n      // Insert previous messages\n      var entries = this.__buffer.getAllLogEvents();\n      for (var i=0, l=entries.length; i<l; i++) {\n        var entry = entries[i];\n\n        var appenders = this.__getAppenders(entry.loggerName, entry.level);\n        if (appenders[appenderName]) {\n          appender.process(entry);\n        }\n      }\n    },\n\n\n    /**\n     * Unregisters the given appender\n     *\n     * @param appender {Class} A static appender class\n     */\n    unregister : function(appender)\n    {\n      var id = appender.$$id;\n      if (id == null) {\n        return;\n      }\n\n      var appenderName = appender.appenderName || appender.classname;\n      delete this.__appendersByName[appenderName];\n      delete this.__appenders[id];\n      delete appender.$$id;\n    },\n\n\n    /**\n     * Adds a filter that specifies the appenders to use for a given logger name (classname).\n     *\n     * By default, every log entry is output to all appenders but you can change this\n     * behaviour by calling qx.log.Logger.addFilter; every log message is associated\n     * with a class and a logging level (ie debug, warn, info, error, etc) and you can\n     * apply a filter on either one.\n     *\n     * For example, to restrict the output to only allow qx.ui.* classes to output debug\n     * logging information you would use this:\n     *\n     *  <pre class=\"javascript\">\n     *    qx.log.Logger.addFilter(/^qx\\.ui/, null, \"debug\");\n     *  </pre>\n     *\n     * Note that while the default is to log everything, as soon as you apply one filter\n     * you are specifying an exhaustive list of classes; so if you use the above example,\n     * the ONLY classes that will be able to log is qx.ui.*.  If you want to use multiple\n     * classes to the output, just add more addFilter calls.\n     *\n     * The logging level (eg \"debug\", \"error\", etc) is greater than or equal to - so in\n     * the above example, debug, error, warn, and info will be output but trace will not.\n     *\n     * The second parameter to addFilter is the classname of the appender to use; this\n     * allows you to specify that log messages only go to one destination; for example:\n     *\n     *  <pre class=\"javascript\">\n     *    qx.log.Logger.addFilter(/^qx\\.ui/, \"qx.log.appender.Console\", \"warn\");\n     *    qx.log.Logger.addFilter(/^qx\\.io/, \"qx.log.appender.Native\", \"debug\");\n     *    qx.log.Logger.addFilter(/^qx\\.io/, \"qx.log.appender.Console\", \"error\");\n     *  </pre>\n     *\n     * In this example, qx.ui.* will only go to the Console appender and only if a warning\n     * is issued; qx.io.* will go to Native for debug, error, warn, and info and to\n     * Console for error, warn, and info\n     *\n     * Note that an appender is named by it's class name, unless it has a property\n     * called `appenderName`.\n     * \n     * @param logger {String|RegExp} the pattern to match in the logger name\n     * @param appenderName {String?} the name of the appender class, if undefined then all appenders\n     * @param level {String?} the minimum logging level to use the appender, if undefined the default level is used\n     */\n    addFilter: function(logger, appenderName, level) {\n      if (typeof logger == \"string\") {\n        logger = new RegExp(logger);\n      }\n      this.__filters.push({ loggerMatch: logger, level: level||this.__level, appenderName: appenderName });\n    },\n\n    /**\n     * Reset all filters\n     */\n    resetFilters: function() {\n      this.__filters = [];\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      USER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sending a message at level \"debug\" to the logger.\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    debug : function(object, message) {\n      qx.log.Logger.__log(\"debug\", arguments);\n    },\n\n\n    /**\n     * Sending a message at level \"info\" to the logger.\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    info : function(object, message) {\n      qx.log.Logger.__log(\"info\", arguments);\n    },\n\n\n    /**\n     * Sending a message at level \"warn\" to the logger.\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    warn : function(object, message) {\n      qx.log.Logger.__log(\"warn\", arguments);\n    },\n\n\n    /**\n     * Sending a message at level \"error\" to the logger.\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    error : function(object, message) {\n      qx.log.Logger.__log(\"error\", arguments);\n    },\n\n\n    /**\n     * Prints the current stack trace at level \"info\"\n     *\n     * @param object {Object?} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    trace : function(object, message) {\n      if (qx.log.Logger.isLoggerEnabled(\"trace\", object)) {\n        var trace = qx.dev.StackTrace.getStackTrace();\n        var args = qx.lang.Array.fromArguments(arguments);\n        args.push(trace.join(\"\\n\"));\n        qx.log.Logger.__log(\"trace\", args);\n      }\n    },\n\n\n    /**\n     * Prints a method deprecation warning and a stack trace if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     * @param fcn {Function} reference to the deprecated function. This is\n     *     arguments.callee if the calling method is to be deprecated.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecatedMethodWarning : function(fcn, msg)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        var functionName = qx.lang.Function.getName(fcn);\n        this.warn(\n          \"The method '\"+ functionName + \"' is deprecated: \" +\n          (msg || \"Please consult the API documentation of this method for alternatives.\")\n        );\n        this.trace();\n      }\n    },\n\n\n    /**\n     * Prints a class deprecation warning and a stack trace if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     * @param clazz {Class} reference to the deprecated class.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecatedClassWarning : function(clazz, msg)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        var className = clazz.classname || \"unknown\";\n        this.warn(\n          \"The class '\"+className+\"' is deprecated: \" +\n          (msg || \"Please consult the API documentation of this class for alternatives.\")\n        );\n        this.trace();\n      }\n    },\n\n\n    /**\n     * Prints an event deprecation warning and a stack trace if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     * @param clazz {Class} reference to the deprecated class.\n     * @param event {String} deprecated event name.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecatedEventWarning : function(clazz, event, msg)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        var className = clazz.self ? clazz.self.classname : \"unknown\";\n        this.warn(\n          \"The event '\"+(event || \"unknown\")+\"' from class '\"+className+\"' is deprecated: \" +\n          (msg || \"Please consult the API documentation of this class for alternatives.\")\n        );\n        this.trace();\n      }\n    },\n\n\n    /**\n     * Prints a mixin deprecation warning and a stack trace if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     * @param clazz {Class} reference to the deprecated mixin.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecatedMixinWarning : function(clazz, msg)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        var mixinName = clazz ? clazz.name : \"unknown\";\n        this.warn(\n          \"The mixin '\"+mixinName+\"' is deprecated: \" +\n          (msg || \"Please consult the API documentation of this class for alternatives.\")\n        );\n        this.trace();\n      }\n    },\n\n\n    /**\n     * Prints a constant deprecation warning and a stacktrace if the setting\n     * <code>qx.debug</code> is set to <code>true</code> AND the browser supports\n     * __defineGetter__!\n     *\n     * @param clazz {Class} The class the constant is attached to.\n     * @param constant {String} The name of the constant as string.\n     * @param msg {String} Optional message to be printed.\n     */\n    deprecatedConstantWarning : function(clazz, constant, msg)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        // check if __defineGetter__ is available\n        if (clazz.__defineGetter__) {\n          var self = this;\n          var constantValue = clazz[constant];\n          clazz.__defineGetter__(constant, function() {\n            self.warn(\n              \"The constant '\"+ constant + \"' is deprecated: \" +\n              (msg || \"Please consult the API documentation for alternatives.\")\n            );\n            self.trace();\n            return constantValue;\n          });\n        }\n      }\n    },\n\n\n    /**\n     * Prints a deprecation warning and a stacktrace when a subclass overrides\n     * the passed method name. The deprecation is only printed if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     *\n     * @param object {qx.core.Object} Instance to check for overriding.\n     * @param baseclass {Class} The baseclass as starting point.\n     * @param methodName {String} The method name which is deprecated for overriding.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecateMethodOverriding : function(object, baseclass, methodName, msg)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        var clazz = object.constructor;\n\n        while(clazz.classname !== baseclass.classname)\n        {\n          if (clazz.prototype.hasOwnProperty(methodName))\n          {\n            this.warn(\n              \"The method '\" + qx.lang.Function.getName(object[methodName]) +\n              \"' overrides a deprecated method: \" +\n              (msg || \"Please consult the API documentation for alternatives.\")\n            );\n            this.trace();\n            break;\n          }\n          clazz = clazz.superclass;\n        }\n      }\n    },\n\n\n    /**\n     * Deletes the current buffer. Does not influence message handling of the\n     * connected appenders.\n     *\n     */\n    clear : function() {\n      this.__buffer.clearHistory();\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL LOGGING IMPLEMENTATION\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {qx.log.appender.RingBuffer} Message buffer of previously fired messages. */\n    __buffer : new qx.log.appender.RingBuffer(50),\n\n\n    /** @type {Map} Numeric translation of log levels */\n    __levels :\n    {\n      trace: 0,\n      debug : 1,\n      info : 2,\n      warn : 3,\n      error : 4\n    },\n\n    /** @type {Map} cache of appenders for a given logger and level */\n    __appendersCache: {},\n\n\n    /**\n     * Detects the name of the logger to use for an object\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @return {String} Logger name\n     */\n    __getLoggerName: function(object) {\n      if (object) {\n        if (object.classname) {\n          return object.classname;\n        }\n        if (typeof object == \"string\") {\n          return object;\n        }\n      }\n      return \"[default]\";\n    },\n\n\n    /**\n     * Detects whether a logger level is enabled for an object\n     *\n     * @param level {String} One of \"trace\", \"debug\", \"info\", \"warn\" or \"error\"\n     * @param object {Object} Contextual object (either instance or static class)\n     * @return {Boolean} True if the logger is enabled\n     */\n    isLoggerEnabled: function(level, object) {\n      var loggerName = this.__getLoggerName(object);\n      var appenders = this.__getAppenders(loggerName, level);\n      return !!Object.keys(appenders).length;\n    },\n\n\n    /**\n     * Internal logging main routine.\n     *\n     * @param level {String} One of \"trace\", \"debug\", \"info\", \"warn\" or \"error\"\n     * @param args {Array} List of other arguments, where the first is\n     *   taken as the context object.\n     */\n    __log : function(level, args)\n    {\n      // Get object and determine appenders\n      var object = args.length < 2 ? null : args[0];\n      var loggerName = this.__getLoggerName(object);\n      var appenders = this.__getAppenders(loggerName, level);\n      if (!Object.keys(appenders).length) {\n        return;\n      }\n\n      // Serialize and cache\n      var start = object ? 1 : 0;\n      var items = [];\n      for (var i=start, l=args.length; i<l; i++) {\n        items.push(this.__serialize(args[i], true));\n      }\n\n      // Build entry\n      var time = new Date;\n      var entry =\n      {\n        time : time,\n        offset : time-qx.Bootstrap.LOADSTART,\n        level: level,\n        loggerName: loggerName,\n        items: items,\n        // store window to allow cross frame logging\n        win: window\n      };\n\n      // Add relation fields\n      if (object)\n      {\n        if (qx.Bootstrap.isQxCoreObject(object)) {\n          entry.object = object.toHashCode();\n        }\n        if (object.$$type) {\n          entry.clazz = object;\n        } else if (object.constructor) {\n          entry.clazz = object.constructor;\n        }\n      }\n\n      this.__buffer.process(entry);\n\n      // Send to appenders\n      for (var classname in appenders) {\n        appenders[classname].process(entry);\n      }\n    },\n\n\n    /**\n     * Finds the appenders for a given classname\n     *\n     * @param className {String} Name of the class\n     * @param level {String} the minimum logging level to use the appender\n     * @return {Array} list of appenders\n     */\n    __getAppenders: function(className, level) {\n      var levels = this.__levels;\n\n      // If no filters, then all appenders apply\n      if (!this.__filters.length) {\n        // Check the default level\n        if (levels[level] < levels[this.__level]) {\n          return [];\n        }\n        return this.__appendersByName;\n      }\n\n      // Check the cache\n      var cacheId = className + \"|\" + level;\n      var appenders = this.__appendersCache[cacheId];\n      if (appenders !== undefined) {\n        return appenders;\n      }\n\n      var appenders = {};\n      for (var i = 0; i < this.__filters.length; i++) {\n        var filter = this.__filters[i];\n\n        // Filters only apply to certain levels\n        if (levels[level] < levels[filter.level]) {\n          continue;\n        }\n\n        // No duplicates\n        if (filter.appenderName && appenders[filter.appenderName]) {\n          continue;\n        }\n\n        // Test\n        if (!filter.loggerMatch || filter.loggerMatch.test(className)) {\n          if (filter.appenderName) {\n            appenders[filter.appenderName] = this.__appendersByName[filter.appenderName];\n          }\n          else {\n            return this.__appendersCache[cacheId] = this.__appendersByName;\n          }\n        }\n      }\n\n      return this.__appendersCache[cacheId] = appenders;\n    },\n\n\n\n    /**\n     * Detects the type of the variable given.\n     *\n     * @param value {var} Incoming value\n     * @return {String} Type of the incoming value. Possible values:\n     *   \"undefined\", \"null\", \"boolean\", \"number\", \"string\",\n     *   \"function\", \"array\", \"error\", \"map\",\n     *   \"class\", \"instance\", \"node\", \"stringify\", \"unknown\"\n     */\n    __detect : function(value)\n    {\n      if (value === undefined) {\n        return \"undefined\";\n      } else if (value === null) {\n        return \"null\";\n      }\n\n      if (value.$$type) {\n        return \"class\";\n      }\n\n      var type = typeof value;\n\n      if (type === \"function\" || type == \"string\" || type === \"number\" || type === \"boolean\") {\n        return type;\n      }\n\n      else if (type === \"object\")\n      {\n        if (value.nodeType) {\n          return \"node\";\n          // In Gecko, DOMException doesn't inherit from Error\n        } else if (value instanceof Error || (value.name && value.message)) {\n          return \"error\";\n        } else if (value.classname) {\n          return \"instance\";\n        } else if (value instanceof Array) {\n          return \"array\";\n        } else if (value instanceof Date) {\n          return \"date\";\n        } else {\n          return \"map\";\n        }\n      }\n\n      if (value.toString) {\n        return \"stringify\";\n      }\n\n      return \"unknown\";\n    },\n\n\n    /**\n     * Serializes the incoming value. If it is a singular value, the result is\n     * a simple string. For an array or a map the result can also be a\n     * serialized string of a limited number of individual items.\n     *\n     * @param value {var} Incoming value\n     * @param deep {Boolean?false} Whether arrays and maps should be\n     *    serialized for a limited number of items\n     * @return {Map} Contains the keys <code>type</code>, <code>text</code> and\n     * <code>trace</code>.\n     */\n    __serialize : function(value, deep)\n    {\n      var type = this.__detect(value);\n      var text = \"unknown\";\n      var trace = [];\n\n      switch(type)\n      {\n        case \"null\":\n        case \"undefined\":\n          text = type;\n          break;\n\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n        case \"date\":\n          text = value;\n          break;\n\n        case \"node\":\n          if (value.nodeType === 9)\n          {\n            text = \"document\";\n          }\n          else if (value.nodeType === 3)\n          {\n            text = \"text[\" + value.nodeValue + \"]\";\n          }\n          else if (value.nodeType === 1)\n          {\n            text = value.nodeName.toLowerCase();\n            if (value.id) {\n              text += \"#\" + value.id;\n            }\n          }\n          else\n          {\n            text = \"node\";\n          }\n          break;\n\n        case \"function\":\n          text = qx.lang.Function.getName(value) || type;\n          break;\n\n        case \"instance\":\n        case \"class\":\n        case \"stringify\":\n          text = value.toString();\n          break;\n\n        case \"error\":\n          trace = qx.dev.StackTrace.getStackTraceFromError(value);\n          text = (value.basename ? value.basename + \": \" : \"\") +\n                 value.toString();\n          break;\n\n        case \"array\":\n          if (deep)\n          {\n            text = [];\n            for (var i=0, l=value.length; i<l; i++)\n            {\n              if (text.length > 20)\n              {\n                text.push(\"...(+\" + (l-i) + \")\");\n                break;\n              }\n\n              text.push(this.__serialize(value[i], false));\n            }\n          }\n          else\n          {\n            text = \"[...(\" + value.length + \")]\";\n          }\n          break;\n\n        case \"map\":\n          if (deep)\n          {\n            var temp;\n\n            // Produce sorted key list\n            var sorted = [];\n            for (var key in value) {\n              sorted.push(key);\n            }\n            sorted.sort();\n\n            // Temporary text list\n            text = [];\n            for (var i=0, l=sorted.length; i<l; i++)\n            {\n              if (text.length > 20)\n              {\n                text.push(\"...(+\" + (l-i) + \")\");\n                break;\n              }\n\n              // Additional storage of hash-key\n              key = sorted[i];\n              temp = this.__serialize(value[key], false);\n              temp.key = key;\n              text.push(temp);\n            }\n          }\n          else\n          {\n            var number=0;\n            for (var key in value) {\n              number++;\n            }\n            text = \"{...(\" + number + \")}\";\n          }\n          break;\n      }\n\n      return {\n        type : type,\n        text : text,\n        trace : trace\n      };\n    }\n  },\n\n\n  defer : function(statics)\n  {\n    var logs = qx.Bootstrap.$$logs;\n    for (var i=0; i<logs.length; i++) {\n      statics.__log(logs[i][0], logs[i][1]);\n    }\n\n    qx.Bootstrap.debug = statics.debug;\n    qx.Bootstrap.info = statics.info;\n    qx.Bootstrap.warn = statics.warn;\n    qx.Bootstrap.error = statics.error;\n    qx.Bootstrap.trace = statics.trace;\n  }\n});\n"
  ]
}