{
  "className": "qx.core.Property",
  "packageName": "qx.core",
  "name": "Property",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 170,
        "column": 0
      },
      "end": {
        "line": 1900,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nMartin Wittemann (martinwittemann)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Internal class for handling of dynamic properties. Should only be used\nthrough the methods provided by {@link qx.Class}.\n\nFor a complete documentation of properties take a look at\nhttp://manual.qooxdoo.org/${qxversion}/pages/core.html#properties.\n\n\n*Normal properties*\n\nThe <code>properties</code> key in the class definition map of {@link qx.Class#define}\nis used to generate the properties.\n\nValid keys of a property definition are:\n\n<table>\n<tr><th>Name</th><th>Type</th><th>Description</th></tr>\n<tr><th>check</th><td>Array, String, Function</td><td>\nThe check is used to check the type the incoming value of a property. This will only\nbe executed in the source version. The build version will not contain the checks.\nThe check can be:\n<ul>\n<li>a custom check function. The function takes the incoming value as a parameter and must\nreturn a boolean value to indicate whether the values is valid.\n</li>\n<li>inline check code as a string e.g. <code>\"value &gt; 0 && value &lt; 100\"</code></li>\n<li>a class name e.g. <code>qx.ui.form.Button</code></li>\n<li>a name of an interface the value must implement</li>\n<li>an array of all valid values</li>\n<li>one of the predefined checks: Boolean, String, Number, Integer, Float, Double,\nObject, Array, Map, Class, Mixin, Interface, Theme, Error, RegExp, Function,\nDate, Node, Element, Document, Window, Event\n</li>\n<ul>\n</td></tr>\n<tr><th>init</th><td>var</td><td>\nSets the default/initial value of the property. If no property value is set or the property\ngets reset, the getter will return the <code>init</code> value.\n</td></tr>\n<tr><th>apply</th><td>String</td><td>\nOn change of the property value the method of the specified name will be called. The signature of\nthe method is <code>function(newValue, oldValue, propertyName)</code>. It is conventional to name\nthe callback <code>_apply</code> + <i>PropertyName</i>, with the property name camel-cased (e.g.\n\"<i>_applyFooBar</i>\" for a property <i>fooBar</i>).\n</td></tr>\n<tr><th>event</th><td>String</td><td>\nOn change of the property value an event with the given name will be dispatched. The event type is\n{@link qx.event.type.Data}.\n</td></tr>\n<tr><th>themeable</th><td>Boolean</td><td>\nWhether this property can be set using themes.\n</td></tr>\n<tr><th>inheritable</th><td>Boolean</td><td>\nWhether the property value should be inheritable. If the property does not have an user defined or an\ninit value, the property will try to get the value from the parent of the current object.\n</td></tr>\n<tr><th>nullable</th><td>Boolean</td><td>\nWhether <code>null</code> is an allowed value of the property. This is complementary to the check\ndefined using the <code>check</code> key.\n</td></tr>\n<tr><th>refine</th><td>Boolean</td><td>\nWhether the property definition is a refinement of a property in one of the super classes of the class.\nOnly the <code>init</code> value can be changed using refine.\n</td></tr>\n<tr><th>transform</th><td>String</td><td>\nOn setting of the property value the method of the specified name will\nbe called. The signature of the method is <code>function(value, oldValue)</code>.\nThe parameter <code>value</code> is the value passed to the setter, the\nparameter <code>oldValue</code> is the current value, or undefined if no value\nhas been set previously.\nThe function must return the modified or unmodified value.\nTransformation occurs before the check function, so both may be\nspecified if desired.  Alternatively, the transform function may throw\nan error if the value passed to it is invalid.\n</td></tr>\n<tr><th>validate</th><td>Function, String</td><td>\nOn setting of the property value the method of the specified name will\nbe called. The signature of the method is <code>function(value)</code>.\nThe parameter <code>value</code> is the value passed to the setter.\nIf the validation fails, an <code>qx.core.ValidationError</code> should\nbe thrown by the validation function. Otherwise, just do nothing in the\nfunction.<br>\nIf a string is given, the string should hold a reference to a member\nmethod.<br>\n<code>\"<i>methodname</i>\"</code> for example\n<code>\"__validateProperty\"</code><br>\nThere are some default validators in the {@link qx.util.Validate} class.\nSee this documentation for usage examples.\n</td></tr>\n<tr><th>dereference</th><td>Boolean</td><td>\nBy default, the references to the values (current, init, ...) of the\nproperty will be stored as references on the object. When disposing\nthis object, the references will not be deleted. Setting the\ndereference key to true tells the property system to delete all\nconnections made by this property on dispose. This can be necessary for\ndisconnecting DOM objects to allow the garbage collector to work\nproperly.\n</td></tr>\n<tr><th>deferredInit</th><td>Boolean</td><td>\nAllow for a deferred initialization for reference types. Defaults to false.\n</td></tr>\n<tr><th>isEqual</th><td>Function, String</td><td>\nOn setting of the property value the method of the specified name will\nbe called to test if two values are equal. These checks for equality are\nperformed by the Property-System to decide whether further actions (like\ne.g. calling applier methods or firing of events) are needed.\nThe signature of the method is <code>function(valueA, valueB)</code>.\n<br/>\nThe <i>isEqual</i>-value can be:\n<ul>\n<li>a custom check function.\nThe function takes two values as parameter and must return a\nboolean value to indicate whether the values are considered\nequal e.g. <code>function (a, b) { return Object.is(a, b); }</code>.</li>\n<li>inline check code as a string\nwhich will be invoked with two parameters <code>a</code> and\n<code>b</code> and results in a boolean value to indicate whether\nthe values are equal e.g. <code>\"a.length() == b.length()\"</code>.</li>\n<li>reference to a member method as string\n<code>\"<i>methodname</i>\"</code> which will be invoked with two\nparameters and returns a boolean value indicating whether the two\nvalues are considered equal for example <code>\"__areTheSame\"</code>.</li>\n</ul>\nThe default implementation (if this key is undefined) will check the\nequality by using the <i>identity</i> operator (===) as if defined like\n<code>\"a===b\"</code>.\n</td></tr>\n</table>\n\n*Property groups*\n\nProperty groups are defined in a similar way but support a different set of keys:\n\n<table>\n<tr><th>Name</th><th>Type</th><th>Description</th></tr>\n<tr><th>group</th><td>String[]</td><td>\nA list of property names which should be set using the property group.\n</td></tr>\n<tr><th>mode</th><td>String</td><td>\nIf mode is set to <code>\"shorthand\"</code>, the properties can be set using a CSS like shorthand mode.\n</td></tr>\n<tr><th>themeable</th><td>Boolean</td><td>\nWhether this property can be set using themes.\n</td></tr>\n</table>"
        }
      ],
      "@internal": [
        {
          "name": "@internal",
          "body": ""
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "qx.Interface"
        }
      ]
    }
  },
  "type": "class",
  "descendants": []
}