{
  "className": "qx.ui.form.ToggleButton",
  "packageName": "qx.ui.form",
  "name": "ToggleButton",
  "superClass": "qx.ui.basic.Atom",
  "interfaces": [
    "qx.ui.form.IBooleanForm",
    "qx.ui.form.IExecutable",
    "qx.ui.form.IRadioItem"
  ],
  "mixins": [
    "qx.ui.core.MExecutable"
  ],
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0
      },
      "end": {
        "line": 344,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nMartin Wittemann (martinwittemann)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "A toggle Button widget\n\nIf the user presses the button by tapping on it pressing the enter or\nspace key, the button toggles between the pressed an not pressed states."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 51,
        "column": 2
      },
      "end": {
        "line": 68,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": "Creates a ToggleButton."
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "label {String} The text on the button.",
          "paramName": "label",
          "description": " The text on the button.",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "icon {String} An URI to the icon of the button.",
          "paramName": "icon",
          "description": " An URI to the icon of the button.",
          "type": "String"
        }
      ]
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 81,
          "column": 4
        },
        "end": {
          "line": 85,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "defaultValue": "button",
      "overriddenFrom": "qx.ui.basic.Atom",
      "appearsIn": {
        "qx.ui.basic.Atom": "class",
        "qx.ui.core.Widget": "class"
      }
    },
    "focusable": {
      "location": {
        "start": {
          "line": 88,
          "column": 4
        },
        "end": {
          "line": 92,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "focusable",
      "propertyType": "new",
      "refine": true,
      "defaultValue": true,
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "value": {
      "location": {
        "start": {
          "line": 95,
          "column": 4
        },
        "end": {
          "line": 102,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The value of the widget. True, if the widget is checked."
          }
        ]
      },
      "name": "value",
      "propertyType": "new",
      "event": "changeValue",
      "apply": "_applyValue",
      "allowNull": true,
      "check": "Boolean",
      "defaultValue": false
    },
    "group": {
      "location": {
        "start": {
          "line": 105,
          "column": 4
        },
        "end": {
          "line": 110,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The assigned qx.ui.form.RadioGroup which handles the switching between registered buttons."
          }
        ]
      },
      "name": "group",
      "propertyType": "new",
      "apply": "_applyGroup",
      "allowNull": true,
      "check": "qx.ui.form.RadioGroup"
    },
    "triState": {
      "location": {
        "start": {
          "line": 120,
          "column": 4
        },
        "end": {
          "line": 126,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the button has a third state. Use this for tri-state checkboxes.\n\nWhen enabled, the value null of the property value stands for \"undetermined\",\nwhile true is mapped to \"enabled\" and false to \"disabled\" as usual. Note\nthat the value property is set to false initially."
          }
        ]
      },
      "name": "triState",
      "propertyType": "new",
      "apply": "_applyTriState",
      "allowNull": true,
      "check": "Boolean"
    },
    "command": {
      "type": "property",
      "name": "command",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MExecutable"
    }
  },
  "members": {
    "_applyGroup": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 150,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The assigned {@link qx.ui.form.RadioGroup} which handles the switching between registered buttons"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyValue": {
      "location": {
        "start": {
          "line": 159,
          "column": 4
        },
        "end": {
          "line": 169,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Changes the state of the button dependent on the checked value."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "old {Boolean} Previous value",
            "paramName": "old",
            "description": " Previous value",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyTriState": {
      "location": {
        "start": {
          "line": 177,
          "column": 4
        },
        "end": {
          "line": 179,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Apply value property when triState property is modified."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "old {Boolean} Previous value",
            "paramName": "old",
            "description": " Previous value",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onExecute": {
      "location": {
        "start": {
          "line": 187,
          "column": 4
        },
        "end": {
          "line": 189,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handler for the execute event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} The execute event.",
            "paramName": "e",
            "description": " The execute event.",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerOver": {
      "location": {
        "start": {
          "line": 201,
          "column": 4
        },
        "end": {
          "line": 214,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener method for \"pointerover\" event.\n<ul>\n<li>Adds state \"hovered\"</li>\n<li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerOut": {
      "location": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 243,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener method for \"pointerout\" event.\n<ul>\n<li>Removes \"hovered\" state</li>\n<li>Adds \"abandoned\" state (if \"pressed\" state is set)</li>\n<li>Removes \"pressed\" state (if \"pressed\" state is set and button is not checked)\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer event",
            "paramName": "e",
            "description": " pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerDown": {
      "location": {
        "start": {
          "line": 256,
          "column": 4
        },
        "end": {
          "line": 269,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener method for \"pointerdown\" event.\n<ul>\n<li>Activates capturing</li>\n<li>Removes \"abandoned\" state</li>\n<li>Adds \"pressed\" state</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer event",
            "paramName": "e",
            "description": " pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerUp": {
      "location": {
        "start": {
          "line": 283,
          "column": 4
        },
        "end": {
          "line": 295,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener method for \"pointerup\" event.\n<ul>\n<li>Releases capturing</li>\n<li>Removes \"pressed\" state (if not \"abandoned\" state is set and \"pressed\" state is set)</li>\n<li>Removes \"abandoned\" state (if set)</li>\n<li>Toggles {@link #value} (if state \"abandoned\" is not set and state \"pressed\" is set)</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer event",
            "paramName": "e",
            "description": " pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onKeyDown": {
      "location": {
        "start": {
          "line": 305,
          "column": 4
        },
        "end": {
          "line": 316,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener method for \"keydown\" event.<br/>\nRemoves \"abandoned\" and adds \"pressed\" state\nfor the keys \"Enter\" or \"Space\""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Key event",
            "paramName": "e",
            "description": " Key event",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onKeyUp": {
      "location": {
        "start": {
          "line": 326,
          "column": 4
        },
        "end": {
          "line": 342,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener method for \"keyup\" event.<br/>\nRemoves \"abandoned\" and \"pressed\" state (if \"pressed\" state is set)\nfor the keys \"Enter\" or \"Space\". It also toggles the {@link #value} property."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Key event",
            "paramName": "e",
            "description": " Key event",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setValue": {
      "type": "function",
      "name": "setValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetValue": {
      "type": "function",
      "name": "resetValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getValue": {
      "type": "function",
      "name": "getValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setCommand": {
      "type": "function",
      "name": "setCommand",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.command.Command",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getCommand": {
      "type": "function",
      "name": "getCommand",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.command.Command",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "execute": {
      "type": "function",
      "name": "execute",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IExecutable"
    },
    "setGroup": {
      "type": "function",
      "name": "setGroup",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.form.RadioGroup",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getGroup": {
      "type": "function",
      "name": "getGroup",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.form.RadioGroup",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "__onCommandExecute": {
      "type": "function",
      "name": "__onCommandExecute",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MExecutable",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handler for the execute event of the command."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} The execute event of the command.",
            "paramName": "e",
            "description": " The execute event of the command.",
            "type": "qx.event.type.Event"
          }
        ]
      }
    },
    "_applyCommand": {
      "type": "function",
      "name": "_applyCommand",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MExecutable"
    },
    "resetCommand": {
      "type": "function",
      "name": "resetCommand",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "isValue": {
      "type": "function",
      "name": "isValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "resetGroup": {
      "type": "function",
      "name": "resetGroup",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getTriState": {
      "type": "function",
      "name": "getTriState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isTriState": {
      "type": "function",
      "name": "isTriState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setTriState": {
      "type": "function",
      "name": "setTriState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetTriState": {
      "type": "function",
      "name": "resetTriState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "descendants": [
    "qx.ui.toolbar.CheckBox",
    "qx.ui.form.CheckBox"
  ]
}