{
  "version": 3,
  "sources": [
    "VirtualSelectBox.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "core",
    "AbstractVirtualBox",
    "implement",
    "data",
    "controller",
    "ISelection",
    "IField",
    "construct",
    "model",
    "_createChildControl",
    "addListener",
    "_onPointerOver",
    "_onPointerOut",
    "__bindings",
    "initSelection",
    "getChildControl",
    "getSelection",
    "__searchTimer",
    "event",
    "Timer",
    "__preselect",
    "_updateSelectionValue",
    "properties",
    "appearance",
    "refine",
    "init",
    "width",
    "selection",
    "check",
    "apply",
    "nullable",
    "deferredInit",
    "events",
    "members",
    "__searchValue",
    "setValue",
    "selected",
    "resetSelection",
    "setItem",
    "getValue",
    "s",
    "length",
    "getItem",
    "resetValue",
    "removeAll",
    "syncWidget",
    "jobs",
    "_removeBindings",
    "_addBindings",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "Spacer",
    "_add",
    "flex",
    "ListItem",
    "setCenter",
    "setAnonymous",
    "basic",
    "Image",
    "_getAction",
    "keyIdentifier",
    "getKeyIdentifier",
    "isOpen",
    "isVisible",
    "isModifierPressed",
    "_isModifierPressed",
    "isPrintable",
    "atom",
    "modelPath",
    "_getBindPath",
    "bind",
    "push",
    "labelSourcePath",
    "getLabelPath",
    "getLabelOptions",
    "getIconPath",
    "iconSourcePath",
    "getIconOptions",
    "pop",
    "removeBinding",
    "_handlePointer",
    "type",
    "getType",
    "toggle",
    "_handleKeyboard",
    "action",
    "__convertKeyIdentifier",
    "restart",
    "isEnabled",
    "getTarget",
    "hasState",
    "removeState",
    "addState",
    "_applySelection",
    "value",
    "old",
    "setSelection",
    "queue",
    "Widget",
    "add",
    "stop",
    "searchValue",
    "getModel",
    "list",
    "_getLookupTable",
    "startIndex",
    "indexOf",
    "startRow",
    "_reverseLookup",
    "i",
    "row",
    "item",
    "_lookup",
    "SingleValueBinding",
    "resolvePropertyChain",
    "labelOptions",
    "converter",
    "util",
    "Delegate",
    "getMethod",
    "toLowerCase",
    "startsWith",
    "d",
    "getData",
    "removed",
    "fireDataEvent",
    "added",
    "destruct",
    "removeListener",
    "dispose",
    "VirtualSelectBox"
  ],
  "mappings": "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",
  "file": "VirtualSelectBox.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * A form virtual widget which allows a single selection. Looks somewhat like\n * a normal button, but opens a virtual list of items to select when tapping\n * on it.\n *\n * @childControl spacer {qx.ui.core.Spacer} Flexible spacer widget.\n * @childControl atom {qx.ui.basic.Atom} Shows the text and icon of the content.\n * @childControl arrow {qx.ui.basic.Image} Shows the arrow to open the drop-down\n *   list.\n */\nqx.Class.define(\"qx.ui.form.VirtualSelectBox\",\n{\n  extend : qx.ui.form.core.AbstractVirtualBox,\n  implement : [ qx.data.controller.ISelection, qx.ui.form.IField ],\n\n  construct : function(model)\n  {\n    this.base(arguments, model);\n\n    this._createChildControl(\"atom\");\n    this._createChildControl(\"spacer\");\n    this._createChildControl(\"arrow\");\n\n    // Register listener\n    this.addListener(\"pointerover\", this._onPointerOver, this);\n    this.addListener(\"pointerout\", this._onPointerOut, this);\n\n    this.__bindings = [];\n    this.initSelection(this.getChildControl(\"dropdown\").getSelection());\n\n    this.__searchTimer = new qx.event.Timer(500);\n    this.__searchTimer.addListener(\"interval\", this.__preselect, this);\n\n    this.getSelection().addListener(\"change\", this._updateSelectionValue, this);\n  },\n\n\n  properties :\n  {\n    // overridden\n    appearance :\n    {\n      refine : true,\n      init : \"virtual-selectbox\"\n    },\n\n\n    // overridden\n    width :\n    {\n      refine : true,\n      init : 120\n    },\n\n\n    /** Current selected items. */\n    selection :\n    {\n      check : \"qx.data.Array\",\n      event : \"changeSelection\",\n      apply : \"_applySelection\",\n      nullable : false,\n      deferredInit : true\n    }\n  },\n\n\n  events : {\n    /**\n     * This event is fired as soon as the content of the selection property changes, but\n     * this is not equal to the change of the selection of the widget. If the selection\n     * of the widget changes, the content of the array stored in the selection property\n     * changes. This means you have to listen to the change event of the selection array\n     * to get an event as soon as the user changes the selected item.\n     * <pre class=\"javascript\">obj.getSelection().addListener(\"change\", listener, this);</pre>\n     */\n    \"changeSelection\" : \"qx.event.type.Data\",\n\n    /** Fires after the value was modified */\n    \"changeValue\" : \"qx.event.type.Data\"\n  },\n\n\n  members :\n  {\n    /** @type {String} The search value to {@link #__preselect} an item. */\n    __searchValue : \"\",\n\n\n    /**\n     * @type {qx.event.Timer} The time which triggers the search for pre-selection.\n     */\n    __searchTimer : null,\n\n\n    /** @type {Array} Contains the id from all bindings. */\n    __bindings : null,\n\n\n    /**\n     * @param selected {var|null} Item to select as value.\n     * @returns {null|TypeError} The status of this operation.\n     */\n    setValue : function(selected) {\n      if (null === selected) {\n        this.resetSelection();\n        return null;\n      }\n\n      this.getSelection().setItem(0, selected);\n      return null;\n    },\n\n\n    /**\n     * @returns {null|var} The currently selected item or null if there is none.\n     */\n    getValue : function() {\n      var s = this.getSelection();\n      return (s.length === 0 ? null : s.getItem(0));\n    },\n\n\n    resetValue : function() {\n      this.getSelection().removeAll();\n    },\n\n\n    // overridden\n    syncWidget : function(jobs)\n    {\n      this._removeBindings();\n      this._addBindings();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAl API\n    ---------------------------------------------------------------------------\n    */\n\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"spacer\":\n          control = new qx.ui.core.Spacer();\n\n          this._add(control, {flex: 1});\n          break;\n\n        case \"atom\":\n          control = new qx.ui.form.ListItem(\"\");\n          control.setCenter(false);\n          control.setAnonymous(true);\n\n          this._add(control, {flex:1});\n          break;\n\n        case \"arrow\":\n          control = new qx.ui.basic.Image();\n          control.setAnonymous(true);\n\n          this._add(control);\n          break;\n      }\n\n      return control || this.base(arguments, id, hash);\n    },\n\n\n    // overridden\n    _getAction : function(event)\n    {\n      var keyIdentifier = event.getKeyIdentifier();\n      var isOpen = this.getChildControl(\"dropdown\").isVisible();\n      var isModifierPressed = this._isModifierPressed(event);\n\n      if (\n        !isOpen && !isModifierPressed &&\n        (keyIdentifier === \"Enter\" || keyIdentifier === \"Space\")\n      ) {\n        return \"open\";\n      } else if (isOpen && event.isPrintable()) {\n        return \"search\";\n      } else {\n        return this.base(arguments, event);\n      }\n    },\n\n    /**\n     * This method is called when the binding can be added to the\n     * widget. For e.q. bind the drop-down selection with the widget.\n     */\n    _addBindings : function()\n    {\n      var atom = this.getChildControl(\"atom\");\n\n      var modelPath = this._getBindPath(\"selection\", \"\");\n      var id = this.bind(modelPath, atom, \"model\", null);\n      this.__bindings.push(id);\n\n      var labelSourcePath = this._getBindPath(\"selection\", this.getLabelPath());\n      id = this.bind(labelSourcePath, atom, \"label\", this.getLabelOptions());\n      this.__bindings.push(id);\n\n      if (this.getIconPath() != null) {\n        var iconSourcePath = this._getBindPath(\"selection\", this.getIconPath());\n        id = this.bind(iconSourcePath, atom, \"icon\", this.getIconOptions());\n        this.__bindings.push(id);\n      }\n    },\n\n\n    /**\n     * This method is called when the binding can be removed from the\n     * widget. For e.q. remove the bound drop-down selection.\n     */\n    _removeBindings : function()\n    {\n      while (this.__bindings.length > 0)\n      {\n        var id = this.__bindings.pop();\n        this.removeBinding(id);\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n\n    // overridden\n    _handlePointer : function(event)\n    {\n      this.base(arguments, event);\n\n      var type = event.getType();\n      if (type === \"tap\") {\n        this.toggle();\n      }\n    },\n\n\n    // overridden\n    _handleKeyboard : function(event) {\n      var action = this._getAction(event);\n\n      switch(action)\n      {\n        case \"search\":\n          this.__searchValue += this.__convertKeyIdentifier(event.getKeyIdentifier());\n          this.__searchTimer.restart();\n          break;\n\n        default:\n          this.base(arguments, event);\n          break;\n      }\n    },\n\n\n    /**\n     * Listener method for \"pointerover\" event.\n     *\n     * <ul>\n     * <li>Adds state \"hovered\"</li>\n     * <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state\n     *   is set)</li>\n     * </ul>\n     *\n     * @param event {qx.event.type.Pointer} Pointer event\n     */\n    _onPointerOver : function(event)\n    {\n      if (!this.isEnabled() || event.getTarget() !== this) {\n        return;\n      }\n\n      if (this.hasState(\"abandoned\"))\n      {\n        this.removeState(\"abandoned\");\n        this.addState(\"pressed\");\n      }\n\n      this.addState(\"hovered\");\n    },\n\n\n    /**\n     * Listener method for \"pointerout\" event.\n     *\n     * <ul>\n     * <li>Removes \"hovered\" state</li>\n     * <li>Adds \"abandoned\" and removes \"pressed\" state (if \"pressed\" state\n     *   is set)</li>\n     * </ul>\n     *\n     * @param event {qx.event.type.Pointer} Pointer event\n     */\n    _onPointerOut : function(event)\n    {\n      if (!this.isEnabled() || event.getTarget() !== this) {\n        return;\n      }\n\n      this.removeState(\"hovered\");\n\n      if (this.hasState(\"pressed\"))\n      {\n        this.removeState(\"pressed\");\n        this.addState(\"abandoned\");\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n\n    // property apply\n    _applySelection : function(value, old)\n    {\n      this.getChildControl(\"dropdown\").setSelection(value);\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Preselects an item in the drop-down, when item starts with the\n     * __searchValue value.\n     */\n    __preselect : function()\n    {\n      this.__searchTimer.stop();\n\n      var searchValue = this.__searchValue;\n      if (searchValue === null || searchValue === \"\") {\n        return;\n      }\n\n      var model = this.getModel();\n      var list = this.getChildControl(\"dropdown\").getChildControl(\"list\");\n      var selection = list.getSelection();\n      var length = list._getLookupTable().length;\n      var startIndex = model.indexOf(selection.getItem(0));\n      var startRow = list._reverseLookup(startIndex);\n\n      for (var i = 1; i <= length; i++)\n      {\n        var row = (i + startRow) % length;\n        var item = model.getItem(list._lookup(row));\n        if (!item) {\n          // group items aren't in the model\n          continue;\n        }\n        var value = item;\n\n        if (this.getLabelPath())\n        {\n          value = qx.data.SingleValueBinding.resolvePropertyChain(item,\n            this.getLabelPath());\n\n          var labelOptions = this.getLabelOptions();\n          if (labelOptions)\n          {\n            var converter = qx.util.Delegate.getMethod(labelOptions,\n              \"converter\");\n\n            if (converter) {\n              value = converter(value, item);\n            }\n          }\n        }\n\n        if ( value.toLowerCase().startsWith(searchValue.toLowerCase()) )\n        {\n          selection.push(item);\n          break;\n        }\n      }\n      this.__searchValue = \"\";\n    },\n\n\n    /**\n     * Converts the keyIdentifier to a printable character e.q. <code>\"Space\"</code>\n     * to <code>\" \"</code>.\n     *\n     * @param keyIdentifier {String} The keyIdentifier to convert.\n     * @return {String} The converted keyIdentifier.\n     */\n    __convertKeyIdentifier : function(keyIdentifier)\n    {\n      if (keyIdentifier === \"Space\") {\n        return \" \";\n      } else {\n        return keyIdentifier;\n      }\n    },\n\n\n    /**\n     * Called when selection changes.\n     *\n     * @param event {qx.event.type.Data} {@link qx.data.Array} change event.\n     */\n    _updateSelectionValue : function(event) {\n      var d = event.getData();\n      var old = (d.removed.length ? d.removed[0] : null);\n      this.fireDataEvent(\"changeValue\", d.added[0], old);\n    }\n  },\n\n\n  destruct : function()\n  {\n    this._removeBindings();\n\n    this.getSelection().removeListener(\"change\", this._updateSelectionValue, this);\n\n    this.__searchTimer.removeListener(\"interval\", this.__preselect, this);\n    this.__searchTimer.dispose();\n    this.__searchTimer = null;\n  }\n});\n"
  ]
}