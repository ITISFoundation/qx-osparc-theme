{
  "className": "qx.bom.Font",
  "packageName": "qx.bom",
  "name": "Font",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 26,
        "column": 0
      },
      "end": {
        "line": 379,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nFabian Jakobs (fjakobs)\nMustafa Sak (msak)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "A wrapper for CSS font styles. Fond objects can be applied to instances\nof {@link qx.html.Element}."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 43,
        "column": 2
      },
      "end": {
        "line": 66,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "size {String?} The font size (Unit: pixel)",
          "paramName": "size",
          "description": " The font size (Unit: pixel)",
          "optional": true,
          "type": "String"
        },
        {
          "name": "@param",
          "body": "family {String[]?} A sorted list of font families",
          "paramName": "family",
          "description": " A sorted list of font families",
          "optional": true,
          "type": "String[]"
        }
      ]
    }
  },
  "properties": {
    "size": {
      "location": {
        "start": {
          "line": 184,
          "column": 4
        },
        "end": {
          "line": 189,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The font size (Unit: pixel)"
          }
        ]
      },
      "name": "size",
      "propertyType": "new",
      "apply": "_applySize",
      "allowNull": true,
      "check": "Integer"
    },
    "lineHeight": {
      "location": {
        "start": {
          "line": 195,
          "column": 4
        },
        "end": {
          "line": 200,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The line height as scaling factor of the default line height. A value\nof 1 corresponds to the default line height"
          }
        ]
      },
      "name": "lineHeight",
      "propertyType": "new",
      "apply": "_applyLineHeight",
      "allowNull": true,
      "check": "Number"
    },
    "comparisonString": {
      "location": {
        "start": {
          "line": 208,
          "column": 4
        },
        "end": {
          "line": 213,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Characters that are used to test if the font has loaded properly. These\ndefault to \"WEei\" in `qx.bom.webfont.Validator` and can be overridden\nfor certain cases like icon fonts that do not provide the predefined\ncharacters."
          }
        ]
      },
      "name": "comparisonString",
      "propertyType": "new",
      "allowNull": true,
      "check": "String"
    },
    "version": {
      "location": {
        "start": {
          "line": 226,
          "column": 4
        },
        "end": {
          "line": 233,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Version identifier that is appended to the URL to be loaded. Fonts\nthat are defined thru themes may be managed by the resource manager.\nIn this case updated fonts persist due to aggressive fontface caching\nof some browsers. To get around this, set the `version` property to\nthe version of your font. It will be appended to the CSS URL and forces\nthe browser to re-validate.\n\nThe version needs to be URL friendly, so only characters, numbers,\ndash and dots are allowed here."
          }
        ]
      },
      "name": "version",
      "propertyType": "new",
      "allowNull": true
    },
    "family": {
      "location": {
        "start": {
          "line": 236,
          "column": 4
        },
        "end": {
          "line": 241,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A sorted list of font families"
          }
        ]
      },
      "name": "family",
      "propertyType": "new",
      "apply": "_applyFamily",
      "allowNull": true,
      "check": "Array"
    },
    "bold": {
      "location": {
        "start": {
          "line": 244,
          "column": 4
        },
        "end": {
          "line": 249,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the font is bold"
          }
        ]
      },
      "name": "bold",
      "propertyType": "new",
      "apply": "_applyBold",
      "allowNull": true,
      "check": "Boolean"
    },
    "italic": {
      "location": {
        "start": {
          "line": 252,
          "column": 4
        },
        "end": {
          "line": 257,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the font is italic"
          }
        ]
      },
      "name": "italic",
      "propertyType": "new",
      "apply": "_applyItalic",
      "allowNull": true,
      "check": "Boolean"
    },
    "decoration": {
      "location": {
        "start": {
          "line": 260,
          "column": 4
        },
        "end": {
          "line": 265,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The text decoration for this font"
          }
        ]
      },
      "name": "decoration",
      "propertyType": "new",
      "apply": "_applyDecoration",
      "allowNull": true,
      "possibleValues": [
        "underline",
        "line-through",
        "overline"
      ]
    },
    "color": {
      "location": {
        "start": {
          "line": 268,
          "column": 4
        },
        "end": {
          "line": 273,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The text color for this font"
          }
        ]
      },
      "name": "color",
      "propertyType": "new",
      "apply": "_applyColor",
      "allowNull": true,
      "check": "Color"
    },
    "textShadow": {
      "location": {
        "start": {
          "line": 276,
          "column": 4
        },
        "end": {
          "line": 281,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The text shadow for this font"
          }
        ]
      },
      "name": "textShadow",
      "propertyType": "new",
      "apply": "_applyTextShadow",
      "allowNull": true,
      "check": "String"
    }
  },
  "members": {
    "__lookupMap": {
      "location": {
        "start": {
          "line": 295,
          "column": 4
        },
        "end": {
          "line": 295,
          "column": 22
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_applySize": {
      "location": {
        "start": {
          "line": 299,
          "column": 4
        },
        "end": {
          "line": 301,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyLineHeight": {
      "location": {
        "start": {
          "line": 304,
          "column": 4
        },
        "end": {
          "line": 306,
          "column": 5
        }
      },
      "type": "function",
      "access": "protected"
    },
    "_applyFamily": {
      "location": {
        "start": {
          "line": 310,
          "column": 4
        },
        "end": {
          "line": 333,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyBold": {
      "location": {
        "start": {
          "line": 337,
          "column": 4
        },
        "end": {
          "line": 339,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyItalic": {
      "location": {
        "start": {
          "line": 343,
          "column": 4
        },
        "end": {
          "line": 345,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyDecoration": {
      "location": {
        "start": {
          "line": 349,
          "column": 4
        },
        "end": {
          "line": 351,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyColor": {
      "location": {
        "start": {
          "line": 354,
          "column": 4
        },
        "end": {
          "line": 359,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyTextShadow": {
      "location": {
        "start": {
          "line": 362,
          "column": 4
        },
        "end": {
          "line": 364,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getStyles": {
      "location": {
        "start": {
          "line": 375,
          "column": 4
        },
        "end": {
          "line": 377,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get a map of all CSS styles, which will be applied to the widget. Only\nthe styles which are set are returned."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map containing the current styles. The keys are property\nnames which can directly be used with the <code>set</code> method of each\nwidget.",
            "type": "Map",
            "desc": " Map containing the current styles. The keys are property\nnames which can directly be used with the <code>set</code> method of each\nwidget."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSize": {
      "type": "function",
      "name": "getSize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSize": {
      "type": "function",
      "name": "setSize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetSize": {
      "type": "function",
      "name": "resetSize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getLineHeight": {
      "type": "function",
      "name": "getLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setLineHeight": {
      "type": "function",
      "name": "setLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetLineHeight": {
      "type": "function",
      "name": "resetLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getComparisonString": {
      "type": "function",
      "name": "getComparisonString",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setComparisonString": {
      "type": "function",
      "name": "setComparisonString",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetComparisonString": {
      "type": "function",
      "name": "resetComparisonString",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getVersion": {
      "type": "function",
      "name": "getVersion",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setVersion": {
      "type": "function",
      "name": "setVersion",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetVersion": {
      "type": "function",
      "name": "resetVersion",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getFamily": {
      "type": "function",
      "name": "getFamily",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Array",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setFamily": {
      "type": "function",
      "name": "setFamily",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Array",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetFamily": {
      "type": "function",
      "name": "resetFamily",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getBold": {
      "type": "function",
      "name": "getBold",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isBold": {
      "type": "function",
      "name": "isBold",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setBold": {
      "type": "function",
      "name": "setBold",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetBold": {
      "type": "function",
      "name": "resetBold",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getItalic": {
      "type": "function",
      "name": "getItalic",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isItalic": {
      "type": "function",
      "name": "isItalic",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setItalic": {
      "type": "function",
      "name": "setItalic",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetItalic": {
      "type": "function",
      "name": "resetItalic",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getDecoration": {
      "type": "function",
      "name": "getDecoration",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDecoration": {
      "type": "function",
      "name": "setDecoration",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDecoration": {
      "type": "function",
      "name": "resetDecoration",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getColor": {
      "type": "function",
      "name": "getColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Color",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setColor": {
      "type": "function",
      "name": "setColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Color",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetColor": {
      "type": "function",
      "name": "resetColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getTextShadow": {
      "type": "function",
      "name": "getTextShadow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setTextShadow": {
      "type": "function",
      "name": "setTextShadow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetTextShadow": {
      "type": "function",
      "name": "resetTextShadow",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "descendants": [
    "qx.bom.webfonts.WebFont"
  ]
}