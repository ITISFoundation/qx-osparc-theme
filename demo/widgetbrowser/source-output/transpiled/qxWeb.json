{
  "className": "qxWeb",
  "packageName": null,
  "name": "qxWeb",
  "superClass": "qx.type.BaseArray",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 40,
        "column": 0
      },
      "end": {
        "line": 496,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2012 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nMartin Wittemann (wittemann)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The Core module's responsibility is to query the DOM for elements and offer\nthese elements as a collection. The Core module itself does not offer any methods to\nwork with the collection. These methods are added by the other included modules,\nsuch as Manipulating or Attributes.\n\nCore also provides the plugin API which allows modules to attach either\nstatic functions to the global <code>q</code> object or define methods on the\ncollection it returns.\n\nBy default, the core module is assigned to a global module named <code>q</code>.\nIn case <code>q</code> is already defined, the name <code>qxWeb</code>\nis used instead.\n\nFor further details, take a look at the documentation in the\n<a href='http://manual.qooxdoo.org/${qxversion}/pages/website.html' target='_blank'>user manual</a>."
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "q"
        }
      ],
      "@group": [
        {
          "name": "@group",
          "body": "Core"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 238,
        "column": 2
      },
      "end": {
        "line": 263,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "Primary usage:\nAccepts a selector string and returns a collection of found items. The optional context\nelement can be used to reduce the amount of found elements to children of the\ncontext element. If the context object is a collection, its first item is used.\n\nSecondary usage:\nCreates a collection from an existing DOM element, document node or window object\n(or an Array containing any such objects)\n\n<a href=\"http://sizzlejs.com/\" target=\"_blank\">Sizzle</a> is used as selector engine.\nCheck out the <a href=\"https://github.com/jquery/sizzle/wiki/Sizzle-Home\" target=\"_blank\">documentation</a>\nfor more details."
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "selector {String|Element|Document|Window|Array} Valid selector (CSS3 + extensions),\nwindow object, DOM element/document or Array of DOM Elements.",
          "paramName": "selector",
          "description": " Valid selector (CSS3 + extensions),\nwindow object, DOM element/document or Array of DOM Elements.",
          "type": [
            "String",
            "Element",
            "Document",
            "Window",
            "Array"
          ]
        },
        {
          "name": "@param",
          "body": "context {Element|q} Only the children of this element are considered.",
          "paramName": "context",
          "description": " Only the children of this element are considered.",
          "type": [
            "Element",
            "q"
          ]
        }
      ],
      "@return": [
        {
          "name": "@return",
          "body": "{q} A collection of DOM elements.",
          "type": "q",
          "desc": " A collection of DOM elements."
        }
      ]
    }
  },
  "members": {
    "filter": {
      "location": {
        "start": {
          "line": 275,
          "column": 4
        },
        "end": {
          "line": 280,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets a new collection containing only those elements that passed the\ngiven filter. This can be either a selector expression or a filter\nfunction."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "selector {String|Function} Selector expression or filter function",
            "paramName": "selector",
            "description": " Selector expression or filter function",
            "type": [
              "String",
              "Function"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} New collection containing the elements that passed the filter",
            "type": "q",
            "desc": " New collection containing the elements that passed the filter"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "unique": {
      "location": {
        "start": {
          "line": 288,
          "column": 4
        },
        "end": {
          "line": 291,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Recreates a collection which is free of all duplicate elements from the original."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} Returns a copy with no duplicates",
            "type": "q",
            "desc": " Returns a copy with no duplicates"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "slice": {
      "location": {
        "start": {
          "line": 301,
          "column": 4
        },
        "end": {
          "line": 308,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a copy of the collection within the given range."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "begin {Number} The index to begin.",
            "paramName": "begin",
            "description": " The index to begin.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "end {Number?} The index to end.",
            "paramName": "end",
            "description": " The index to end.",
            "optional": true,
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} A new collection containing a slice of the original collection.",
            "type": "q",
            "desc": " A new collection containing a slice of the original collection."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "splice": {
      "location": {
        "start": {
          "line": 321,
          "column": 4
        },
        "end": {
          "line": 323,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the given number of items and returns the removed items as a new collection.\nThis method can also add items. Take a look at the\n<a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice' target='_blank'>documentation of MDN</a> for more details."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index to begin.",
            "paramName": "index",
            "description": " The index to begin.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "howMany {Number} the amount of items to remove.",
            "paramName": "howMany",
            "description": " the amount of items to remove.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "varargs {var} As many items as you want to add.",
            "paramName": "varargs",
            "description": " As many items as you want to add.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} A new collection containing the removed items.",
            "type": "q",
            "desc": " A new collection containing the removed items."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "map": {
      "location": {
        "start": {
          "line": 334,
          "column": 4
        },
        "end": {
          "line": 336,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a new collection containing the modified elements. For more details, check out the\n<a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map' target='_blank'>MDN documentation</a>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} Function which produces the new element.",
            "paramName": "callback",
            "description": " Function which produces the new element.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "thisarg {var} Context of the callback.",
            "paramName": "thisarg",
            "description": " Context of the callback.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} New collection containing the elements that passed the filter",
            "type": "q",
            "desc": " New collection containing the elements that passed the filter"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "concat": {
      "location": {
        "start": {
          "line": 345,
          "column": 4
        },
        "end": {
          "line": 355,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a copy of the collection including the given elements."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} As many items as you want to add.",
            "paramName": "varargs",
            "description": " As many items as you want to add.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} A new collection containing all items.",
            "type": "q",
            "desc": " A new collection containing all items."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "indexOf": {
      "location": {
        "start": {
          "line": 365,
          "column": 4
        },
        "end": {
          "line": 396,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the index of the given element within the current\ncollection or -1 if the element is not in the collection"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element|Element[]|qxWeb} Element or collection of elements",
            "paramName": "elem",
            "description": " Element or collection of elements",
            "type": [
              "Element",
              {
                "type": "Element",
                "dimensions": 2
              },
              "qxWeb"
            ]
          },
          {
            "name": "@param",
            "body": "fromIndex {Integer} The index to start the search at",
            "paramName": "fromIndex",
            "description": " The index to start the search at",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The element's index",
            "type": "Number",
            "desc": " The element's index"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "debug": {
      "location": {
        "start": {
          "line": 408,
          "column": 4
        },
        "end": {
          "line": 413,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Calls the browser's native debugger to easily allow debugging within\nchained calls.\n\nUnlike the <a href=\"#.logThis\">logThis</a> method this implementation blocks the further processing."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} The collection for chaining",
            "type": "q",
            "desc": " The collection for chaining"
          }
        ],
        "@ignore": [
          {
            "name": "@ignore",
            "body": "debugger"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "logThis": {
      "location": {
        "start": {
          "line": 426,
          "column": 4
        },
        "end": {
          "line": 447,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Logs information about the current collection, its DOM elements and the\nlength. Very useful during development to easily check the current state of\nyour collection and avoid common pitfalls like an empty collection.\n\nUnlike the <a href=\"#.debug\">debug</a> method this implementation works non-blocking."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} The collection for chaining",
            "type": "q",
            "desc": " The collection for chaining"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_forEachElement": {
      "location": {
        "start": {
          "line": 460,
          "column": 4
        },
        "end": {
          "line": 467,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Calls a function for each DOM element  or document fragment in the\ncollection. This is used for DOM manipulations which can't be\napplied to document nodes or window objects."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "func {Function} Callback function. Will be called with three arguments:\nThe element, the element's index within the collection and the collection itself.",
            "paramName": "func",
            "description": " Callback function. Will be called with three arguments:\nThe element, the element's index within the collection and the collection itself.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "ctx {Object} The context for the callback function (default: The collection)",
            "paramName": "ctx",
            "description": " The context for the callback function (default: The collection)",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} The collection for chaining",
            "type": "q",
            "desc": " The collection for chaining"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_forEachElementWrapped": {
      "location": {
        "start": {
          "line": 480,
          "column": 4
        },
        "end": {
          "line": 485,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Calls a function for each DOM element node in the collection. Each node is wrapped\nin a collection before the function is called."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "func {Function} Callback function. Will be called with three arguments:\nThe element wrappend in a collection, the element's index within the collection and\nthe collection itself.",
            "paramName": "func",
            "description": " Callback function. Will be called with three arguments:\nThe element wrappend in a collection, the element's index within the collection and\nthe collection itself.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "ctx {Object} The context for the callback function (default: The collection)",
            "paramName": "ctx",
            "description": " The context for the callback function (default: The collection)",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{q} The collection for chaining",
            "type": "q",
            "desc": " The collection for chaining"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 491,
        "column": 2
      },
      "end": {
        "line": 495,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "q"
        }
      ]
    }
  },
  "descendants": []
}