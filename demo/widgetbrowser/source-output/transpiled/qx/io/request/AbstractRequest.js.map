{
  "version": 3,
  "sources": [
    "AbstractRequest.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "url",
    "undefined",
    "setUrl",
    "__requestHeaders",
    "transport",
    "_transport",
    "_createTransport",
    "_setPhase",
    "__onReadyStateChangeBound",
    "lang",
    "Function",
    "bind",
    "_onReadyStateChange",
    "__onLoadBound",
    "_onLoad",
    "__onLoadEndBound",
    "_onLoadEnd",
    "__onAbortBound",
    "_onAbort",
    "__onTimeoutBound",
    "_onTimeout",
    "__onErrorBound",
    "_onError",
    "onreadystatechange",
    "onload",
    "onloadend",
    "onabort",
    "ontimeout",
    "onerror",
    "events",
    "properties",
    "check",
    "timeout",
    "nullable",
    "init",
    "requestData",
    "value",
    "Type",
    "isString",
    "isSubClassOf",
    "constructor",
    "isObject",
    "isArray",
    "getClass",
    "authentication",
    "members",
    "__response",
    "__abort",
    "__phase",
    "__requestHeadersDeprecated",
    "Error",
    "_getConfiguredUrl",
    "_getConfiguredRequestHeaders",
    "_getParsedResponse",
    "_getMethod",
    "_isAsync",
    "send",
    "method",
    "async",
    "test",
    "replace",
    "getTimeout",
    "Environment",
    "get",
    "debug",
    "open",
    "getRequestData",
    "indexOf",
    "_serializeData",
    "_setRequestHeaders",
    "abort",
    "requestHeaders",
    "_getAllRequestHeaders",
    "key",
    "setRequestHeader",
    "mergeWith",
    "__getAuthRequestHeaders",
    "auth",
    "getAuthentication",
    "headers",
    "getAuthHeaders",
    "forEach",
    "header",
    "getRequestHeader",
    "removeRequestHeader",
    "getTransport",
    "getReadyState",
    "readyState",
    "getPhase",
    "getStatus",
    "status",
    "getStatusText",
    "statusText",
    "getResponseText",
    "responseText",
    "getAllResponseHeaders",
    "getResponseHeader",
    "overrideResponseContentType",
    "contentType",
    "overrideMimeType",
    "getResponseContentType",
    "isDone",
    "getResponse",
    "_setResponse",
    "response",
    "oldResponse",
    "fireEvent",
    "event",
    "Data",
    "__onReadyStateDone",
    "util",
    "Request",
    "isSuccessful",
    "_fireStatefulEvent",
    "e",
    "evt",
    "Assert",
    "assertString",
    "phase",
    "previousPhase",
    "assertMatch",
    "fireDataEvent",
    "data",
    "isPost",
    "getMethod",
    "isJson",
    "Serializer",
    "toUriParameter",
    "Json",
    "stringify",
    "Uri",
    "toParameter",
    "environment",
    "destruct",
    "noop",
    "window",
    "setTimeout",
    "dispose",
    "io",
    "request",
    "AbstractRequest"
  ],
  "mappings": "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",
  "file": "AbstractRequest.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * AbstractRequest serves as a base class for {@link qx.io.request.Xhr}\n * and {@link qx.io.request.Jsonp}. It contains methods to conveniently\n * communicate with transports found in {@link qx.bom.request}.\n *\n * The general procedure to derive a new request is to choose a\n * transport (override {@link #_createTransport}) and link\n * the transport’s response (override {@link #_getParsedResponse}).\n * The transport must implement {@link qx.bom.request.IRequest}.\n *\n * To adjust the behavior of {@link #send} override\n * {@link #_getConfiguredUrl} and {@link #_getConfiguredRequestHeaders}.\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.request.AbstractRequest\",\n{\n  type : \"abstract\",\n\n  extend : qx.core.Object,\n  implement: [ qx.core.IDisposable ],\n\n  /**\n   * @param url {String?} The URL of the resource to request.\n   */\n  construct : function(url)\n  {\n    this.base(arguments);\n\n    if (url !== undefined) {\n      this.setUrl(url);\n    }\n\n    this.__requestHeaders = {};\n\n    var transport = this._transport = this._createTransport();\n    this._setPhase(\"unsent\");\n\n    this.__onReadyStateChangeBound = qx.lang.Function.bind(this._onReadyStateChange, this);\n    this.__onLoadBound = qx.lang.Function.bind(this._onLoad, this);\n    this.__onLoadEndBound = qx.lang.Function.bind(this._onLoadEnd, this);\n    this.__onAbortBound = qx.lang.Function.bind(this._onAbort, this);\n    this.__onTimeoutBound = qx.lang.Function.bind(this._onTimeout, this);\n    this.__onErrorBound = qx.lang.Function.bind(this._onError, this);\n\n    transport.onreadystatechange = this.__onReadyStateChangeBound;\n    transport.onload = this.__onLoadBound;\n    transport.onloadend = this.__onLoadEndBound;\n    transport.onabort = this.__onAbortBound;\n    transport.ontimeout = this.__onTimeoutBound;\n    transport.onerror = this.__onErrorBound;\n  },\n\n  events :\n  {\n    /**\n     * Fired on every change of the transport’s readyState.\n     */\n    \"readyStateChange\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error and transport’s status\n     * indicates success.\n     */\n    \"success\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error.\n     */\n    \"load\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes with or without error.\n     */\n    \"loadEnd\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request is aborted.\n     */\n    \"abort\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request reaches timeout limit.\n     */\n    \"timeout\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes with error.\n     */\n    \"error\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error but erroneous HTTP status.\n     */\n    \"statusError\": \"qx.event.type.Event\",\n\n    /**\n     * Fired on timeout, error or remote error.\n     *\n     * This event is fired for convenience. Usually, it is recommended\n     * to handle error related events in a more fine-grained approach.\n     */\n    \"fail\": \"qx.event.type.Event\",\n\n    /**\n    * Fired on change of the parsed response.\n    *\n    * This event allows to use data binding with the\n    * parsed response as source.\n    *\n    * For example, to bind the response to the value of a label:\n    *\n    * <pre class=\"javascript\">\n    * // req is an instance of qx.io.request.*,\n    * // label an instance of qx.ui.basic.Label\n    * req.bind(\"response\", label, \"value\");\n    * </pre>\n    *\n    * The response is parsed (and therefore changed) only\n    * after the request completes successfully. This means\n    * that when a new request is made the initial empty value\n    * is ignored, instead only the final value is bound.\n    *\n    */\n    \"changeResponse\": \"qx.event.type.Data\",\n\n    /**\n     * Fired on change of the phase.\n     */\n    \"changePhase\": \"qx.event.type.Data\"\n  },\n\n  properties :\n  {\n    /**\n     * The URL of the resource to request.\n     *\n     * Note: Depending on the configuration of the request\n     * and/or the transport chosen, query params may be appended\n     * automatically.\n     */\n    url: {\n      check: \"String\"\n    },\n\n\n    /**\n     * Timeout limit in milliseconds. Default (0) means no limit.\n     */\n    timeout: {\n      check: \"Number\",\n      nullable: true,\n      init: 0\n    },\n\n    /**\n     * Data to be sent as part of the request.\n     *\n     * Supported types:\n     *\n     * * String\n     * * Map\n     * * qooxdoo Object\n     * * Blob\n     * * ArrayBuffer\n     * * FormData\n     *\n     * For maps, Arrays and qooxdoo objects, a URL encoded string\n     * with unsafe characters escaped is internally generated and sent\n     * as part of the request.\n     *\n     * Depending on the underlying transport and its configuration, the request\n     * data is transparently included as URL query parameters or embedded in the\n     * request body as form data.\n     *\n     * If a string is given the user must make sure it is properly formatted and\n     * escaped. See {@link qx.util.Serializer#toUriParameter}.\n     *\n     */\n    requestData: {\n      check: function(value) {\n        return qx.lang.Type.isString(value) ||\n               qx.Class.isSubClassOf(value.constructor, qx.core.Object) ||\n               qx.lang.Type.isObject(value) ||\n               qx.lang.Type.isArray(value) ||\n               qx.Bootstrap.getClass(value) == \"Blob\" ||\n               qx.Bootstrap.getClass(value) == \"ArrayBuffer\" ||\n               qx.Bootstrap.getClass(value) == \"FormData\";\n      },\n      nullable: true\n    },\n\n    /**\n     * Authentication delegate.\n     *\n     * The delegate must implement {@link qx.io.request.authentication.IAuthentication}.\n     */\n    authentication: {\n      check: \"qx.io.request.authentication.IAuthentication\",\n      nullable: true\n    }\n  },\n\n  members :\n  {\n\n    /**\n     * Bound handlers.\n     */\n    __onReadyStateChangeBound: null,\n    __onLoadBound: null,\n    __onLoadEndBound: null,\n    __onAbortBound: null,\n    __onTimeoutBound: null,\n    __onErrorBound: null,\n\n    /**\n     * Parsed response.\n     */\n    __response: null,\n\n    /**\n     * Abort flag.\n     */\n     __abort: null,\n\n    /**\n     * Current phase.\n     */\n    __phase: null,\n\n    /**\n     * Request headers.\n     */\n    __requestHeaders: null,\n\n    /**\n     * Request headers (deprecated).\n     */\n    __requestHeadersDeprecated: null,\n\n    /**\n     * Holds transport.\n     */\n    _transport: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      CONFIGURE TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create and return transport.\n     *\n     * This method MUST be overridden, unless the constructor is overridden as\n     * well. It is called by the constructor and should return the transport that\n     * is to be interfaced.\n     *\n     * @return {qx.bom.request} Transport.\n     */\n    _createTransport: function() {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Get configured URL.\n     *\n     * A configured URL typically includes a query string that\n     * encapsulates transport specific settings such as request\n     * data or no-cache settings.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {String} The configured URL.\n     */\n    _getConfiguredUrl: function() {},\n\n    /**\n     * Get configuration related request headers.\n     *\n     * This method MAY be overridden to add request headers for features limited\n     * to a certain transport.\n     *\n     * @return {Map} Map of request headers.\n     */\n    _getConfiguredRequestHeaders: function() {},\n\n    /**\n     * Get parsed response.\n     *\n     * Is called in the {@link #_onReadyStateChange} event handler\n     * to parse and store the transport’s response.\n     *\n     * This method MUST be overridden.\n     *\n     * @return {String} The parsed response of the request.\n     */\n    _getParsedResponse: function() {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Get method.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {String} The method.\n     */\n    _getMethod: function() {\n      return \"GET\";\n    },\n\n    /**\n     * Whether async.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {Boolean} Whether to process asynchronously.\n     */\n    _isAsync: function() {\n      return true;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERACT WITH TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Send request.\n     */\n    send: function() {\n      var transport = this._transport,\n          url, method, async, requestData;\n\n      //\n      // Open request\n      //\n\n      url = this._getConfiguredUrl();\n\n      // Drop fragment (anchor) from URL as per\n      // http://www.w3.org/TR/XMLHttpRequest/#the-open-method\n      if (/\\#/.test(url)) {\n        url = url.replace(/\\#.*/, \"\");\n      }\n\n      transport.timeout = this.getTimeout();\n\n      // Support transports with enhanced feature set\n      method = this._getMethod();\n      async = this._isAsync();\n\n      // Open\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Open low-level request with method: \" +\n          method + \", url: \" + url + \", async: \" + async);\n      }\n\n      transport.open(method, url, async);\n      this._setPhase(\"opened\");\n\n      //\n      // Send request\n      //\n\n      requestData = this.getRequestData();\n      if ([\"ArrayBuffer\", \"Blob\", \"FormData\"].indexOf(qx.Bootstrap.getClass(requestData)) == -1) {\n        requestData = this._serializeData(requestData);\n      }\n\n      this._setRequestHeaders();\n\n      // Send\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Send low-level request\");\n      }\n\n      method == \"GET\" ? transport.send() : transport.send(requestData);\n      this._setPhase(\"sent\");\n    },\n\n    /**\n     * Abort request.\n     */\n    abort: function() {\n       if (qx.core.Environment.get(\"qx.debug.io\")) {\n         this.debug(\"Abort request\");\n       }\n       this.__abort = true;\n\n       // Update phase to \"abort\" before user handler are invoked [BUG #5485]\n       this.__phase = \"abort\";\n\n       this._transport.abort();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n     REQUEST HEADERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply configured request headers to transport.\n     *\n     * This method MAY be overridden to customize application of request headers\n     * to transport.\n     */\n    _setRequestHeaders: function() {\n      var transport = this._transport,\n          requestHeaders = this._getAllRequestHeaders();\n\n      for (var key in requestHeaders) {\n        transport.setRequestHeader(key, requestHeaders[key]);\n      }\n\n    },\n\n    /**\n     * Get all request headers.\n     *\n     * @return {Map} All request headers.\n     */\n    _getAllRequestHeaders: function() {\n      var requestHeaders = {};\n      // Transport specific headers\n      qx.lang.Object.mergeWith(requestHeaders, this._getConfiguredRequestHeaders());\n      // Authentication delegate\n      qx.lang.Object.mergeWith(requestHeaders, this.__getAuthRequestHeaders());\n      // User-defined, requestHeaders property (deprecated)\n      qx.lang.Object.mergeWith(requestHeaders, this.__requestHeadersDeprecated);\n      // User-defined\n      qx.lang.Object.mergeWith(requestHeaders, this.__requestHeaders);\n\n      return requestHeaders;\n    },\n\n    /**\n    * Retrieve authentication headers from auth delegate.\n    *\n    * @return {Map} Authentication related request headers.\n    */\n    __getAuthRequestHeaders: function() {\n      var auth = this.getAuthentication(),\n          headers = {};\n\n      if (auth) {\n        auth.getAuthHeaders().forEach(function(header) {\n          headers[header.key] = header.value;\n        });\n        return headers;\n      }\n    },\n\n    /**\n     * Set a request header.\n     *\n     * Note: Setting request headers has no effect after the request was send.\n     *\n     * @param key {String} Key of the header.\n     * @param value {String} Value of the header.\n     */\n    setRequestHeader: function(key, value) {\n      this.__requestHeaders[key] = value;\n    },\n\n    /**\n     * Get a request header.\n     *\n     * @param key {String} Key of the header.\n     * @return {String} The value of the header.\n     */\n    getRequestHeader: function(key) {\n       return this.__requestHeaders[key];\n    },\n\n    /**\n     * Remove a request header.\n     *\n     * Note: Removing request headers has no effect after the request was send.\n     *\n     * @param key {String} Key of the header.\n     */\n    removeRequestHeader: function(key) {\n      if (this.__requestHeaders[key]) {\n       delete this.__requestHeaders[key];\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n     QUERY TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get low-level transport.\n     *\n     * Note: To be used with caution!\n     *\n     * This method can be used to query the transport directly,\n     * but should be used with caution. Especially, it\n     * is not advisable to call any destructive methods\n     * such as <code>open</code> or <code>send</code>.\n     *\n     * @return {Object} An instance of a class found in\n     *  <code>qx.bom.request.*</code>\n     */\n\n     // This method mainly exists so that some methods found in the\n     // low-level transport can be deliberately omitted here,\n     // but still be accessed should it be absolutely necessary.\n     //\n     // Valid use cases include to query the transport’s responseXML\n     // property if performance is critical and any extra parsing\n     // should be avoided at all costs.\n     //\n    getTransport: function() {\n      return this._transport;\n    },\n\n    /**\n     * Get current ready state.\n     *\n     * States can be:\n     * UNSENT:           0,\n     * OPENED:           1,\n     * HEADERS_RECEIVED: 2,\n     * LOADING:          3,\n     * DONE:             4\n     *\n     * @return {Number} Ready state.\n     */\n    getReadyState: function() {\n      return this._transport.readyState;\n    },\n\n    /**\n     * Get current phase.\n     *\n     * A more elaborate version of {@link #getReadyState}, this method indicates\n     * the current phase of the request. Maps to stateful (i.e. deterministic)\n     * events (success, abort, timeout, statusError) and intermediate\n     * readyStates (unsent, configured, loading, load).\n     *\n     * When the requests is successful, it progresses the states:<br>\n     * 'unsent', 'opened', 'sent', 'loading', 'load', 'success'\n     *\n     * In case of failure, the final state is one of:<br>\n     * 'abort', 'timeout', 'statusError'\n     *\n     * For each change of the phase, a {@link #changePhase} data event is fired.\n     *\n     * @return {String} Current phase.\n     *\n     */\n    getPhase: function() {\n      return this.__phase;\n    },\n\n    /**\n     * Get status code.\n     *\n     * @return {Number} The transport’s status code.\n     */\n    getStatus: function() {\n      return this._transport.status;\n    },\n\n    /**\n     * Get status text.\n     *\n     * @return {String} The transport’s status text.\n     */\n    getStatusText: function() {\n      return this._transport.statusText;\n    },\n\n    /**\n     * Get raw (unprocessed) response.\n     *\n     * @return {String} The raw response of the request.\n     */\n    getResponseText: function() {\n      return this._transport.responseText;\n    },\n\n    /**\n     * Get all response headers from response.\n     *\n     * @return {String} All response headers.\n     */\n    getAllResponseHeaders: function() {\n      return this._transport.getAllResponseHeaders();\n    },\n\n    /**\n     * Get a single response header from response.\n     *\n     * @param key {String}\n     *   Key of the header to get the value from.\n     * @return {String}\n     *   Response header.\n     */\n    getResponseHeader: function(key) {\n      return this._transport.getResponseHeader(key);\n    },\n\n    /**\n     * Override the content type response header from response.\n     *\n     * @param contentType {String}\n     *   Content type for overriding.\n     * @see qx.bom.request.Xhr#overrideMimeType\n     */\n    overrideResponseContentType: function(contentType) {\n      return this._transport.overrideMimeType(contentType);\n    },\n\n    /**\n     * Get the content type response header from response.\n     *\n     * @return {String}\n     *   Content type response header.\n     */\n    getResponseContentType: function() {\n      return this.getResponseHeader(\"Content-Type\");\n    },\n\n    /**\n     * Whether request completed (is done).\n     */\n    isDone: function() {\n      return this.getReadyState() === 4;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      RESPONSE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get parsed response.\n     *\n     * @return {String} The parsed response of the request.\n     */\n    getResponse: function() {\n      return this.__response;\n    },\n\n    /**\n     * Set response.\n     *\n     * @param response {String} The parsed response of the request.\n     */\n    _setResponse: function(response) {\n      var oldResponse = response;\n\n      if (this.__response !== response) {\n        this.__response = response;\n        this.fireEvent(\"changeResponse\", qx.event.type.Data, [this.__response, oldResponse]);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handle \"readyStateChange\" event.\n     */\n    _onReadyStateChange: function() {\n      var readyState = this.getReadyState();\n\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Fire readyState: \" + readyState);\n      }\n\n      this.fireEvent(\"readyStateChange\");\n\n      // Transport switches to readyState DONE on abort and may already\n      // have successful HTTP status when response is served from cache.\n      //\n      // Not fire custom event \"loading\" (or \"success\", when cached).\n      if (this.__abort) {\n        return;\n      }\n\n      if (readyState === 3) {\n        this._setPhase(\"loading\");\n      }\n\n      if (this.isDone()) {\n        this.__onReadyStateDone();\n      }\n    },\n\n    /**\n     * Called internally when readyState is DONE.\n     */\n    __onReadyStateDone: function() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Request completed with HTTP status: \" + this.getStatus());\n      }\n\n      // Event \"load\" fired in onLoad\n      this._setPhase(\"load\");\n\n      // Successful HTTP status\n      if (qx.util.Request.isSuccessful(this.getStatus())) {\n\n        // Parse response\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          this.debug(\"Response is of type: '\" + this.getResponseContentType() + \"'\");\n        }\n\n        this._setResponse(this._getParsedResponse());\n\n        this._fireStatefulEvent(\"success\");\n\n      // Erroneous HTTP status\n      } else {\n\n        try {\n          this._setResponse(this._getParsedResponse());\n        } catch (e) {\n          // ignore if it does not work\n        }\n\n        // A remote error failure\n        if (this.getStatus() !== 0) {\n          this._fireStatefulEvent(\"statusError\");\n          this.fireEvent(\"fail\");\n        }\n      }\n    },\n\n    /**\n     * Handle \"load\" event.\n     */\n    _onLoad: function() {\n      this.fireEvent(\"load\");\n    },\n\n    /**\n     * Handle \"loadEnd\" event.\n     */\n    _onLoadEnd: function() {\n      this.fireEvent(\"loadEnd\");\n    },\n\n    /**\n     * Handle \"abort\" event.\n     */\n    _onAbort: function() {\n      this._fireStatefulEvent(\"abort\");\n    },\n\n    /**\n     * Handle \"timeout\" event.\n     */\n    _onTimeout: function() {\n      this._fireStatefulEvent(\"timeout\");\n\n      // A network error failure\n      this.fireEvent(\"fail\");\n    },\n\n    /**\n     * Handle \"error\" event.\n     */\n    _onError: function() {\n      this.fireEvent(\"error\");\n\n      // A network error failure\n      this.fireEvent(\"fail\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL / HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fire stateful event.\n     *\n     * Fires event and sets phase to name of event.\n     *\n     * @param evt {String} Name of the event to fire.\n     */\n    _fireStatefulEvent: function(evt) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(evt);\n      }\n      this._setPhase(evt);\n      this.fireEvent(evt);\n    },\n\n    /**\n     * Set phase.\n     *\n     * @param phase {String} The phase to set.\n     */\n    _setPhase: function(phase) {\n      var previousPhase = this.__phase;\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(phase);\n        qx.core.Assert.assertMatch(phase,\n          /^(unsent)|(opened)|(sent)|(loading)|(load)|(success)|(abort)|(timeout)|(statusError)$/);\n      }\n\n      this.__phase = phase;\n      this.fireDataEvent(\"changePhase\", phase, previousPhase);\n    },\n\n    /**\n     * Serialize data.\n     *\n     * @param data {String|Map|qx.core.Object} Data to serialize.\n     * @return {String|null} Serialized data.\n     */\n    _serializeData: function(data) {\n      var isPost = typeof this.getMethod !== \"undefined\" && this.getMethod() == \"POST\",\n          isJson = (/application\\/.*\\+?json/).test(this.getRequestHeader(\"Content-Type\"));\n\n      if (!data) {\n        return null;\n      }\n\n      if (qx.lang.Type.isString(data)) {\n        return data;\n      }\n\n      if (qx.Class.isSubClassOf(data.constructor, qx.core.Object)) {\n        return qx.util.Serializer.toUriParameter(data);\n      }\n\n      if (isJson && (qx.lang.Type.isObject(data) || qx.lang.Type.isArray(data))) {\n        return qx.lang.Json.stringify(data);\n      }\n\n      if (qx.lang.Type.isObject(data)) {\n        return qx.util.Uri.toParameter(data, isPost);\n      }\n\n      return null;\n    }\n  },\n\n  environment:\n  {\n    \"qx.debug.io\": false\n  },\n\n  destruct: function()\n  {\n    var transport = this._transport,\n        noop = function() {};\n\n    if (this._transport) {\n      transport.onreadystatechange = transport.onload = transport.onloadend =\n      transport.onabort = transport.ontimeout = transport.onerror = noop;\n\n      // [BUG #8315] dispose asynchronously to work with Sinon.js fake server\n      window.setTimeout(function() {\n        transport.dispose();\n      }, 0);\n    }\n  }\n});\n"
  ]
}