{
  "className": "qx.ui.menu.Menu",
  "packageName": "qx.ui.menu",
  "name": "Menu",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [],
  "mixins": [
    "qx.ui.core.MPlacement",
    "qx.ui.core.MRemoteChildrenHandling"
  ],
  "clazz": {
    "location": {
      "start": {
        "line": 30,
        "column": 0
      },
      "end": {
        "line": 813,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The menu is a popup like control which supports buttons. It comes\nwith full keyboard navigation and an improved timeout based pointer\ncontrol behavior.\n\nThis class is the container for all derived instances of\n{@link qx.ui.menu.AbstractButton}."
        }
      ],
      "@childControl": [
        {
          "name": "@childControl",
          "body": "slidebar {qx.ui.menu.MenuSlideBar} shows a slidebar to easily navigate inside the menu (if too little space is left)"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 40,
        "column": 2
      },
      "end": {
        "line": 65,
        "column": 3
      }
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 78,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nWIDGET PROPERTIES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "defaultValue": "menu",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "allowGrowX": {
      "location": {
        "start": {
          "line": 85,
          "column": 4
        },
        "end": {
          "line": 89,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "allowGrowX",
      "propertyType": "new",
      "refine": true,
      "defaultValue": false,
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": {
        "qx.ui.core.LayoutItem": "class"
      }
    },
    "allowGrowY": {
      "location": {
        "start": {
          "line": 92,
          "column": 4
        },
        "end": {
          "line": 96,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "allowGrowY",
      "propertyType": "new",
      "refine": true,
      "defaultValue": false,
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": {
        "qx.ui.core.LayoutItem": "class"
      }
    },
    "visibility": {
      "location": {
        "start": {
          "line": 99,
          "column": 4
        },
        "end": {
          "line": 103,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "visibility",
      "propertyType": "new",
      "refine": true,
      "defaultValue": "excluded",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "keepFocus": {
      "location": {
        "start": {
          "line": 106,
          "column": 4
        },
        "end": {
          "line": 110,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "keepFocus",
      "propertyType": "new",
      "refine": true,
      "defaultValue": true,
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "keepActive": {
      "location": {
        "start": {
          "line": 113,
          "column": 4
        },
        "end": {
          "line": 117,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "keepActive",
      "propertyType": "new",
      "refine": true,
      "defaultValue": true,
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "spacingX": {
      "location": {
        "start": {
          "line": 127,
          "column": 4
        },
        "end": {
          "line": 133,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSTYLE OPTIONS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "The spacing between each cell of the menu buttons"
          }
        ]
      },
      "name": "spacingX",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applySpacingX",
      "check": "Integer",
      "defaultValue": 0
    },
    "spacingY": {
      "location": {
        "start": {
          "line": 136,
          "column": 4
        },
        "end": {
          "line": 142,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The spacing between each menu button"
          }
        ]
      },
      "name": "spacingY",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applySpacingY",
      "check": "Integer",
      "defaultValue": 0
    },
    "iconColumnWidth": {
      "location": {
        "start": {
          "line": 148,
          "column": 4
        },
        "end": {
          "line": 154,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Default icon column width if no icons are rendered.\nThis property is ignored as soon as an icon is present."
          }
        ]
      },
      "name": "iconColumnWidth",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyIconColumnWidth",
      "check": "Integer",
      "defaultValue": 0
    },
    "arrowColumnWidth": {
      "location": {
        "start": {
          "line": 157,
          "column": 4
        },
        "end": {
          "line": 163,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Default arrow column width if no sub menus are rendered"
          }
        ]
      },
      "name": "arrowColumnWidth",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyArrowColumnWidth",
      "check": "Integer",
      "defaultValue": 0
    },
    "blockerColor": {
      "location": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 175,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Color of the blocker"
          }
        ]
      },
      "name": "blockerColor",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyBlockerColor",
      "allowNull": true,
      "check": "Color"
    },
    "blockerOpacity": {
      "location": {
        "start": {
          "line": 180,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Opacity of the blocker"
          }
        ]
      },
      "name": "blockerOpacity",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyBlockerOpacity",
      "check": "Number",
      "defaultValue": 1
    },
    "selectedButton": {
      "location": {
        "start": {
          "line": 196,
          "column": 4
        },
        "end": {
          "line": 201,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nFUNCTIONALITY PROPERTIES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "The currently selected button"
          }
        ]
      },
      "name": "selectedButton",
      "propertyType": "new",
      "apply": "_applySelectedButton",
      "allowNull": true,
      "check": "qx.ui.core.Widget"
    },
    "openedButton": {
      "location": {
        "start": {
          "line": 204,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The currently opened button (sub menu is visible)"
          }
        ]
      },
      "name": "openedButton",
      "propertyType": "new",
      "apply": "_applyOpenedButton",
      "allowNull": true,
      "check": "qx.ui.core.Widget"
    },
    "opener": {
      "location": {
        "start": {
          "line": 212,
          "column": 4
        },
        "end": {
          "line": 216,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Widget that opened the menu"
          }
        ]
      },
      "name": "opener",
      "propertyType": "new",
      "allowNull": true,
      "check": "qx.ui.core.Widget"
    },
    "openInterval": {
      "location": {
        "start": {
          "line": 228,
          "column": 4
        },
        "end": {
          "line": 234,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nBEHAVIOR PROPERTIES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Interval in ms after which sub menus should be opened"
          }
        ]
      },
      "name": "openInterval",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyOpenInterval",
      "check": "Integer",
      "defaultValue": 250
    },
    "closeInterval": {
      "location": {
        "start": {
          "line": 237,
          "column": 4
        },
        "end": {
          "line": 243,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interval in ms after which sub menus should be closed"
          }
        ]
      },
      "name": "closeInterval",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyCloseInterval",
      "check": "Integer",
      "defaultValue": 250
    },
    "blockBackground": {
      "location": {
        "start": {
          "line": 246,
          "column": 4
        },
        "end": {
          "line": 251,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Blocks the background if value is <code>true<code>"
          }
        ]
      },
      "name": "blockBackground",
      "propertyType": "new",
      "themeable": true,
      "check": "Boolean",
      "defaultValue": false
    },
    "position": {
      "type": "property",
      "name": "position",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "placeMethod": {
      "type": "property",
      "name": "placeMethod",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "domMove": {
      "type": "property",
      "name": "domMove",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "placementModeX": {
      "type": "property",
      "name": "placementModeX",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "placementModeY": {
      "type": "property",
      "name": "placementModeY",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "offsetLeft": {
      "type": "property",
      "name": "offsetLeft",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "offsetTop": {
      "type": "property",
      "name": "offsetTop",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "offsetRight": {
      "type": "property",
      "name": "offsetRight",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "offsetBottom": {
      "type": "property",
      "name": "offsetBottom",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "offset": {
      "type": "property",
      "name": "offset",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    }
  },
  "members": {
    "__scheduledOpen": {
      "location": {
        "start": {
          "line": 265,
          "column": 4
        },
        "end": {
          "line": 265,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onAfterSlideBarAdd": {
      "location": {
        "start": {
          "line": 266,
          "column": 4
        },
        "end": {
          "line": 266,
          "column": 31
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_blocker": {
      "location": {
        "start": {
          "line": 269,
          "column": 4
        },
        "end": {
          "line": 269,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.core.Blocker} blocker for background blocking"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "open": {
      "location": {
        "start": {
          "line": 280,
          "column": 4
        },
        "end": {
          "line": 296,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPUBLIC API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Opens the menu and configures the opener"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "openAtPointer": {
      "location": {
        "start": {
          "line": 304,
          "column": 4
        },
        "end": {
          "line": 314,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Opens the menu at the pointer position"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event to align to",
            "paramName": "e",
            "description": " Pointer event to align to",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "openAtPoint": {
      "location": {
        "start": {
          "line": 323,
          "column": 4
        },
        "end": {
          "line": 330,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Opens the menu in relation to the given point"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "point {Map} Coordinate of any point with the keys <code>left</code>\nand <code>top</code>.",
            "paramName": "point",
            "description": " Coordinate of any point with the keys <code>left</code>\nand <code>top</code>.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addSeparator": {
      "location": {
        "start": {
          "line": 336,
          "column": 4
        },
        "end": {
          "line": 338,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Convenience method to add a separator to the menu"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getColumnSizes": {
      "location": {
        "start": {
          "line": 346,
          "column": 4
        },
        "end": {
          "line": 348,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the column sizes detected during the pre-layout phase"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} List of all column widths",
            "type": "Array",
            "desc": " List of all column widths"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSelectables": {
      "location": {
        "start": {
          "line": 356,
          "column": 4
        },
        "end": {
          "line": 368,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Return all selectable menu items."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} selectable widgets",
            "type": "qx.ui.core.Widget[]",
            "desc": " selectable widgets"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyIconColumnWidth": {
      "location": {
        "start": {
          "line": 378,
          "column": 4
        },
        "end": {
          "line": 380,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPROPERTY APPLY ROUTINES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyArrowColumnWidth": {
      "location": {
        "start": {
          "line": 384,
          "column": 4
        },
        "end": {
          "line": 386,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applySpacingX": {
      "location": {
        "start": {
          "line": 390,
          "column": 4
        },
        "end": {
          "line": 392,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applySpacingY": {
      "location": {
        "start": {
          "line": 396,
          "column": 4
        },
        "end": {
          "line": 398,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyVisibility": {
      "location": {
        "start": {
          "line": 402,
          "column": 4
        },
        "end": {
          "line": 436,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "__updateBlockerVisibility": {
      "location": {
        "start": {
          "line": 442,
          "column": 4
        },
        "end": {
          "line": 457,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates the blocker's visibility"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getParentMenu": {
      "location": {
        "start": {
          "line": 466,
          "column": 4
        },
        "end": {
          "line": 481,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the parent menu. Returns <code>null</code> if the menu doesn't have a\nparent menu."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Menu|null} The parent menu.",
            "type": "Menu|null",
            "desc": " The parent menu."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applySelectedButton": {
      "location": {
        "start": {
          "line": 485,
          "column": 4
        },
        "end": {
          "line": 494,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyOpenedButton": {
      "location": {
        "start": {
          "line": 498,
          "column": 4
        },
        "end": {
          "line": 507,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyBlockerColor": {
      "location": {
        "start": {
          "line": 511,
          "column": 4
        },
        "end": {
          "line": 513,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyBlockerOpacity": {
      "location": {
        "start": {
          "line": 517,
          "column": 4
        },
        "end": {
          "line": 519,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getChildrenContainer": {
      "location": {
        "start": {
          "line": 529,
          "column": 4
        },
        "end": {
          "line": 531,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSCROLLING SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} Widget which contains the children.",
            "type": "qx.ui.core.Widget",
            "desc": " Widget which contains the children."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_createChildControlImpl": {
      "location": {
        "start": {
          "line": 535,
          "column": 4
        },
        "end": {
          "line": 565,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "paramName": "id",
            "description": " ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "hash {String?undefined} If a child control name contains a #,\nall text following the # will be the hash argument.",
            "paramName": "hash",
            "description": " If a child control name contains a #,\nall text following the # will be the hash argument.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The created control or <code>null</code>",
            "type": "qx.ui.core.Widget",
            "desc": " The created control or <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_getMenuLayout": {
      "location": {
        "start": {
          "line": 573,
          "column": 4
        },
        "end": {
          "line": 580,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the menu layout manager"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Layout} The menu layout manager",
            "type": "qx.ui.menu.Layout",
            "desc": " The menu layout manager"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getMenuBounds": {
      "location": {
        "start": {
          "line": 588,
          "column": 4
        },
        "end": {
          "line": 595,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the menu bounds"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The menu bounds",
            "type": "Map",
            "desc": " The menu bounds"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_computePlacementSize": {
      "location": {
        "start": {
          "line": 603,
          "column": 4
        },
        "end": {
          "line": 605,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the size of the menu. This method is used by the\n{@link qx.ui.core.MPlacement} mixin."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The menu bounds",
            "type": "Map",
            "desc": " The menu bounds"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__updateSlideBar": {
      "location": {
        "start": {
          "line": 612,
          "column": 4
        },
        "end": {
          "line": 645,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates the visibility of the slidebar based on the menu's current size\nand position."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_assertSlideBar": {
      "location": {
        "start": {
          "line": 656,
          "column": 4
        },
        "end": {
          "line": 664,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Schedules the addition of the slidebar and calls the given callback\nafter the slidebar has been added."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} the callback to call",
            "paramName": "callback",
            "description": " the callback to call",
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var|undefined} The return value of the callback if the slidebar\nalready exists, or <code>undefined</code> if it doesn't",
            "type": "var|undefined",
            "desc": " The return value of the callback if the slidebar\nalready exists, or <code>undefined</code> if it doesn't"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "syncWidget": {
      "location": {
        "start": {
          "line": 668,
          "column": 4
        },
        "end": {
          "line": 676,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "jobs {Map} A map of jobs.",
            "paramName": "jobs",
            "description": " A map of jobs.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_onResize": {
      "location": {
        "start": {
          "line": 688,
          "column": 4
        },
        "end": {
          "line": 704,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT HANDLING\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Update position if the menu or the root is resized"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerOver": {
      "location": {
        "start": {
          "line": 712,
          "column": 4
        },
        "end": {
          "line": 758,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event listener for pointerover event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointerover event",
            "paramName": "e",
            "description": " pointerover event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerOut": {
      "location": {
        "start": {
          "line": 766,
          "column": 4
        },
        "end": {
          "line": 793,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event listener for pointerout event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointerout event",
            "paramName": "e",
            "description": " pointerout event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getLayoutLocation": {
      "type": "function",
      "name": "getLayoutLocation",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the location data like {qx.bom.element.Location#get} does,\nbut does not rely on DOM elements coordinates to be rendered. Instead,\nthis method works with the available layout data available in the moment\nwhen it is executed.\nThis works best when called in some type of <code>resize</code> or\n<code>move</code> event which are supported by all widgets out of the\nbox."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Any widget",
            "paramName": "widget",
            "description": " Any widget",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|null} Returns a map with <code>left</code>, <code>top</code>,\n<code>right</code> and <code>bottom</code> which contains the distance\nof the widget relative coords the document.",
            "type": "Map|null",
            "desc": " Returns a map with <code>left</code>, <code>top</code>,\n<code>right</code> and <code>bottom</code> which contains the distance\nof the widget relative coords the document."
          }
        ]
      }
    },
    "moveTo": {
      "type": "function",
      "name": "moveTo",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the position. Uses low-level, high-performance DOM\nmethods when the property {@link #domMove} is enabled.\nChecks if an always visible element is set and moves the widget to not\noverlay the always visible widget if possible. The algorithm tries to\nmove the widget as far left as necessary but not of the screen.\n({@link #setVisibleElement})"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "left {Integer} The left position",
            "paramName": "left",
            "description": " The left position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "top {Integer} The top position",
            "paramName": "top",
            "description": " The top position",
            "type": "Integer"
          }
        ]
      }
    },
    "placeToWidget": {
      "type": "function",
      "name": "placeToWidget",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Places the widget to another (at least laid out) widget. The DOM\nelement is not needed, but the bounds are needed to compute the\nlocation of the widget to align to."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {qx.ui.core.Widget} Target coords align coords",
            "paramName": "target",
            "description": " Target coords align coords",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "liveupdate {Boolean} Flag indicating if the position of the\nwidget should be checked and corrected automatically.",
            "paramName": "liveupdate",
            "description": " Flag indicating if the position of the\nwidget should be checked and corrected automatically.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if the widget was successfully placed",
            "type": "Boolean",
            "desc": " true if the widget was successfully placed"
          }
        ]
      }
    },
    "__cleanupFromLastPlaceToWidgetLiveUpdate": {
      "type": "function",
      "name": "__cleanupFromLastPlaceToWidgetLiveUpdate",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "placeToPointer": {
      "type": "function",
      "name": "placeToPointer",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Places the widget to the pointer position."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Pointer} Pointer event to align to",
            "paramName": "event",
            "description": " Pointer event to align to",
            "type": "qx.event.type.Pointer"
          }
        ]
      }
    },
    "placeToElement": {
      "type": "function",
      "name": "placeToElement",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Places the widget to any (rendered) DOM element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to align to",
            "paramName": "elem",
            "description": " DOM element to align to",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "liveupdate {Boolean} Flag indicating if the position of the\nwidget should be checked and corrected automatically.",
            "paramName": "liveupdate",
            "description": " Flag indicating if the position of the\nwidget should be checked and corrected automatically.",
            "type": "Boolean"
          }
        ]
      }
    },
    "placeToPoint": {
      "type": "function",
      "name": "placeToPoint",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Places the widget in relation to the given point"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "point {Map} Coordinate of any point with the keys <code>left</code>\nand <code>top</code>.",
            "paramName": "point",
            "description": " Coordinate of any point with the keys <code>left</code>\nand <code>top</code>.",
            "type": "Map"
          }
        ]
      }
    },
    "_getPlacementOffsets": {
      "type": "function",
      "name": "_getPlacementOffsets",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the placement offsets as a map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The placement offsets",
            "type": "Map",
            "desc": " The placement offsets"
          }
        ]
      }
    },
    "__getPlacementSize": {
      "type": "function",
      "name": "__getPlacementSize",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the size of the object to place. The callback will be called with\nthe size as first argument. This methods works asynchronously.\n\nThe size of the object to place is the size of the widget. If a widget\nincluding this mixin needs a different size it can implement the method\n<code>_computePlacementSize</code>, which returns the size."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} This function will be called with the size as\nfirst argument",
            "paramName": "callback",
            "description": " This function will be called with the size as\nfirst argument",
            "type": "Function"
          }
        ]
      }
    },
    "_place": {
      "type": "function",
      "name": "_place",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal method to read specific this properties and\napply the results to the this afterwards."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "coords {Map} Location of the object to align the this to. This map\nshould have the keys <code>left</code>, <code>top</code>, <code>right</code>\nand <code>bottom</code>.",
            "paramName": "coords",
            "description": " Location of the object to align the this to. This map\nshould have the keys <code>left</code>, <code>top</code>, <code>right</code>\nand <code>bottom</code>.",
            "type": "Map"
          }
        ]
      }
    },
    "getPosition": {
      "type": "function",
      "name": "getPosition",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPosition": {
      "type": "function",
      "name": "setPosition",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPosition": {
      "type": "function",
      "name": "resetPosition",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "getPlaceMethod": {
      "type": "function",
      "name": "getPlaceMethod",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPlaceMethod": {
      "type": "function",
      "name": "setPlaceMethod",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPlaceMethod": {
      "type": "function",
      "name": "resetPlaceMethod",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "getDomMove": {
      "type": "function",
      "name": "getDomMove",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isDomMove": {
      "type": "function",
      "name": "isDomMove",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDomMove": {
      "type": "function",
      "name": "setDomMove",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDomMove": {
      "type": "function",
      "name": "resetDomMove",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "getPlacementModeX": {
      "type": "function",
      "name": "getPlacementModeX",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPlacementModeX": {
      "type": "function",
      "name": "setPlacementModeX",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPlacementModeX": {
      "type": "function",
      "name": "resetPlacementModeX",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "getPlacementModeY": {
      "type": "function",
      "name": "getPlacementModeY",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPlacementModeY": {
      "type": "function",
      "name": "setPlacementModeY",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetPlacementModeY": {
      "type": "function",
      "name": "resetPlacementModeY",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "getOffsetLeft": {
      "type": "function",
      "name": "getOffsetLeft",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOffsetLeft": {
      "type": "function",
      "name": "setOffsetLeft",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOffsetLeft": {
      "type": "function",
      "name": "resetOffsetLeft",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "getOffsetTop": {
      "type": "function",
      "name": "getOffsetTop",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOffsetTop": {
      "type": "function",
      "name": "setOffsetTop",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOffsetTop": {
      "type": "function",
      "name": "resetOffsetTop",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "getOffsetRight": {
      "type": "function",
      "name": "getOffsetRight",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOffsetRight": {
      "type": "function",
      "name": "setOffsetRight",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOffsetRight": {
      "type": "function",
      "name": "resetOffsetRight",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "getOffsetBottom": {
      "type": "function",
      "name": "getOffsetBottom",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOffsetBottom": {
      "type": "function",
      "name": "setOffsetBottom",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOffsetBottom": {
      "type": "function",
      "name": "resetOffsetBottom",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "getOffset": {
      "type": "function",
      "name": "getOffset",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOffset": {
      "type": "function",
      "name": "setOffset",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOffset": {
      "type": "function",
      "name": "resetOffset",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MPlacement"
    },
    "__forward": {
      "type": "function",
      "name": "__forward",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Forward the call with the given function name to the children container"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "functionName {String} name of the method to forward",
            "paramName": "functionName",
            "description": " name of the method to forward",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "a1 {var} first argument of the method to call",
            "paramName": "a1",
            "description": " first argument of the method to call",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "a2 {var} second argument of the method to call",
            "paramName": "a2",
            "description": " second argument of the method to call",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "a3 {var} third argument of the method to call",
            "paramName": "a3",
            "description": " third argument of the method to call",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The return value of the forward method",
            "type": "var",
            "desc": " The return value of the forward method"
          }
        ]
      }
    },
    "getChildren": {
      "type": "function",
      "name": "getChildren",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the children list"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{LayoutItem[]} The children array (Arrays are\nreference types, please do not modify them in-place)",
            "type": "LayoutItem[]",
            "desc": " The children array (Arrays are\nreference types, please do not modify them in-place)"
          }
        ]
      }
    },
    "hasChildren": {
      "type": "function",
      "name": "hasChildren",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget contains children."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "Boolean",
            "desc": " Returns <code>true</code> when the widget has children."
          }
        ]
      }
    },
    "add": {
      "type": "function",
      "name": "add",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds a new child widget.\n\nThe supported keys of the layout options map depend on the layout manager\nused to position the widget. The options are documented in the class\ndocumentation of each layout manager {@link qx.ui.layout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the item to add.",
            "paramName": "child",
            "description": " the item to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Widget} This object (for chaining support)",
            "type": "qx.ui.core.Widget",
            "desc": " This object (for chaining support)"
          }
        ]
      }
    },
    "remove": {
      "type": "function",
      "name": "remove",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the given child item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the item to remove",
            "paramName": "child",
            "description": " the item to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Widget} This object (for chaining support)",
            "type": "qx.ui.core.Widget",
            "desc": " This object (for chaining support)"
          }
        ]
      }
    },
    "removeAll": {
      "type": "function",
      "name": "removeAll",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove all children."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the removed children.",
            "type": "Array",
            "desc": " An array containing the removed children."
          }
        ]
      }
    },
    "indexOf": {
      "type": "function",
      "name": "indexOf",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the index position of the given item if it is\na child item. Otherwise it returns <code>-1</code>.\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the item to query for",
            "paramName": "child",
            "description": " the item to query for",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\nthe given item is no child of this layout.",
            "type": "Integer",
            "desc": " The index position or <code>-1</code> when\nthe given item is no child of this layout."
          }
        ]
      }
    },
    "addAt": {
      "type": "function",
      "name": "addAt",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a child at the specified index\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the item will be inserted",
            "paramName": "index",
            "description": " Index, at which the item will be inserted",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "addBefore": {
      "type": "function",
      "name": "addBefore",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add an item before another already inserted item\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {LayoutItem} item before the new item will be inserted.",
            "paramName": "before",
            "description": " item before the new item will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "addAfter": {
      "type": "function",
      "name": "addAfter",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add an item after another already inserted item\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {LayoutItem} item, after which the new item will be inserted",
            "paramName": "after",
            "description": " item, after which the new item will be inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "removeAt": {
      "type": "function",
      "name": "removeAt",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the item at the specified index.\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the item to remove.",
            "paramName": "index",
            "description": " Index of the item to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The removed item",
            "type": "qx.ui.core.LayoutItem",
            "desc": " The removed item"
          }
        ]
      }
    },
    "getSpacingX": {
      "type": "function",
      "name": "getSpacingX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSpacingX": {
      "type": "function",
      "name": "setSpacingX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetSpacingX": {
      "type": "function",
      "name": "resetSpacingX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getSpacingY": {
      "type": "function",
      "name": "getSpacingY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSpacingY": {
      "type": "function",
      "name": "setSpacingY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetSpacingY": {
      "type": "function",
      "name": "resetSpacingY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getIconColumnWidth": {
      "type": "function",
      "name": "getIconColumnWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setIconColumnWidth": {
      "type": "function",
      "name": "setIconColumnWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetIconColumnWidth": {
      "type": "function",
      "name": "resetIconColumnWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getArrowColumnWidth": {
      "type": "function",
      "name": "getArrowColumnWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setArrowColumnWidth": {
      "type": "function",
      "name": "setArrowColumnWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetArrowColumnWidth": {
      "type": "function",
      "name": "resetArrowColumnWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getBlockerColor": {
      "type": "function",
      "name": "getBlockerColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Color",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setBlockerColor": {
      "type": "function",
      "name": "setBlockerColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Color",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetBlockerColor": {
      "type": "function",
      "name": "resetBlockerColor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getBlockerOpacity": {
      "type": "function",
      "name": "getBlockerOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setBlockerOpacity": {
      "type": "function",
      "name": "setBlockerOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetBlockerOpacity": {
      "type": "function",
      "name": "resetBlockerOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getSelectedButton": {
      "type": "function",
      "name": "getSelectedButton",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.core.Widget",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSelectedButton": {
      "type": "function",
      "name": "setSelectedButton",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.core.Widget",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetSelectedButton": {
      "type": "function",
      "name": "resetSelectedButton",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOpenedButton": {
      "type": "function",
      "name": "getOpenedButton",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.core.Widget",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOpenedButton": {
      "type": "function",
      "name": "setOpenedButton",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.core.Widget",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOpenedButton": {
      "type": "function",
      "name": "resetOpenedButton",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOpener": {
      "type": "function",
      "name": "getOpener",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.core.Widget",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOpener": {
      "type": "function",
      "name": "setOpener",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.core.Widget",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOpener": {
      "type": "function",
      "name": "resetOpener",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOpenInterval": {
      "type": "function",
      "name": "getOpenInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOpenInterval": {
      "type": "function",
      "name": "setOpenInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOpenInterval": {
      "type": "function",
      "name": "resetOpenInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getCloseInterval": {
      "type": "function",
      "name": "getCloseInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setCloseInterval": {
      "type": "function",
      "name": "setCloseInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetCloseInterval": {
      "type": "function",
      "name": "resetCloseInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getBlockBackground": {
      "type": "function",
      "name": "getBlockBackground",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isBlockBackground": {
      "type": "function",
      "name": "isBlockBackground",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setBlockBackground": {
      "type": "function",
      "name": "setBlockBackground",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetBlockBackground": {
      "type": "function",
      "name": "resetBlockBackground",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 803,
        "column": 2
      },
      "end": {
        "line": 812,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}