{
  "version": 3,
  "sources": [
    "VirtualDropDownList.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "popup",
    "Popup",
    "construct",
    "target",
    "core",
    "Assert",
    "assertNotNull",
    "assertNotUndefined",
    "assertInterface",
    "form",
    "AbstractVirtualBox",
    "layout",
    "VBox",
    "_target",
    "_createChildControl",
    "addListener",
    "__onChangeVisibility",
    "__defaultSelection",
    "data",
    "Array",
    "initSelection",
    "properties",
    "autoHide",
    "refine",
    "init",
    "keepActive",
    "selection",
    "check",
    "event",
    "apply",
    "nullable",
    "deferredInit",
    "events",
    "members",
    "_preselected",
    "__ignoreSelection",
    "__ignoreListSelection",
    "open",
    "placeToWidget",
    "show",
    "close",
    "hide",
    "setPreselected",
    "modelItem",
    "listSelection",
    "getChildControl",
    "getSelection",
    "helper",
    "__synchronizeSelection",
    "dispose",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "list",
    "List",
    "set",
    "focusable",
    "keepFocus",
    "height",
    "width",
    "maxHeight",
    "getMaxListHeight",
    "selectionMode",
    "quickSelection",
    "_onListChangeSelection",
    "_handlePointer",
    "_onChangeModel",
    "__adjustHeight",
    "_onChangeDelegate",
    "add",
    "flex",
    "_handleKeyboard",
    "isVisible",
    "getKeyIdentifier",
    "__selectPreselected",
    "clone",
    "setTarget",
    "setBubbles",
    "dispatchEvent",
    "__onChangeSelection",
    "getItem",
    "__adjustSize",
    "removeAll",
    "_applySelection",
    "value",
    "old",
    "removeListener",
    "splice",
    "source",
    "equals",
    "getLength",
    "spliceArg",
    "length",
    "concat",
    "toArray",
    "getBounds",
    "addListenerOnce",
    "__adjustWidth",
    "setWidth",
    "availableHeight",
    "__getAvailableHeight",
    "itemsHeight",
    "getPane",
    "getRowConfig",
    "getTotalSize",
    "minHeight",
    "getMinHeight",
    "setMaxHeight",
    "distance",
    "getLayoutLocation",
    "viewPortHeight",
    "bom",
    "Viewport",
    "getHeight",
    "toTop",
    "top",
    "toBottom",
    "bottom",
    "destruct",
    "VirtualDropDownList"
  ],
  "mappings": "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",
  "file": "VirtualDropDownList.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * A drop-down (popup) widget which contains a virtual list for selection.\n *\n * @childControl list {qx.ui.list.List} The virtual list.\n *\n * @internal\n */\nqx.Class.define(\"qx.ui.form.core.VirtualDropDownList\",\n{\n  extend  : qx.ui.popup.Popup,\n\n\n  /**\n   * Creates the drop-down list.\n   *\n   * @param target {qx.ui.form.core.AbstractVirtualBox} The composite widget.\n   */\n  construct : function(target)\n  {\n    qx.core.Assert.assertNotNull(target, \"Invalid parameter 'target'!\");\n    qx.core.Assert.assertNotUndefined(target, \"Invalid parameter 'target'!\");\n    qx.core.Assert.assertInterface(target, qx.ui.form.core.AbstractVirtualBox,\n      \"Invalid parameter 'target'!\");\n\n    this.base(arguments, new qx.ui.layout.VBox());\n\n    this._target = target;\n\n    this._createChildControl(\"list\");\n    this.addListener(\"changeVisibility\", this.__onChangeVisibility, this);\n\n    this.__defaultSelection = new qx.data.Array();\n    this.initSelection(this.__defaultSelection);\n  },\n\n\n  properties :\n  {\n    // overridden\n    autoHide :\n    {\n      refine : true,\n      init : false\n    },\n\n\n    // overridden\n    keepActive :\n    {\n      refine : true,\n      init : true\n    },\n\n\n    /** Current selected items. */\n    selection :\n    {\n      check : \"qx.data.Array\",\n      event : \"changeSelection\",\n      apply : \"_applySelection\",\n      nullable : false,\n      deferredInit : true\n    }\n  },\n\n\n  events : {\n    /**\n     * This event is fired as soon as the content of the selection property changes, but\n     * this is not equal to the change of the selection of the widget. If the selection\n     * of the widget changes, the content of the array stored in the selection property\n     * changes. This means you have to listen to the change event of the selection array\n     * to get an event as soon as the user changes the selected item.\n     * <pre class=\"javascript\">obj.getSelection().addListener(\"change\", listener, this);</pre>\n     */\n    \"changeSelection\" : \"qx.event.type.Data\"\n  },\n\n\n  members :\n  {\n    /** @type {qx.ui.form.core.AbstractVirtualBox} The composite widget. */\n    _target : null,\n\n\n    /** @type {var} The pre-selected model item. */\n    _preselected : null,\n\n\n    /**\n     * @type {Boolean} Indicator to ignore selection changes from the\n     * {@link #selection} array.\n     */\n    __ignoreSelection : false,\n\n\n    /** @type {Boolean} Indicator to ignore selection changes from the list. */\n    __ignoreListSelection : false,\n\n\n    __defaultSelection : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Shows the drop-down.\n     */\n    open : function()\n    {\n      this.placeToWidget(this._target, true);\n      this.show();\n    },\n\n\n    /**\n     * Hides the drop-down.\n     */\n    close : function() {\n      this.hide();\n    },\n\n\n    /**\n     * Pre-selects the drop-down item corresponding to the given model object.\n     *\n     * @param modelItem {Object} Item to be pre-selected.\n     */\n    setPreselected : function(modelItem)\n    {\n      this._preselected = modelItem;\n      this.__ignoreListSelection = true;\n      var listSelection = this.getChildControl(\"list\").getSelection();\n      var helper = new qx.data.Array([modelItem]);\n      this.__synchronizeSelection(helper, listSelection);\n      helper.dispose();\n      this.__ignoreListSelection = false;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"list\":\n          control = new qx.ui.list.List().set({\n            focusable: false,\n            keepFocus: true,\n            keepActive: true,\n            height: null,\n            width: null,\n            maxHeight: this._target.getMaxListHeight(),\n            selectionMode: \"one\",\n            quickSelection: true\n          });\n\n          control.getSelection().addListener(\"change\", this._onListChangeSelection, this);\n          control.addListener(\"tap\", this._handlePointer, this);\n          control.addListener(\"changeModel\", this._onChangeModel, this);\n          control.addListener(\"changeModelLength\", this.__adjustHeight, this);\n          control.addListener(\"changeDelegate\", this._onChangeDelegate, this);\n\n          this.add(control, {flex: 1});\n          break;\n      }\n\n      return control || this.base(arguments, id, hash);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Handles the complete keyboard events dispatched on the widget.\n     *\n     * @param event {qx.event.type.KeySequence} The keyboard event.\n     */\n    _handleKeyboard : function(event)\n    {\n      if (this.isVisible() && event.getKeyIdentifier() === \"Enter\") {\n        this.__selectPreselected();\n        return;\n      }\n\n      var clone = event.clone();\n      clone.setTarget(this.getChildControl(\"list\"));\n      clone.setBubbles(false);\n\n      this.getChildControl(\"list\").dispatchEvent(clone);\n    },\n\n\n    /**\n     * Handles all mouse events dispatched on the widget.\n     *\n     * @param event {qx.event.type.Mouse} The mouse event.\n     */\n    _handlePointer : function(event) {\n      this.__selectPreselected();\n    },\n\n\n    /**\n     * Handler for the local selection change. The method is responsible for\n     * the synchronization between the own selection and the selection\n     * form the drop-down.\n     *\n     * @param event {qx.event.type.Data} The data event.\n     */\n    __onChangeSelection : function(event)\n    {\n      if (this.__ignoreSelection) {\n        return;\n      }\n\n      var selection = this.getSelection();\n      var listSelection = this.getChildControl(\"list\").getSelection();\n\n      this.__ignoreListSelection = true;\n      this.__synchronizeSelection(selection, listSelection);\n      this.__ignoreListSelection = false;\n\n      this.__ignoreSelection = true;\n      this.__synchronizeSelection(listSelection, selection);\n      this.__ignoreSelection = false;\n    },\n\n\n    /**\n     * Handler for the selection change on the list. The method is responsible\n     * for the synchronization between the list selection and the own selection.\n     *\n     * @param event {qx.event.type.Data} The data event.\n     */\n    _onListChangeSelection : function(event)\n    {\n      if (this.__ignoreListSelection) {\n        return;\n      }\n\n      var listSelection = this.getChildControl(\"list\").getSelection();\n\n      if (this.isVisible()) {\n        this.setPreselected(listSelection.getItem(0));\n      } else {\n        this.__ignoreSelection = true;\n        this.__synchronizeSelection(listSelection, this.getSelection());\n        this.__ignoreSelection = false;\n      }\n    },\n\n\n    /**\n     * Handler for the own visibility changes. The method is responsible that\n     * the list selects the current selected item.\n     *\n     * @param event {qx.event.type.Data} The event.\n     */\n    __onChangeVisibility : function(event)\n    {\n      if (this.isVisible())\n      {\n        if (this._preselected == null)\n        {\n          var selection = this.getSelection();\n          var listSelection = this.getChildControl(\"list\").getSelection();\n          this.__synchronizeSelection(selection, listSelection);\n        }\n        this.__adjustSize();\n      } else {\n        this.setPreselected(null);\n      }\n    },\n\n\n    /**\n     * Handler for the model change event.\n     *\n     * @param event {qx.event.type.Data} The change event.\n     */\n    _onChangeModel : function(event) {\n    },\n\n\n    /**\n     * Handler for the delegate change event.\n     *\n     * @param event {qx.event.type.Data} The change event.\n     */\n    _onChangeDelegate : function(event) {\n      this.getSelection().removeAll();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n\n    // property apply\n    _applySelection : function(value, old)\n    {\n      value.addListener(\"change\", this.__onChangeSelection, this);\n\n      if (old != null) {\n        old.removeListener(\"change\", this.__onChangeSelection, this);\n      }\n\n      this.__synchronizeSelection(\n        value, this.getChildControl(\"list\").getSelection(value)\n      );\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Helper method to select the current preselected item, also closes the\n     * drop-down.\n     */\n    __selectPreselected : function()\n    {\n      if (this._preselected != null)\n      {\n        var selection = this.getSelection();\n        selection.splice(0, 1, this._preselected);\n        this._preselected = null;\n        this.close();\n      }\n    },\n\n\n    /**\n     * Helper method to synchronize both selection. The target selection has\n     * the same selection like the source selection after the synchronization.\n     *\n     * @param source {qx.data.Array} The source selection.\n     * @param target {qx.data.Array} The target selection.\n     */\n    __synchronizeSelection : function(source, target)\n    {\n      if (source.equals(target)) {\n        return;\n      }\n\n      if (source.getLength() <= 0) {\n        target.removeAll();\n      }\n      else\n      {\n        // build arguments array for splice(0, target.length, source[0], source[1], ...)\n        var spliceArg = [0, target.length];\n        spliceArg = spliceArg.concat(source.toArray());\n\n        // use apply since it allow to use an array as the argument array\n        // (calling splice directly with an array insert it in the array on which splice is called)\n        // don't forget to dispose the array created by splice\n        target.splice.apply(target, spliceArg).dispose();\n      }\n    },\n\n\n    /**\n     * Adjust the drop-down to the available width and height, by calling\n     * {@link #__adjustWidth} and {@link #__adjustHeight}.\n     */\n    __adjustSize : function()\n    {\n      if (!this._target.getBounds()) {\n        this.addListenerOnce(\"appear\", this.__adjustSize, this);\n        return;\n      }\n\n      this.__adjustWidth();\n      this.__adjustHeight();\n    },\n\n\n    /**\n     * Adjust the drop-down to the available width. The width is limited by\n     * the current with from the _target.\n     */\n    __adjustWidth : function()\n    {\n      var width = this._target.getBounds().width;\n      this.setWidth(width);\n    },\n\n\n    /**\n     * Adjust the drop-down to the available height. Ensure that the list\n     * is never bigger that the max list height and the available space\n     * in the viewport.\n     */\n    __adjustHeight : function()\n    {\n      var availableHeight = this.__getAvailableHeight();\n      if (availableHeight === null) {\n        return;\n      }\n\n      var maxHeight = this._target.getMaxListHeight();\n      var list = this.getChildControl(\"list\");\n      var itemsHeight = list.getPane().getRowConfig().getTotalSize();\n\n      if (maxHeight == null || itemsHeight < maxHeight) {\n        maxHeight = itemsHeight;\n      }\n\n      if (maxHeight > availableHeight) {\n        maxHeight = availableHeight;\n      }\n\n      var minHeight = list.getMinHeight();\n      if (null !== minHeight && minHeight > maxHeight) {\n        maxHeight = minHeight;\n      }\n\n      list.setMaxHeight(maxHeight);\n    },\n\n\n    /**\n     * Calculates the available height in the viewport.\n     *\n     * @return {Integer|null} Available height in the viewport.\n     */\n    __getAvailableHeight : function()\n    {\n      var distance = this.getLayoutLocation(this._target);\n      if (!distance) {\n        return null;\n      }\n\n      var viewPortHeight = qx.bom.Viewport.getHeight();\n\n      // distance to the bottom and top borders of the viewport\n      var toTop = distance.top;\n      var toBottom = viewPortHeight - distance.bottom;\n\n      return toTop > toBottom ? toTop : toBottom;\n    }\n  },\n\n  destruct : function()\n  {\n    if (this.__defaultSelection) {\n      this.__defaultSelection.dispose();\n    }\n  }\n});\n"
  ]
}