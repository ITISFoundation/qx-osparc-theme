{
  "className": "qx.ui.tree.core.AbstractTreeItem",
  "packageName": "qx.ui.tree.core",
  "name": "AbstractTreeItem",
  "superClass": "qx.ui.tree.core.AbstractItem",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 30,
        "column": 0
      },
      "end": {
        "line": 580,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nFabian Jakobs (fjakobs)\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nDerrell Lipman (derrell)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The AbstractTreeItem serves as a common superclass for the {@link\nqx.ui.tree.TreeFile} and {@link qx.ui.tree.TreeFolder} classes."
        }
      ],
      "@childControl": [
        {
          "name": "@childControl",
          "body": "label {qx.ui.basic.Label} label of the tree item"
        },
        {
          "name": "@childControl",
          "body": "icon {qx.ui.basic.Image} icon of the tree item"
        },
        {
          "name": "@childControl",
          "body": "open {qx.ui.tree.core.FolderOpenButton} button to open/close a subtree"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 36,
        "column": 2
      },
      "end": {
        "line": 41,
        "column": 3
      }
    }
  },
  "properties": {
    "parent": {
      "location": {
        "start": {
          "line": 49,
          "column": 4
        },
        "end": {
          "line": 53,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The parent tree folder."
          }
        ]
      },
      "name": "parent",
      "propertyType": "new",
      "allowNull": true,
      "check": "qx.ui.tree.core.AbstractTreeItem"
    },
    "model": {
      "type": "property",
      "name": "model",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MModelProperty"
    }
  },
  "members": {
    "__children": {
      "location": {
        "start": {
          "line": 59,
          "column": 4
        },
        "end": {
          "line": 59,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__childrenContainer": {
      "location": {
        "start": {
          "line": 60,
          "column": 4
        },
        "end": {
          "line": 60,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getTree": {
      "location": {
        "start": {
          "line": 69,
          "column": 4
        },
        "end": {
          "line": 81,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the tree the tree item is connected to. If the item is not part of\na tree <code>null</code> will be returned."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.tree.Tree|null} The item's tree or <code>null</code>.",
            "type": "qx.ui.tree.Tree|null",
            "desc": " The item's tree or <code>null</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyOpen": {
      "location": {
        "start": {
          "line": 85,
          "column": 4
        },
        "end": {
          "line": 92,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.tree.core.AbstractItem",
      "appearsIn": [
        "qx.ui.tree.core.AbstractItem"
      ]
    },
    "_shouldShowOpenSymbol": {
      "location": {
        "start": {
          "line": 101,
          "column": 4
        },
        "end": {
          "line": 126,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nINDENT HANDLING\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the open symbol should be shown.",
            "type": "Boolean",
            "desc": " Whether the open symbol should be shown."
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.tree.core.AbstractItem",
      "appearsIn": [
        "qx.ui.tree.core.AbstractItem"
      ]
    },
    "_updateIndent": {
      "location": {
        "start": {
          "line": 130,
          "column": 4
        },
        "end": {
          "line": 137,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.tree.core.AbstractItem",
      "appearsIn": [
        "qx.ui.tree.core.AbstractItem"
      ]
    },
    "getLevel": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 167,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null} The item's nesting level or <code>null</code>.",
            "type": "Integer|null",
            "desc": " The item's nesting level or <code>null</code>."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.tree.core.AbstractItem",
      "appearsIn": [
        "qx.ui.tree.core.AbstractItem"
      ]
    },
    "addState": {
      "location": {
        "start": {
          "line": 177,
          "column": 4
        },
        "end": {
          "line": 189,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSTATE HANDLING\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} The state to add",
            "paramName": "state",
            "description": " The state to add",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "removeState": {
      "location": {
        "start": {
          "line": 193,
          "column": 4
        },
        "end": {
          "line": 205,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} the state to clear.",
            "paramName": "state",
            "description": " the state to clear.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "getChildrenContainer": {
      "location": {
        "start": {
          "line": 220,
          "column": 4
        },
        "end": {
          "line": 230,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCHILDREN CONTAINER\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns the widget, which acts as container for the child items.\nThis widget must have a vertical box layout."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The children container",
            "type": "qx.ui.core.Widget",
            "desc": " The children container"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "hasChildrenContainer": {
      "location": {
        "start": {
          "line": 238,
          "column": 4
        },
        "end": {
          "line": 240,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the tree item has a children container"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether it has a children container",
            "type": "Boolean",
            "desc": " Whether it has a children container"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getParentChildrenContainer": {
      "location": {
        "start": {
          "line": 250,
          "column": 4
        },
        "end": {
          "line": 259,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the children container of the item's parent. This function will return\n<code>null</code>, if the item does not have a parent or is not the root\nitem."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The parent's children container.",
            "type": "qx.ui.core.Widget",
            "desc": " The parent's children container."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getChildren": {
      "location": {
        "start": {
          "line": 276,
          "column": 4
        },
        "end": {
          "line": 278,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCHILDREN HANDLING\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Get all child items.\n\nNote: Don not modify the returned array, since this function does not\nreturn a copy!"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{AbstractTreeItem[]} An array of all child items.",
            "type": "AbstractTreeItem[]",
            "desc": " An array of all child items."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasChildren": {
      "location": {
        "start": {
          "line": 282,
          "column": 4
        },
        "end": {
          "line": 284,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the item has any children.",
            "type": "Boolean",
            "desc": " Whether the item has any children."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.tree.core.AbstractItem",
      "appearsIn": [
        "qx.ui.tree.core.AbstractItem"
      ]
    },
    "getItems": {
      "location": {
        "start": {
          "line": 298,
          "column": 4
        },
        "end": {
          "line": 325,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns all children of the folder."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "recursive {Boolean ? true} whether children of subfolder should be\nincluded",
            "paramName": "recursive",
            "description": " whether children of subfolder should be\nincluded",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "invisible {Boolean ? true} whether invisible children should be\nincluded",
            "paramName": "invisible",
            "description": " whether invisible children should be\nincluded",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "ignoreFirst {Boolean ? true} Whether the current treeItem should\nbe excluded from the list.",
            "paramName": "ignoreFirst",
            "description": " Whether the current treeItem should\nbe excluded from the list.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{AbstractTreeItem[]} list of children",
            "type": "AbstractTreeItem[]",
            "desc": " list of children"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "recursiveAddToWidgetQueue": {
      "location": {
        "start": {
          "line": 334,
          "column": 4
        },
        "end": {
          "line": 340,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds this item and recursively all sub items to the widget queue to\nupdate the indentation."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__addChildrenToParent": {
      "location": {
        "start": {
          "line": 346,
          "column": 4
        },
        "end": {
          "line": 351,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds the item's children container to the parent's children container."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "add": {
      "location": {
        "start": {
          "line": 359,
          "column": 4
        },
        "end": {
          "line": 397,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds the passed tree items to the end of this item's children list."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {AbstractTreeItem} variable number of tree items to add",
            "paramName": "varargs",
            "description": " variable number of tree items to add",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addAt": {
      "location": {
        "start": {
          "line": 406,
          "column": 4
        },
        "end": {
          "line": 448,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds the tree item to the current item, at the given index."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "treeItem {AbstractTreeItem} new tree item to insert",
            "paramName": "treeItem",
            "description": " new tree item to insert",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} position to insert into",
            "paramName": "index",
            "description": " position to insert into",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addBefore": {
      "location": {
        "start": {
          "line": 457,
          "column": 4
        },
        "end": {
          "line": 471,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a tree item to this item before the existing child <code>before</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "treeItem {AbstractTreeItem} tree item to add",
            "paramName": "treeItem",
            "description": " tree item to add",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          },
          {
            "name": "@param",
            "body": "before {AbstractTreeItem} existing child to add the item before",
            "paramName": "before",
            "description": " existing child to add the item before",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addAfter": {
      "location": {
        "start": {
          "line": 480,
          "column": 4
        },
        "end": {
          "line": 494,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a tree item to this item after the existing child <code>before</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "treeItem {AbstractTreeItem} tree item to add",
            "paramName": "treeItem",
            "description": " tree item to add",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          },
          {
            "name": "@param",
            "body": "after {AbstractTreeItem} existing child to add the item after",
            "paramName": "after",
            "description": " existing child to add the item after",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addAtBegin": {
      "location": {
        "start": {
          "line": 502,
          "column": 4
        },
        "end": {
          "line": 504,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a tree item as the first child of this item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "treeItem {AbstractTreeItem} tree item to add",
            "paramName": "treeItem",
            "description": " tree item to add",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 512,
          "column": 4
        },
        "end": {
          "line": 543,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the passed tree items from this item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {AbstractTreeItem} variable number of tree items to remove",
            "paramName": "varargs",
            "description": " variable number of tree items to remove",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAt": {
      "location": {
        "start": {
          "line": 551,
          "column": 4
        },
        "end": {
          "line": 557,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the child with the given child index."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the child to remove",
            "paramName": "index",
            "description": " Index of the child to remove",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAll": {
      "location": {
        "start": {
          "line": 563,
          "column": 4
        },
        "end": {
          "line": 571,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove all child items from this item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setModel": {
      "type": "function",
      "name": "setModel",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IModel",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set the representative data for the item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The data.",
            "paramName": "value",
            "description": " The data.",
            "type": "var"
          }
        ]
      }
    },
    "getModel": {
      "type": "function",
      "name": "getModel",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IModel",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the representative data for the item"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The data.",
            "type": "var",
            "desc": " The data."
          }
        ]
      }
    },
    "resetModel": {
      "type": "function",
      "name": "resetModel",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IModel"
    },
    "_applyModel": {
      "type": "function",
      "name": "_applyModel",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.form.MModelProperty"
    },
    "getOpen": {
      "type": "function",
      "name": "getOpen",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isOpen": {
      "type": "function",
      "name": "isOpen",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOpen": {
      "type": "function",
      "name": "setOpen",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOpen": {
      "type": "function",
      "name": "resetOpen",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOpenSymbolMode": {
      "type": "function",
      "name": "getOpenSymbolMode",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOpenSymbolMode": {
      "type": "function",
      "name": "setOpenSymbolMode",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOpenSymbolMode": {
      "type": "function",
      "name": "resetOpenSymbolMode",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getIndent": {
      "type": "function",
      "name": "getIndent",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setIndent": {
      "type": "function",
      "name": "setIndent",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetIndent": {
      "type": "function",
      "name": "resetIndent",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getIcon": {
      "type": "function",
      "name": "getIcon",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setIcon": {
      "type": "function",
      "name": "setIcon",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetIcon": {
      "type": "function",
      "name": "resetIcon",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getIconOpened": {
      "type": "function",
      "name": "getIconOpened",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setIconOpened": {
      "type": "function",
      "name": "setIconOpened",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetIconOpened": {
      "type": "function",
      "name": "resetIconOpened",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getLabel": {
      "type": "function",
      "name": "getLabel",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setLabel": {
      "type": "function",
      "name": "setLabel",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetLabel": {
      "type": "function",
      "name": "resetLabel",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getParent": {
      "type": "function",
      "name": "getParent",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.tree.core.AbstractTreeItem",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setParent": {
      "type": "function",
      "name": "setParent",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.tree.core.AbstractTreeItem",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetParent": {
      "type": "function",
      "name": "resetParent",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 575,
        "column": 2
      },
      "end": {
        "line": 579,
        "column": 3
      }
    }
  },
  "descendants": [
    "qx.ui.tree.TreeFolder",
    "qx.ui.tree.TreeFile"
  ]
}