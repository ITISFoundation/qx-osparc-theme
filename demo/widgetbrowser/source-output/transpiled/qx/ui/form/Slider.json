{
  "className": "qx.ui.form.Slider",
  "packageName": "qx.ui.form",
  "name": "Slider",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [
    "qx.ui.form.IForm",
    "qx.ui.form.INumberForm",
    "qx.ui.form.IRange"
  ],
  "mixins": [
    "qx.ui.form.MForm"
  ],
  "clazz": {
    "location": {
      "start": {
        "line": 57,
        "column": 0
      },
      "end": {
        "line": 1126,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The Slider widget provides a vertical or horizontal slider.\n\nThe Slider is the classic widget for controlling a bounded value.\nIt lets the user move a slider handle along a horizontal or vertical\ngroove and translates the handle's position into an integer value\nwithin the defined range.\n\nThe Slider has very few of its own functions.\nThe most useful functions are slideTo() to set the slider directly to some\nvalue; setSingleStep(), setPageStep() to set the steps; and setMinimum()\nand setMaximum() to define the range of the slider.\n\nA slider accepts focus on Tab and provides both a mouse wheel and\na keyboard interface. The keyboard interface is the following:\n\n* Left/Right move a horizontal slider by one single step.\n* Up/Down move a vertical slider by one single step.\n* PageUp moves up one page.\n* PageDown moves down one page.\n* Home moves to the start (minimum).\n* End moves to the end (maximum).\n\nHere are the main properties of the class:\n\n# <code>value</code>: The bounded integer that {@link qx.ui.form.INumberForm}\nmaintains.\n# <code>minimum</code>: The lowest possible value.\n# <code>maximum</code>: The highest possible value.\n# <code>singleStep</code>: The smaller of two natural steps that an abstract\nsliders provides and typically corresponds to the user pressing an arrow key.\n# <code>pageStep</code>: The larger of two natural steps that an abstract\nslider provides and typically corresponds to the user pressing PageUp or\nPageDown."
        }
      ],
      "@childControl": [
        {
          "name": "@childControl",
          "body": "knob {qx.ui.core.Widget} knob to set the value of the slider"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 78,
        "column": 2
      },
      "end": {
        "line": 104,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "orientation {String?\"horizontal\"} Configure the\n{@link #orientation} property",
          "paramName": "orientation",
          "description": " Configure the\n{@link #orientation} property",
          "optional": true,
          "defaultValue": "\"horizontal\"",
          "type": "String"
        }
      ]
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 133,
          "column": 4
        },
        "end": {
          "line": 137,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "defaultValue": "slider",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "focusable": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 145,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "focusable",
      "propertyType": "new",
      "refine": true,
      "defaultValue": true,
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "orientation": {
      "location": {
        "start": {
          "line": 149,
          "column": 4
        },
        "end": {
          "line": 154,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the slider is horizontal or vertical."
          }
        ]
      },
      "name": "orientation",
      "propertyType": "new",
      "apply": "_applyOrientation",
      "possibleValues": [
        "horizontal",
        "vertical"
      ],
      "defaultValue": "horizontal"
    },
    "value": {
      "location": {
        "start": {
          "line": 164,
          "column": 4
        },
        "end": {
          "line": 170,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The current slider value.\n\nStrictly validates according to {@link #minimum} and {@link #maximum}.\nDo not apply any value correction to the incoming value. If you depend\non this, please use {@link #slideTo} instead."
          }
        ]
      },
      "name": "value",
      "propertyType": "new",
      "apply": "_applyValue",
      "allowNull": true,
      "check": "typeof value==='number'&&value>=this.getMinimum()&&value<=this.getMaximum()",
      "defaultValue": 0
    },
    "minimum": {
      "location": {
        "start": {
          "line": 177,
          "column": 4
        },
        "end": {
          "line": 183,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The minimum slider value (may be negative). This value must be smaller\nthan {@link #maximum}."
          }
        ]
      },
      "name": "minimum",
      "propertyType": "new",
      "event": "changeMinimum",
      "apply": "_applyMinimum",
      "check": "Integer",
      "defaultValue": 0
    },
    "maximum": {
      "location": {
        "start": {
          "line": 190,
          "column": 4
        },
        "end": {
          "line": 196,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The maximum slider value (may be negative). This value must be larger\nthan {@link #minimum}."
          }
        ]
      },
      "name": "maximum",
      "propertyType": "new",
      "event": "changeMaximum",
      "apply": "_applyMaximum",
      "check": "Integer",
      "defaultValue": 100
    },
    "singleStep": {
      "location": {
        "start": {
          "line": 203,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The amount to increment on each event. Typically corresponds\nto the user pressing an arrow key."
          }
        ]
      },
      "name": "singleStep",
      "propertyType": "new",
      "check": "Integer",
      "defaultValue": 1
    },
    "pageStep": {
      "location": {
        "start": {
          "line": 214,
          "column": 4
        },
        "end": {
          "line": 218,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The amount to increment on each event. Typically corresponds\nto the user pressing <code>PageUp</code> or <code>PageDown</code>."
          }
        ]
      },
      "name": "pageStep",
      "propertyType": "new",
      "check": "Integer",
      "defaultValue": 10
    },
    "knobFactor": {
      "location": {
        "start": {
          "line": 225,
          "column": 4
        },
        "end": {
          "line": 230,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Factor to apply to the width/height of the knob in relation\nto the dimension of the underlying area."
          }
        ]
      },
      "name": "knobFactor",
      "propertyType": "new",
      "apply": "_applyKnobFactor",
      "allowNull": true,
      "check": "Number"
    },
    "valid": {
      "type": "property",
      "name": "valid",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm"
    },
    "required": {
      "type": "property",
      "name": "required",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm"
    },
    "invalidMessage": {
      "type": "property",
      "name": "invalidMessage",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm"
    },
    "requiredInvalidMessage": {
      "type": "property",
      "name": "requiredInvalidMessage",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm"
    }
  },
  "members": {
    "__sliderLocation": {
      "location": {
        "start": {
          "line": 243,
          "column": 4
        },
        "end": {
          "line": 243,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__knobLocation": {
      "location": {
        "start": {
          "line": 244,
          "column": 4
        },
        "end": {
          "line": 244,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__knobSize": {
      "location": {
        "start": {
          "line": 245,
          "column": 4
        },
        "end": {
          "line": 245,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__dragMode": {
      "location": {
        "start": {
          "line": 246,
          "column": 4
        },
        "end": {
          "line": 246,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__dragOffset": {
      "location": {
        "start": {
          "line": 247,
          "column": 4
        },
        "end": {
          "line": 247,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__trackingMode": {
      "location": {
        "start": {
          "line": 248,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__trackingDirection": {
      "location": {
        "start": {
          "line": 249,
          "column": 4
        },
        "end": {
          "line": 249,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__trackingEnd": {
      "location": {
        "start": {
          "line": 250,
          "column": 4
        },
        "end": {
          "line": 250,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__timer": {
      "location": {
        "start": {
          "line": 251,
          "column": 4
        },
        "end": {
          "line": 251,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__dragTimer": {
      "location": {
        "start": {
          "line": 254,
          "column": 4
        },
        "end": {
          "line": 254,
          "column": 21
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "event delay stuff during drag"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__lastValueEvent": {
      "location": {
        "start": {
          "line": 255,
          "column": 4
        },
        "end": {
          "line": 255,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__dragValue": {
      "location": {
        "start": {
          "line": 256,
          "column": 4
        },
        "end": {
          "line": 256,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__scrollAnimationframe": {
      "location": {
        "start": {
          "line": 258,
          "column": 4
        },
        "end": {
          "line": 258,
          "column": 33
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_forwardStates": {
      "location": {
        "start": {
          "line": 265,
          "column": 4
        },
        "end": {
          "line": 267,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_forwardStates)"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "renderLayout": {
      "location": {
        "start": {
          "line": 271,
          "column": 4
        },
        "end": {
          "line": 275,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "left {Integer} Any integer value for the left position,\nalways in pixels",
            "paramName": "left",
            "description": " Any integer value for the left position,\nalways in pixels",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "top {Integer} Any integer value for the top position,\nalways in pixels",
            "paramName": "top",
            "description": " Any integer value for the top position,\nalways in pixels",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer} Any positive integer value for the width,\nalways in pixels",
            "paramName": "width",
            "description": " Any positive integer value for the width,\nalways in pixels",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "height {Integer} Any positive integer value for the height,\nalways in pixels",
            "paramName": "height",
            "description": " Any positive integer value for the height,\nalways in pixels",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map of which layout sizes changed.",
            "type": "Map",
            "desc": " A map of which layout sizes changed."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "_createChildControlImpl": {
      "location": {
        "start": {
          "line": 279,
          "column": 4
        },
        "end": {
          "line": 296,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "paramName": "id",
            "description": " ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "hash {String?undefined} If a child control name contains a #,\nall text following the # will be the hash argument.",
            "paramName": "hash",
            "description": " If a child control name contains a #,\nall text following the # will be the hash argument.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The created control or <code>null</code>",
            "type": "qx.ui.core.Widget",
            "desc": " The created control or <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_onPointerOver": {
      "location": {
        "start": {
          "line": 313,
          "column": 4
        },
        "end": {
          "line": 315,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT HANDLER\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Event handler for pointerover events at the knob child control.\n\nAdds the 'hovered' state"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Incoming pointer event",
            "paramName": "e",
            "description": " Incoming pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerOut": {
      "location": {
        "start": {
          "line": 325,
          "column": 4
        },
        "end": {
          "line": 327,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for pointerout events at the knob child control.\n\nRemoves the 'hovered' state"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Incoming pointer event",
            "paramName": "e",
            "description": " Incoming pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onRoll": {
      "location": {
        "start": {
          "line": 335,
          "column": 4
        },
        "end": {
          "line": 349,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener of roll event"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Roll} Incoming event object",
            "paramName": "e",
            "description": " Incoming event object",
            "type": "qx.event.type.Roll"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onKeyPress": {
      "location": {
        "start": {
          "line": 359,
          "column": 4
        },
        "end": {
          "line": 397,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for keypress events.\n\nAdds support for arrow keys, page up, page down, home and end keys."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeySequence} Incoming keypress event",
            "paramName": "e",
            "description": " Incoming keypress event",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerDown": {
      "location": {
        "start": {
          "line": 405,
          "column": 4
        },
        "end": {
          "line": 485,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener of pointerdown event. Initializes drag or tracking mode."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Incoming event object",
            "paramName": "e",
            "description": " Incoming event object",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerUp": {
      "location": {
        "start": {
          "line": 494,
          "column": 4
        },
        "end": {
          "line": 565,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener of pointerup event. Used for cleanup of previously\ninitialized modes."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Incoming event object",
            "paramName": "e",
            "description": " Incoming event object",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerMove": {
      "location": {
        "start": {
          "line": 573,
          "column": 4
        },
        "end": {
          "line": 591,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener of pointermove event for the knob. Only used in drag mode."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Incoming event object",
            "paramName": "e",
            "description": " Incoming event object",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onInterval": {
      "location": {
        "start": {
          "line": 600,
          "column": 4
        },
        "end": {
          "line": 620,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener of interval event by the internal timer. Only used\nin tracking sequences."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Incoming event object",
            "paramName": "e",
            "description": " Incoming event object",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onUpdate": {
      "location": {
        "start": {
          "line": 628,
          "column": 4
        },
        "end": {
          "line": 644,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener of resize event for both the slider itself and the knob."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Incoming event object",
            "paramName": "e",
            "description": " Incoming event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__isHorizontal": {
      "location": {
        "start": {
          "line": 658,
          "column": 4
        },
        "end": {
          "line": 658,
          "column": 26
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nUTILS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the slider is laid out horizontally"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__slidingSpace": {
      "location": {
        "start": {
          "line": 665,
          "column": 4
        },
        "end": {
          "line": 665,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Available space for knob to slide on, computed on resize of\nthe widget"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__computeTrackingEnd": {
      "location": {
        "start": {
          "line": 674,
          "column": 4
        },
        "end": {
          "line": 712,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the value where the tracking should end depending on\nthe current pointer position."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Incoming pointer event",
            "paramName": "e",
            "description": " Incoming pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_positionToValue": {
      "location": {
        "start": {
          "line": 723,
          "column": 4
        },
        "end": {
          "line": 746,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Converts the given position to a value.\n\nDoes not respect single or page step."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "position {Integer} Position to use",
            "paramName": "position",
            "description": " Position to use",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Resulting value (rounded)",
            "type": "Integer",
            "desc": " Resulting value (rounded)"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_valueToPosition": {
      "location": {
        "start": {
          "line": 756,
          "column": 4
        },
        "end": {
          "line": 785,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Converts the given value to a position to place\nthe knob to."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} Value to use",
            "paramName": "value",
            "description": " Value to use",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Computed position (rounded)",
            "type": "Integer",
            "desc": " Computed position (rounded)"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updateKnobPosition": {
      "location": {
        "start": {
          "line": 794,
          "column": 4
        },
        "end": {
          "line": 796,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates the knob position following the currently configured\nvalue. Useful on reflows where the dimensions of the slider\nitself have been modified."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setKnobPosition": {
      "location": {
        "start": {
          "line": 805,
          "column": 4
        },
        "end": {
          "line": 825,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Moves the knob to the given position."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "position {Integer} Any valid position (needs to be\ngreater or equal than zero)",
            "paramName": "position",
            "description": " Any valid position (needs to be\ngreater or equal than zero)",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updateKnobSize": {
      "location": {
        "start": {
          "line": 833,
          "column": 4
        },
        "end": {
          "line": 853,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Reconfigures the size of the knob depending on\nthe optionally defined {@link #knobFactor}."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "slideToBegin": {
      "location": {
        "start": {
          "line": 869,
          "column": 4
        },
        "end": {
          "line": 871,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSLIDE METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Slides backward to the minimum value"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "slideToEnd": {
      "location": {
        "start": {
          "line": 878,
          "column": 4
        },
        "end": {
          "line": 880,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Slides forward to the maximum value"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "slideForward": {
      "location": {
        "start": {
          "line": 887,
          "column": 4
        },
        "end": {
          "line": 889,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Slides forward (right or bottom depending on orientation)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "slideBack": {
      "location": {
        "start": {
          "line": 896,
          "column": 4
        },
        "end": {
          "line": 898,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Slides backward (to left or top depending on orientation)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "slidePageForward": {
      "location": {
        "start": {
          "line": 905,
          "column": 4
        },
        "end": {
          "line": 907,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Slides a page forward (to right or bottom depending on orientation)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "slidePageBack": {
      "location": {
        "start": {
          "line": 914,
          "column": 4
        },
        "end": {
          "line": 916,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Slides a page backward (to left or top depending on orientation)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "slideBy": {
      "location": {
        "start": {
          "line": 927,
          "column": 4
        },
        "end": {
          "line": 929,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Slides by the given offset.\n\nThis method works with the value, not with the coordinate."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "offset {Integer} Offset to scroll by",
            "paramName": "offset",
            "description": " Offset to scroll by",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "slideTo": {
      "location": {
        "start": {
          "line": 941,
          "column": 4
        },
        "end": {
          "line": 950,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Slides to the given value\n\nThis method works with the value, not with the coordinate."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} Scroll to a value between the defined\nminimum and maximum.",
            "paramName": "value",
            "description": " Scroll to a value between the defined\nminimum and maximum.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updatePosition": {
      "location": {
        "start": {
          "line": 957,
          "column": 4
        },
        "end": {
          "line": 959,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates the position property considering the minimum and maximum values."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Number} The new position.",
            "paramName": "value",
            "description": " The new position.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stopSlideAnimation": {
      "location": {
        "start": {
          "line": 966,
          "column": 4
        },
        "end": {
          "line": 971,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "In case a slide animation is currently running, it will be stopped.\nIf not, the method does nothing."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__normalizeValue": {
      "location": {
        "start": {
          "line": 980,
          "column": 4
        },
        "end": {
          "line": 990,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal helper to normalize the given value concerning the minimum\nand maximum value."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Number} The value to normalize.",
            "paramName": "value",
            "description": " The value to normalize.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The normalized value.",
            "type": "Number",
            "desc": " The normalized value."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__animateTo": {
      "location": {
        "start": {
          "line": 998,
          "column": 4
        },
        "end": {
          "line": 1015,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Animation helper which takes care of the animated slide."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "to {Number} The target value.",
            "paramName": "to",
            "description": " The target value.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyOrientation": {
      "location": {
        "start": {
          "line": 1025,
          "column": 4
        },
        "end": {
          "line": 1056,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPROPERTY APPLY ROUTINES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyKnobFactor": {
      "location": {
        "start": {
          "line": 1060,
          "column": 4
        },
        "end": {
          "line": 1074,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyValue": {
      "location": {
        "start": {
          "line": 1078,
          "column": 4
        },
        "end": {
          "line": 1089,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_fireValue": {
      "location": {
        "start": {
          "line": 1095,
          "column": 4
        },
        "end": {
          "line": 1102,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper for applyValue which fires the changeValue event."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyMinimum": {
      "location": {
        "start": {
          "line": 1106,
          "column": 4
        },
        "end": {
          "line": 1113,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyMaximum": {
      "location": {
        "start": {
          "line": 1117,
          "column": 4
        },
        "end": {
          "line": 1124,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setRequired": {
      "type": "function",
      "name": "setRequired",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IForm",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nREQUIRED PROPERTY\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Sets the required state of a widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "required {Boolean} A flag signaling if the widget is required.",
            "paramName": "required",
            "description": " A flag signaling if the widget is required.",
            "type": "Boolean"
          }
        ]
      }
    },
    "getRequired": {
      "type": "function",
      "name": "getRequired",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IForm",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Return the current required state of the widget."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} True, if the widget is required.",
            "type": "Boolean",
            "desc": " True, if the widget is required."
          }
        ]
      }
    },
    "setValid": {
      "type": "function",
      "name": "setValid",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IForm",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nVALID PROPERTY\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Sets the valid state of the widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "valid {Boolean} The valid state of the widget.",
            "paramName": "valid",
            "description": " The valid state of the widget.",
            "type": "Boolean"
          }
        ]
      }
    },
    "getValid": {
      "type": "function",
      "name": "getValid",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IForm",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the valid state of the widget."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the state of the widget is valid.",
            "type": "Boolean",
            "desc": " If the state of the widget is valid."
          }
        ]
      }
    },
    "setInvalidMessage": {
      "type": "function",
      "name": "setInvalidMessage",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IForm",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nINVALID MESSAGE PROPERTY\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Sets the invalid message of the widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "message {String} The invalid message.",
            "paramName": "message",
            "description": " The invalid message.",
            "type": "String"
          }
        ]
      }
    },
    "getInvalidMessage": {
      "type": "function",
      "name": "getInvalidMessage",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IForm",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the invalid message of the widget."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The current set message.",
            "type": "String",
            "desc": " The current set message."
          }
        ]
      }
    },
    "setRequiredInvalidMessage": {
      "type": "function",
      "name": "setRequiredInvalidMessage",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IForm",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nREQUIRED INVALID MESSAGE PROPERTY\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Sets the invalid message if required of the widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "message {String} The invalid message.",
            "paramName": "message",
            "description": " The invalid message.",
            "type": "String"
          }
        ]
      }
    },
    "getRequiredInvalidMessage": {
      "type": "function",
      "name": "getRequiredInvalidMessage",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IForm",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the invalid message if required of the widget."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The current set message.",
            "type": "String",
            "desc": " The current set message."
          }
        ]
      }
    },
    "setValue": {
      "type": "function",
      "name": "setValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "typeof value==='number'&&value>=this.getMinimum()&&value<=this.getMaximum()",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetValue": {
      "type": "function",
      "name": "resetValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getValue": {
      "type": "function",
      "name": "getValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "typeof value==='number'&&value>=this.getMinimum()&&value<=this.getMaximum()",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMinimum": {
      "type": "function",
      "name": "setMinimum",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getMinimum": {
      "type": "function",
      "name": "getMinimum",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMaximum": {
      "type": "function",
      "name": "setMaximum",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getMaximum": {
      "type": "function",
      "name": "getMaximum",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSingleStep": {
      "type": "function",
      "name": "setSingleStep",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getSingleStep": {
      "type": "function",
      "name": "getSingleStep",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setPageStep": {
      "type": "function",
      "name": "setPageStep",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getPageStep": {
      "type": "function",
      "name": "getPageStep",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "_applyValid": {
      "type": "function",
      "name": "_applyValid",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.form.MForm"
    },
    "__onChangeLocale": {
      "type": "function",
      "name": "__onChangeLocale",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.form.MForm",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Locale change event handler"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} the change event",
            "paramName": "e",
            "description": " the change event",
            "type": "Event"
          }
        ]
      }
    },
    "isValid": {
      "type": "function",
      "name": "isValid",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "resetValid": {
      "type": "function",
      "name": "resetValid",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm"
    },
    "isRequired": {
      "type": "function",
      "name": "isRequired",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "resetRequired": {
      "type": "function",
      "name": "resetRequired",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm"
    },
    "resetInvalidMessage": {
      "type": "function",
      "name": "resetInvalidMessage",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm"
    },
    "resetRequiredInvalidMessage": {
      "type": "function",
      "name": "resetRequiredInvalidMessage",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm"
    },
    "getOrientation": {
      "type": "function",
      "name": "getOrientation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOrientation": {
      "type": "function",
      "name": "setOrientation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOrientation": {
      "type": "function",
      "name": "resetOrientation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "resetMinimum": {
      "type": "function",
      "name": "resetMinimum",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "resetMaximum": {
      "type": "function",
      "name": "resetMaximum",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "resetSingleStep": {
      "type": "function",
      "name": "resetSingleStep",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "resetPageStep": {
      "type": "function",
      "name": "resetPageStep",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getKnobFactor": {
      "type": "function",
      "name": "getKnobFactor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setKnobFactor": {
      "type": "function",
      "name": "setKnobFactor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetKnobFactor": {
      "type": "function",
      "name": "resetKnobFactor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "descendants": [
    "qx.ui.core.scroll.ScrollSlider"
  ]
}