{
  "className": "qx.event.dispatch.AbstractBubbling",
  "packageName": "qx.event.dispatch",
  "name": "AbstractBubbling",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.event.IEventDispatcher"
  ],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 250,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nFabian Jakobs (fjakobs)\nSebastian Werner (wpbasti)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Event dispatcher for all bubbling events."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 44,
        "column": 2
      },
      "end": {
        "line": 46,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": "Create a new instance"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "manager {qx.event.Manager} Event manager for the window to use",
          "paramName": "manager",
          "description": " Event manager for the window to use",
          "type": "qx.event.Manager"
        }
      ]
    }
  },
  "members": {
    "_getParent": {
      "location": {
        "start": {
          "line": 73,
          "column": 4
        },
        "end": {
          "line": 75,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT DISPATCHER HELPER\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns the parent of the given target"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target which parent should be found",
            "paramName": "target",
            "description": " The target which parent should be found",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The parent of the given target",
            "type": "var",
            "desc": " The parent of the given target"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "canDispatchEvent": {
      "location": {
        "start": {
          "line": 87,
          "column": 4
        },
        "end": {
          "line": 89,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT DISPATCHER INTERFACE\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element|Event} The event dispatch target",
            "paramName": "target",
            "description": " The event dispatch target",
            "type": [
              "Element",
              "Event"
            ]
          },
          {
            "name": "@param",
            "body": "event {qx.event.type.Event} The event object",
            "paramName": "event",
            "description": " The event object",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "type {String} the event type",
            "paramName": "type",
            "description": " the event type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event dispatcher is responsible for the this event",
            "type": "Boolean",
            "desc": " Whether the event dispatcher is responsible for the this event"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventDispatcher",
      "appearsIn": [
        "qx.event.IEventDispatcher"
      ]
    },
    "dispatchEvent": {
      "location": {
        "start": {
          "line": 93,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element|Event} The event dispatch target",
            "paramName": "target",
            "description": " The event dispatch target",
            "type": [
              "Element",
              "Event"
            ]
          },
          {
            "name": "@param",
            "body": "event {qx.event.type.Event} event object to dispatch",
            "paramName": "event",
            "description": " event object to dispatch",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "type {String} the event type",
            "paramName": "type",
            "description": " the event type",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventDispatcher",
      "appearsIn": [
        "qx.event.IEventDispatcher",
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    }
  },
  "descendants": [
    "qx.event.dispatch.MouseCapture",
    "qx.event.dispatch.DomBubbling"
  ]
}