{
  "className": "qx.bom.webfonts.Manager",
  "packageName": "qx.bom.webfonts",
  "name": "Manager",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 58,
        "column": 0
      },
      "end": {
        "line": 571,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Manages font-face definitions, making sure that each rule is only applied\nonce. It supports adding fonts of the same family but with different style\nand weight. For instance, the following declaration uses 4 different source\nfiles and combine them in a single font family.\n\n<pre class='javascript'>\nsources: [\n{\nfamily: \"Sansation\",\nsource: [\n\"fonts/Sansation-Regular.ttf\"\n]\n},\n{\nfamily: \"Sansation\",\nfontWeight: \"bold\",\nsource: [\n\"fonts/Sansation-Bold.ttf\",\n]\n},\n{\nfamily: \"Sansation\",\nfontStyle: \"italic\",\nsource: [\n\"fonts/Sansation-Italic.ttf\",\n]\n},\n{\nfamily: \"Sansation\",\nfontWeight: \"bold\",\nfontStyle: \"italic\",\nsource: [\n\"fonts/Sansation-BoldItalic.ttf\",\n]\n}\n]\n</pre>\n\nThis class does not need to be disposed, except when you want to abort the loading\nand validation process."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 71,
        "column": 2
      },
      "end": {
        "line": 78,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "members": {
    "__createdStyles": {
      "location": {
        "start": {
          "line": 112,
          "column": 4
        },
        "end": {
          "line": 112,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__styleSheet": {
      "location": {
        "start": {
          "line": 113,
          "column": 4
        },
        "end": {
          "line": 113,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__validators": {
      "location": {
        "start": {
          "line": 114,
          "column": 4
        },
        "end": {
          "line": 114,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__preferredFormats": {
      "location": {
        "start": {
          "line": 115,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__queue": {
      "location": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__queueInterval": {
      "location": {
        "start": {
          "line": 117,
          "column": 4
        },
        "end": {
          "line": 117,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "require": {
      "location": {
        "start": {
          "line": 142,
          "column": 4
        },
        "end": {
          "line": 176,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPUBLIC API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Adds the necessary font-face rule for a web font to the document. Also\ncreates a web font Validator ({@link qx.bom.webfonts.Validator}) that\nchecks if the webFont was applied correctly."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "familyName {String} Name of the web font",
            "paramName": "familyName",
            "description": " Name of the web font",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "sourcesList {Object} List of source URLs along with their style\n(e.g. fontStyle: \"italic\") and weight (e.g. fontWeight: \"bold\").\nFor maximum compatibility, this should include EOT, WOFF and TTF versions\nof the font.",
            "paramName": "sourcesList",
            "description": " List of source URLs along with their style\n(e.g. fontStyle: \"italic\") and weight (e.g. fontWeight: \"bold\").\nFor maximum compatibility, this should include EOT, WOFF and TTF versions\nof the font.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "callback {Function?} Optional event listener callback that will be\nexecuted once the validator has determined whether the webFont was\napplied correctly.\nSee {@link qx.bom.webfonts.Validator#changeStatus}",
            "paramName": "callback",
            "description": " Optional event listener callback that will be\nexecuted once the validator has determined whether the webFont was\napplied correctly.\nSee {@link qx.bom.webfonts.Validator#changeStatus}",
            "optional": true,
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object?} Optional context for the callback function",
            "paramName": "context",
            "description": " Optional context for the callback function",
            "optional": true,
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 188,
          "column": 4
        },
        "end": {
          "line": 205,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes a font's font-face definition from the style sheet. This means\nthe font will no longer be available and any elements using it will\nfall back to the their regular font-families."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "familyName {String} font-family name",
            "paramName": "familyName",
            "description": " font-family name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontWeight {String} the font-weight.",
            "paramName": "fontWeight",
            "description": " the font-weight.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontStyle {String} the font-style.",
            "paramName": "fontStyle",
            "description": " the font-style.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPreferredFormats": {
      "location": {
        "start": {
          "line": 216,
          "column": 4
        },
        "end": {
          "line": 247,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the preferred font format(s) for the currently used browser. Some\nbrowsers support multiple formats, e.g. WOFF and TTF or WOFF and EOT. In\nthose cases, WOFF is considered the preferred format."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} List of supported font formats ordered by preference\nor empty Array if none could be determined",
            "type": "String[]",
            "desc": " List of supported font formats ordered by preference\nor empty Array if none could be determined"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeStyleSheet": {
      "location": {
        "start": {
          "line": 256,
          "column": 4
        },
        "end": {
          "line": 263,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the styleSheet element used for all web font definitions from the\ndocument. This means all web fonts declared by the manager will no longer\nbe available and elements using them will fall back to their regular\nfont-families"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__createFontLookupKey": {
      "location": {
        "start": {
          "line": 280,
          "column": 4
        },
        "end": {
          "line": 283,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPRIVATE API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Creates a lookup key to index the created fonts."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "familyName {String} font-family name",
            "paramName": "familyName",
            "description": " font-family name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontWeight {String} the font-weight.",
            "paramName": "fontWeight",
            "description": " the font-weight.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontStyle {String} the font-style.",
            "paramName": "fontStyle",
            "description": " the font-style.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{string} the font lookup key",
            "type": "string",
            "desc": " the font lookup key"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__require": {
      "location": {
        "start": {
          "line": 303,
          "column": 4
        },
        "end": {
          "line": 342,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Does the actual work of adding stylesheet rules and triggering font\nvalidation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "familyName {String} Name of the web font",
            "paramName": "familyName",
            "description": " Name of the web font",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "sources {String[]} List of source URLs. For maximum compatibility,\nthis should include EOT, WOFF and TTF versions of the font.",
            "paramName": "sources",
            "description": " List of source URLs. For maximum compatibility,\nthis should include EOT, WOFF and TTF versions of the font.",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "fontWeight {String} the web font should be registered using a\nfontWeight font weight.",
            "paramName": "fontWeight",
            "description": " the web font should be registered using a\nfontWeight font weight.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontStyle {String} the web font should be registered using an\nfontStyle font style.",
            "paramName": "fontStyle",
            "description": " the web font should be registered using an\nfontStyle font style.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "comparisonString {String} String to check whether the font has loaded or not",
            "paramName": "comparisonString",
            "description": " String to check whether the font has loaded or not",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "version {String?} Optional version that is appended to the font URL to be able to override caching",
            "paramName": "version",
            "description": " Optional version that is appended to the font URL to be able to override caching",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "callback {Function?} Optional event listener callback that will be\nexecuted once the validator has determined whether the webFont was\napplied correctly.",
            "paramName": "callback",
            "description": " Optional event listener callback that will be\nexecuted once the validator has determined whether the webFont was\napplied correctly.",
            "optional": true,
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object?} Optional context for the callback function",
            "paramName": "context",
            "description": " Optional context for the callback function",
            "optional": true,
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__flushQueue": {
      "location": {
        "start": {
          "line": 348,
          "column": 4
        },
        "end": {
          "line": 356,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Processes the next item in the queue"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__onFontChangeStatus": {
      "location": {
        "start": {
          "line": 364,
          "column": 4
        },
        "end": {
          "line": 372,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the font-face declaration if a font could not be validated"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Data} qx.bom.webfonts.Validator#changeStatus",
            "paramName": "ev",
            "description": " qx.bom.webfonts.Validator#changeStatus",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getSourcesMap": {
      "location": {
        "start": {
          "line": 383,
          "column": 4
        },
        "end": {
          "line": 402,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Uses a naive regExp match to determine the format of each defined source\nfile for a webFont. Returns a map with the format names as keys and the\ncorresponding source URLs as values."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sources {String[]} Array of source URLs",
            "paramName": "sources",
            "description": " Array of source URLs",
            "type": "String[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map of formats and URLs",
            "type": "Map",
            "desc": " Map of formats and URLs"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getRule": {
      "location": {
        "start": {
          "line": 417,
          "column": 4
        },
        "end": {
          "line": 438,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assembles the body of a font-face rule for a single webFont."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "familyName {String} Font-family name",
            "paramName": "familyName",
            "description": " Font-family name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontWeight {String} the web font should be registered using a\nfontWeight font weight.",
            "paramName": "fontWeight",
            "description": " the web font should be registered using a\nfontWeight font weight.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontStyle {String} the web font should be registered using an\nfontStyle font style.",
            "paramName": "fontStyle",
            "description": " the web font should be registered using an\nfontStyle font style.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "sourcesMap {Map} Map of font formats and sources",
            "paramName": "sourcesMap",
            "description": " Map of font formats and sources",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "version {String?} Optional version to be appended to the URL",
            "paramName": "version",
            "description": " Optional version to be appended to the URL",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The computed CSS rule",
            "type": "String",
            "desc": " The computed CSS rule"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getSourceForFormat": {
      "location": {
        "start": {
          "line": 449,
          "column": 4
        },
        "end": {
          "line": 467,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the full src value for a given font URL depending on the type"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "format {String} The font format, one of eot, woff, ttf, svg",
            "paramName": "format",
            "description": " The font format, one of eot, woff, ttf, svg",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "url {String} The font file's URL",
            "paramName": "url",
            "description": " The font file's URL",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "version {String?} Optional version to be appended to the URL",
            "paramName": "version",
            "description": " Optional version to be appended to the URL",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The src directive",
            "type": "String",
            "desc": " The src directive"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__addRule": {
      "location": {
        "start": {
          "line": 475,
          "column": 4
        },
        "end": {
          "line": 488,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds a font-face rule to the document"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rule {String} The body of the CSS rule",
            "paramName": "rule",
            "description": " The body of the CSS rule",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__removeRule": {
      "location": {
        "start": {
          "line": 499,
          "column": 4
        },
        "end": {
          "line": 534,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the font-face declaration for the given font-family from the\nstylesheet"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "familyName {String} The font-family name",
            "paramName": "familyName",
            "description": " The font-family name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontWeight {String} fontWeight font-weight.",
            "paramName": "fontWeight",
            "description": " fontWeight font-weight.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fontStyle {String} fontStyle font-style.",
            "paramName": "fontStyle",
            "description": " fontStyle font-style.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__fixCssText": {
      "location": {
        "start": {
          "line": 544,
          "column": 4
        },
        "end": {
          "line": 548,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "IE 6 and 7 omit the trailing quote after the format name when\nquerying cssText. This needs to be fixed before cssText is replaced\nor all rules will be invalid and no web fonts will work any more."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cssText {String} CSS text",
            "paramName": "cssText",
            "description": " CSS text",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Fixed CSS text",
            "type": "String",
            "desc": " Fixed CSS text"
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 558,
        "column": 2
      },
      "end": {
        "line": 570,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}