{
  "className": "qx.ui.core.LayoutItem",
  "packageName": "qx.ui.core",
  "name": "LayoutItem",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0
      },
      "end": {
        "line": 1048,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The base class of all items, which should be laid out using a layout manager\n{@link qx.ui.layout.Abstract}."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 29,
        "column": 2
      },
      "end": {
        "line": 36,
        "column": 3
      }
    }
  },
  "properties": {
    "minWidth": {
      "location": {
        "start": {
          "line": 59,
          "column": 4
        },
        "end": {
          "line": 66,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nDIMENSION\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "The user provided minimal width.\n\nAlso take a look at the related properties {@link #width} and {@link #maxWidth}."
          }
        ]
      },
      "name": "minWidth",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyDimension",
      "allowNull": true,
      "check": "Integer"
    },
    "width": {
      "location": {
        "start": {
          "line": 76,
          "column": 4
        },
        "end": {
          "line": 84,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The <code>LayoutItem</code>'s preferred width.\n\nThe computed width may differ from the given width due to\nstretching. Also take a look at the related properties\n{@link #minWidth} and {@link #maxWidth}."
          }
        ]
      },
      "name": "width",
      "propertyType": "new",
      "themeable": true,
      "event": "changeWidth",
      "apply": "_applyDimension",
      "allowNull": true,
      "check": "Integer"
    },
    "maxWidth": {
      "location": {
        "start": {
          "line": 92,
          "column": 4
        },
        "end": {
          "line": 99,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The user provided maximal width.\n\nAlso take a look at the related properties {@link #width} and {@link #minWidth}."
          }
        ]
      },
      "name": "maxWidth",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyDimension",
      "allowNull": true,
      "check": "Integer"
    },
    "minHeight": {
      "location": {
        "start": {
          "line": 107,
          "column": 4
        },
        "end": {
          "line": 114,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The user provided minimal height.\n\nAlso take a look at the related properties {@link #height} and {@link #maxHeight}."
          }
        ]
      },
      "name": "minHeight",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyDimension",
      "allowNull": true,
      "check": "Integer"
    },
    "height": {
      "location": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 132,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The item's preferred height.\n\nThe computed height may differ from the given height due to\nstretching. Also take a look at the related properties\n{@link #minHeight} and {@link #maxHeight}."
          }
        ]
      },
      "name": "height",
      "propertyType": "new",
      "themeable": true,
      "event": "changeHeight",
      "apply": "_applyDimension",
      "allowNull": true,
      "check": "Integer"
    },
    "maxHeight": {
      "location": {
        "start": {
          "line": 140,
          "column": 4
        },
        "end": {
          "line": 147,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The user provided maximum height.\n\nAlso take a look at the related properties {@link #height} and {@link #minHeight}."
          }
        ]
      },
      "name": "maxHeight",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyDimension",
      "allowNull": true,
      "check": "Integer"
    },
    "allowGrowX": {
      "location": {
        "start": {
          "line": 160,
          "column": 4
        },
        "end": {
          "line": 166,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSTRETCHING\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Whether the item can grow horizontally."
          }
        ]
      },
      "name": "allowGrowX",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyStretching",
      "check": "Boolean",
      "defaultValue": true
    },
    "allowShrinkX": {
      "location": {
        "start": {
          "line": 170,
          "column": 4
        },
        "end": {
          "line": 176,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the item can shrink horizontally."
          }
        ]
      },
      "name": "allowShrinkX",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyStretching",
      "check": "Boolean",
      "defaultValue": true
    },
    "allowGrowY": {
      "location": {
        "start": {
          "line": 180,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the item can grow vertically."
          }
        ]
      },
      "name": "allowGrowY",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyStretching",
      "check": "Boolean",
      "defaultValue": true
    },
    "allowShrinkY": {
      "location": {
        "start": {
          "line": 190,
          "column": 4
        },
        "end": {
          "line": 196,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the item can shrink vertically."
          }
        ]
      },
      "name": "allowShrinkY",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyStretching",
      "check": "Boolean",
      "defaultValue": true
    },
    "allowStretchX": {
      "location": {
        "start": {
          "line": 200,
          "column": 4
        },
        "end": {
          "line": 205,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Growing and shrinking in the horizontal direction"
          }
        ]
      },
      "name": "allowStretchX",
      "propertyType": "new",
      "themeable": true
    },
    "allowStretchY": {
      "location": {
        "start": {
          "line": 209,
          "column": 4
        },
        "end": {
          "line": 214,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Growing and shrinking in the vertical direction"
          }
        ]
      },
      "name": "allowStretchY",
      "propertyType": "new",
      "themeable": true
    },
    "marginTop": {
      "location": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 233,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nMARGIN\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Margin of the widget (top)"
          }
        ]
      },
      "name": "marginTop",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyMargin",
      "check": "Integer",
      "defaultValue": 0
    },
    "marginRight": {
      "location": {
        "start": {
          "line": 237,
          "column": 4
        },
        "end": {
          "line": 243,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Margin of the widget (right)"
          }
        ]
      },
      "name": "marginRight",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyMargin",
      "check": "Integer",
      "defaultValue": 0
    },
    "marginBottom": {
      "location": {
        "start": {
          "line": 247,
          "column": 4
        },
        "end": {
          "line": 253,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Margin of the widget (bottom)"
          }
        ]
      },
      "name": "marginBottom",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyMargin",
      "check": "Integer",
      "defaultValue": 0
    },
    "marginLeft": {
      "location": {
        "start": {
          "line": 257,
          "column": 4
        },
        "end": {
          "line": 263,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Margin of the widget (left)"
          }
        ]
      },
      "name": "marginLeft",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyMargin",
      "check": "Integer",
      "defaultValue": 0
    },
    "margin": {
      "location": {
        "start": {
          "line": 274,
          "column": 4
        },
        "end": {
          "line": 279,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The 'margin' property is a shorthand property for setting 'marginTop',\n'marginRight', 'marginBottom' and 'marginLeft' at the same time.\n\nIf four values are specified they apply to top, right, bottom and left respectively.\nIf there is only one value, it applies to all sides, if there are two or three,\nthe missing values are taken from the opposite side."
          }
        ]
      },
      "name": "margin",
      "propertyType": "new",
      "themeable": true
    },
    "alignX": {
      "location": {
        "start": {
          "line": 297,
          "column": 4
        },
        "end": {
          "line": 303,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nALIGN\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Horizontal alignment of the item in the parent layout.\n\nNote: Item alignment is only supported by {@link LayoutItem} layouts where\nit would have a visual effect. Except for {@link Spacer}, which provides\nblank space for layouts, all classes that inherit {@link LayoutItem} support alignment."
          }
        ]
      },
      "name": "alignX",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyAlign",
      "allowNull": true,
      "possibleValues": [
        "left",
        "center",
        "right"
      ]
    },
    "alignY": {
      "location": {
        "start": {
          "line": 313,
          "column": 4
        },
        "end": {
          "line": 319,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Vertical alignment of the item in the parent layout.\n\nNote: Item alignment is only supported by {@link LayoutItem} layouts where\nit would have a visual effect. Except for {@link Spacer}, which provides\nblank space for layouts, all classes that inherit {@link LayoutItem} support alignment."
          }
        ]
      },
      "name": "alignY",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyAlign",
      "allowNull": true,
      "possibleValues": [
        "top",
        "middle",
        "bottom",
        "baseline"
      ]
    }
  },
  "members": {
    "_onChangeTheme": {
      "location": {
        "start": {
          "line": 343,
          "column": 4
        },
        "end": {
          "line": 360,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nDYNAMIC THEME SWITCH SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Handler for the dynamic theme change."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__computedHeightForWidth": {
      "location": {
        "start": {
          "line": 372,
          "column": 4
        },
        "end": {
          "line": 372,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nLAYOUT PROCESS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The computed height"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__computedLayout": {
      "location": {
        "start": {
          "line": 375,
          "column": 4
        },
        "end": {
          "line": 375,
          "column": 27
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} The computed size of the layout item"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__hasInvalidLayout": {
      "location": {
        "start": {
          "line": 378,
          "column": 4
        },
        "end": {
          "line": 378,
          "column": 29
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the current layout is valid"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__sizeHint": {
      "location": {
        "start": {
          "line": 381,
          "column": 4
        },
        "end": {
          "line": 381,
          "column": 21
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Cached size hint"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__updateMargin": {
      "location": {
        "start": {
          "line": 384,
          "column": 4
        },
        "end": {
          "line": 384,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the margins have changed and must be updated"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__userBounds": {
      "location": {
        "start": {
          "line": 387,
          "column": 4
        },
        "end": {
          "line": 387,
          "column": 23
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} user provided bounds of the widget, which override the layout manager"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__layoutProperties": {
      "location": {
        "start": {
          "line": 390,
          "column": 4
        },
        "end": {
          "line": 390,
          "column": 29
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} The item's layout properties"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "getBounds": {
      "location": {
        "start": {
          "line": 402,
          "column": 4
        },
        "end": {
          "line": 404,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the computed location and dimension as computed by\nthe layout manager."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|null} The location and dimensions in pixel\n(if the layout is valid). Contains the keys\n<code>width</code>, <code>height</code>, <code>left</code> and\n<code>top</code>.",
            "type": "Map|null",
            "desc": " The location and dimensions in pixel\n(if the layout is valid). Contains the keys\n<code>width</code>, <code>height</code>, <code>left</code> and\n<code>top</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clearSeparators": {
      "location": {
        "start": {
          "line": 410,
          "column": 4
        },
        "end": {
          "line": 412,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Reconfigure number of separators"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "renderSeparator": {
      "location": {
        "start": {
          "line": 422,
          "column": 4
        },
        "end": {
          "line": 424,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Renders a separator between two children"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "separator {String|qx.ui.decoration.IDecorator} The separator to render",
            "paramName": "separator",
            "description": " The separator to render",
            "type": [
              "String",
              "qx.ui.decoration.IDecorator"
            ]
          },
          {
            "name": "@param",
            "body": "bounds {Map} Contains the left and top coordinate and the width and height\nof the separator to render.",
            "paramName": "bounds",
            "description": " Contains the left and top coordinate and the width and height\nof the separator to render.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "renderLayout": {
      "location": {
        "start": {
          "line": 440,
          "column": 4
        },
        "end": {
          "line": 521,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Used by the layout engine to apply coordinates and dimensions."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "left {Integer} Any integer value for the left position,\nalways in pixels",
            "paramName": "left",
            "description": " Any integer value for the left position,\nalways in pixels",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "top {Integer} Any integer value for the top position,\nalways in pixels",
            "paramName": "top",
            "description": " Any integer value for the top position,\nalways in pixels",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer} Any positive integer value for the width,\nalways in pixels",
            "paramName": "width",
            "description": " Any positive integer value for the width,\nalways in pixels",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "height {Integer} Any positive integer value for the height,\nalways in pixels",
            "paramName": "height",
            "description": " Any positive integer value for the height,\nalways in pixels",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map of which layout sizes changed.",
            "type": "Map",
            "desc": " A map of which layout sizes changed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isExcluded": {
      "location": {
        "start": {
          "line": 529,
          "column": 4
        },
        "end": {
          "line": 531,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the item should be excluded from the layout"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Should the item be excluded by the layout",
            "type": "Boolean",
            "desc": " Should the item be excluded by the layout"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasValidLayout": {
      "location": {
        "start": {
          "line": 540,
          "column": 4
        },
        "end": {
          "line": 542,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the layout of this item (to layout the children)\nis valid."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code>",
            "type": "Boolean",
            "desc": " Returns <code>true</code>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scheduleLayoutUpdate": {
      "location": {
        "start": {
          "line": 550,
          "column": 4
        },
        "end": {
          "line": 552,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Indicate that the item has layout changes and propagate this information\nup the item hierarchy."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "invalidateLayoutCache": {
      "location": {
        "start": {
          "line": 559,
          "column": 4
        },
        "end": {
          "line": 565,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Called by the layout manager to mark this item's layout as invalid.\nThis function should clear all layout relevant caches."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSizeHint": {
      "location": {
        "start": {
          "line": 597,
          "column": 4
        },
        "end": {
          "line": 651,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A size hint computes the dimensions of a widget. It returns\nthe recommended dimensions as well as the min and max dimensions.\nThe min and max values already respect the stretching properties.\n\n<h3>Wording</h3>\n<ul>\n<li>User value: Value defined by the widget user, using the size properties</li>\n\n<li>Layout value: The value computed by {@link qx.ui.core.Widget#_getContentHint}</li>\n</ul>\n\n<h3>Algorithm</h3>\n<ul>\n<li>minSize: If the user min size is not null, the user value is taken,\notherwise the layout value is used.</li>\n\n<li>(preferred) size: If the user value is not null the user value is used,\notherwise the layout value is used.</li>\n\n<li>max size: Same as the preferred size.</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "compute {Boolean?true} Automatically compute size hint if currently not\ncached?",
            "paramName": "compute",
            "description": " Automatically compute size hint if currently not\ncached?",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The map with the preferred width/height and the allowed\nminimum and maximum values in cases where shrinking or growing\nis required.",
            "type": "Map",
            "desc": " The map with the preferred width/height and the allowed\nminimum and maximum values in cases where shrinking or growing\nis required."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_computeSizeHint": {
      "location": {
        "start": {
          "line": 660,
          "column": 4
        },
        "end": {
          "line": 679,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the size hint of the layout item."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The map with the preferred width/height and the allowed\nminimum and maximum values.",
            "type": "Map",
            "desc": " The map with the preferred width/height and the allowed\nminimum and maximum values."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_hasHeightForWidth": {
      "location": {
        "start": {
          "line": 687,
          "column": 4
        },
        "end": {
          "line": 694,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the item supports height for width."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the item supports height for width",
            "type": "Boolean",
            "desc": " Whether the item supports height for width"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getHeightForWidth": {
      "location": {
        "start": {
          "line": 706,
          "column": 4
        },
        "end": {
          "line": 714,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "If an item wants to trade height for width it has to implement this\nmethod and return the preferred height of the item if it is resized to\nthe given width. This function returns <code>null</code> if the item\ndo not support height for width."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} The computed width",
            "paramName": "width",
            "description": " The computed width",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The desired height",
            "type": "Integer",
            "desc": " The desired height"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getLayout": {
      "location": {
        "start": {
          "line": 722,
          "column": 4
        },
        "end": {
          "line": 724,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the widget's layout manager."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Abstract} The widget's layout manager",
            "type": "qx.ui.layout.Abstract",
            "desc": " The widget's layout manager"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyMargin": {
      "location": {
        "start": {
          "line": 728,
          "column": 4
        },
        "end": {
          "line": 736,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyAlign": {
      "location": {
        "start": {
          "line": 740,
          "column": 4
        },
        "end": {
          "line": 746,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyDimension": {
      "location": {
        "start": {
          "line": 750,
          "column": 4
        },
        "end": {
          "line": 752,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyStretching": {
      "location": {
        "start": {
          "line": 756,
          "column": 4
        },
        "end": {
          "line": 758,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "hasUserBounds": {
      "location": {
        "start": {
          "line": 776,
          "column": 4
        },
        "end": {
          "line": 778,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSUPPORT FOR USER BOUNDARIES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Whether user bounds are set on this layout item"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether user bounds are set on this layout item",
            "type": "Boolean",
            "desc": " Whether user bounds are set on this layout item"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setUserBounds": {
      "location": {
        "start": {
          "line": 790,
          "column": 4
        },
        "end": {
          "line": 800,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set user bounds of the widget. Widgets with user bounds are sized and\npositioned manually and are ignored by any layout manager."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "left {Integer} left position (relative to the parent)",
            "paramName": "left",
            "description": " left position (relative to the parent)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "top {Integer} top position (relative to the parent)",
            "paramName": "top",
            "description": " top position (relative to the parent)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer} width of the layout item",
            "paramName": "width",
            "description": " width of the layout item",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "height {Integer} height of the layout item",
            "paramName": "height",
            "description": " height of the layout item",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "resetUserBounds": {
      "location": {
        "start": {
          "line": 808,
          "column": 4
        },
        "end": {
          "line": 812,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Clear the user bounds. After this call the layout item is laid out by\nthe layout manager again."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__emptyProperties": {
      "location": {
        "start": {
          "line": 829,
          "column": 4
        },
        "end": {
          "line": 829,
          "column": 26
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nLAYOUT PROPERTIES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Empty storage pool"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__emptyProperties)"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "setLayoutProperties": {
      "location": {
        "start": {
          "line": 837,
          "column": 4
        },
        "end": {
          "line": 863,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Stores the given layout properties"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "props {Map} Incoming layout property data",
            "paramName": "props",
            "description": " Incoming layout property data",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getLayoutProperties": {
      "location": {
        "start": {
          "line": 871,
          "column": 4
        },
        "end": {
          "line": 873,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns currently stored layout properties"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Returns a map of layout properties",
            "type": "Map",
            "desc": " Returns a map of layout properties"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clearLayoutProperties": {
      "location": {
        "start": {
          "line": 880,
          "column": 4
        },
        "end": {
          "line": 882,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes all stored layout properties."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateLayoutProperties": {
      "location": {
        "start": {
          "line": 896,
          "column": 4
        },
        "end": {
          "line": 920,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Should be executed on every change of layout properties.\n\nThis also includes \"virtual\" layout properties like margin or align\nwhen they have an effect on the parent and not on the widget itself.\n\nThis method is always executed on the parent not on the\nmodified widget itself."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "props {Map?null} Optional map of known layout properties",
            "paramName": "props",
            "description": " Optional map of known layout properties",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getApplicationRoot": {
      "location": {
        "start": {
          "line": 937,
          "column": 4
        },
        "end": {
          "line": 939,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nHIERARCHY SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns the application root"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.root.Abstract} The currently used root",
            "type": "qx.ui.root.Abstract",
            "desc": " The currently used root"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getLayoutParent": {
      "location": {
        "start": {
          "line": 949,
          "column": 4
        },
        "end": {
          "line": 951,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the items parent. Even if the item has been added to a\nlayout, the parent is always a child of the containing item. The parent\nitem may be <code>null</code>."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget|null} The parent.",
            "type": "qx.ui.core.Widget|null",
            "desc": " The parent."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setLayoutParent": {
      "location": {
        "start": {
          "line": 959,
          "column": 4
        },
        "end": {
          "line": 967,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set the parent"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "parent {qx.ui.core.Widget|null} The new parent.",
            "paramName": "parent",
            "description": " The new parent.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isRootWidget": {
      "location": {
        "start": {
          "line": 976,
          "column": 4
        },
        "end": {
          "line": 978,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the item is a root item and directly connected to\nthe DOM."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the item a root item",
            "type": "Boolean",
            "desc": " Whether the item a root item"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getRoot": {
      "location": {
        "start": {
          "line": 988,
          "column": 4
        },
        "end": {
          "line": 1002,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the root item. The root item is the item which\nis directly inserted into an existing DOM node at HTML level.\nThis is often the BODY element of a typical web page."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The root item (if available)",
            "type": "qx.ui.core.Widget",
            "desc": " The root item (if available)"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "clone": {
      "location": {
        "start": {
          "line": 1015,
          "column": 4
        },
        "end": {
          "line": 1025,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCLONE SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object} The clone",
            "type": "qx.core.Object",
            "desc": " The clone"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object"
      ]
    },
    "getMinWidth": {
      "type": "function",
      "name": "getMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMinWidth": {
      "type": "function",
      "name": "setMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMinWidth": {
      "type": "function",
      "name": "resetMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getWidth": {
      "type": "function",
      "name": "getWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setWidth": {
      "type": "function",
      "name": "setWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetWidth": {
      "type": "function",
      "name": "resetWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMaxWidth": {
      "type": "function",
      "name": "getMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMaxWidth": {
      "type": "function",
      "name": "setMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMaxWidth": {
      "type": "function",
      "name": "resetMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMinHeight": {
      "type": "function",
      "name": "getMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMinHeight": {
      "type": "function",
      "name": "setMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMinHeight": {
      "type": "function",
      "name": "resetMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getHeight": {
      "type": "function",
      "name": "getHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setHeight": {
      "type": "function",
      "name": "setHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetHeight": {
      "type": "function",
      "name": "resetHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMaxHeight": {
      "type": "function",
      "name": "getMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMaxHeight": {
      "type": "function",
      "name": "setMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMaxHeight": {
      "type": "function",
      "name": "resetMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowGrowX": {
      "type": "function",
      "name": "getAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isAllowGrowX": {
      "type": "function",
      "name": "isAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowGrowX": {
      "type": "function",
      "name": "setAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowGrowX": {
      "type": "function",
      "name": "resetAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowShrinkX": {
      "type": "function",
      "name": "getAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isAllowShrinkX": {
      "type": "function",
      "name": "isAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowShrinkX": {
      "type": "function",
      "name": "setAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowShrinkX": {
      "type": "function",
      "name": "resetAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowGrowY": {
      "type": "function",
      "name": "getAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isAllowGrowY": {
      "type": "function",
      "name": "isAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowGrowY": {
      "type": "function",
      "name": "setAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowGrowY": {
      "type": "function",
      "name": "resetAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowShrinkY": {
      "type": "function",
      "name": "getAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isAllowShrinkY": {
      "type": "function",
      "name": "isAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowShrinkY": {
      "type": "function",
      "name": "setAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowShrinkY": {
      "type": "function",
      "name": "resetAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowStretchX": {
      "type": "function",
      "name": "getAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowStretchX": {
      "type": "function",
      "name": "setAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowStretchX": {
      "type": "function",
      "name": "resetAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowStretchY": {
      "type": "function",
      "name": "getAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowStretchY": {
      "type": "function",
      "name": "setAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowStretchY": {
      "type": "function",
      "name": "resetAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMarginTop": {
      "type": "function",
      "name": "getMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMarginTop": {
      "type": "function",
      "name": "setMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMarginTop": {
      "type": "function",
      "name": "resetMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMarginRight": {
      "type": "function",
      "name": "getMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMarginRight": {
      "type": "function",
      "name": "setMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMarginRight": {
      "type": "function",
      "name": "resetMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMarginBottom": {
      "type": "function",
      "name": "getMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMarginBottom": {
      "type": "function",
      "name": "setMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMarginBottom": {
      "type": "function",
      "name": "resetMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMarginLeft": {
      "type": "function",
      "name": "getMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMarginLeft": {
      "type": "function",
      "name": "setMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMarginLeft": {
      "type": "function",
      "name": "resetMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMargin": {
      "type": "function",
      "name": "getMargin",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMargin": {
      "type": "function",
      "name": "setMargin",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMargin": {
      "type": "function",
      "name": "resetMargin",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAlignX": {
      "type": "function",
      "name": "getAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAlignX": {
      "type": "function",
      "name": "setAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAlignX": {
      "type": "function",
      "name": "resetAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAlignY": {
      "type": "function",
      "name": "getAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAlignY": {
      "type": "function",
      "name": "setAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAlignY": {
      "type": "function",
      "name": "resetAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1037,
        "column": 2
      },
      "end": {
        "line": 1047,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": [
    "qx.ui.core.Widget",
    "qx.ui.core.Spacer",
    "qx.ui.core.ColumnData"
  ]
}