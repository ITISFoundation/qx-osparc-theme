{
  "className": "qx.ui.basic.Image",
  "packageName": "qx.ui.basic",
  "name": "Image",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 47,
        "column": 0
      },
      "end": {
        "line": 1132,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nFabian Jakobs (fjakobs)\nSebastian Werner (wpbasti)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The image class displays an image file\n\nThis class supports image clipping, which means that multiple images can be combined\ninto one large image and only the relevant part is shown.\n\n*Example*\n\nHere is a little example of how to use the widget.\n\n<pre class='javascript'>\nvar image = new qx.ui.basic.Image(\"icon/32/actions/format-justify-left.png\");\n\nthis.getRoot().add(image);\n</pre>\n\nThis example create a widget to display the image\n<code>icon/32/actions/format-justify-left.png</code>.\n\n*External Documentation*\n\n<a href='http://manual.qooxdoo.org/${qxversion}/pages/widget/image.html' target='_blank'>\nDocumentation of this widget in the qooxdoo manual.</a>\n\nNOTE: Instances of this class must be disposed of after use"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 62,
        "column": 2
      },
      "end": {
        "line": 71,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "source {String?null} The URL of the image to display.",
          "paramName": "source",
          "description": " The URL of the image to display.",
          "optional": true,
          "defaultValue": "null",
          "type": "String"
        }
      ]
    }
  },
  "properties": {
    "source": {
      "location": {
        "start": {
          "line": 85,
          "column": 4
        },
        "end": {
          "line": 93,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The URL of the image. Setting it will possibly abort loading of current image."
          }
        ]
      },
      "name": "source",
      "propertyType": "new",
      "themeable": true,
      "event": "changeSource",
      "apply": "_applySource",
      "allowNull": true,
      "check": "String"
    },
    "scale": {
      "location": {
        "start": {
          "line": 102,
          "column": 4
        },
        "end": {
          "line": 109,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the image should be scaled to the given dimensions\n\nThis is disabled by default because it prevents the usage\nof image clipping when enabled."
          }
        ]
      },
      "name": "scale",
      "propertyType": "new",
      "themeable": true,
      "event": "changeScale",
      "apply": "_applyScale",
      "check": "Boolean",
      "defaultValue": false
    },
    "appearance": {
      "location": {
        "start": {
          "line": 113,
          "column": 4
        },
        "end": {
          "line": 117,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "defaultValue": "image",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "allowShrinkX": {
      "location": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 125,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "allowShrinkX",
      "propertyType": "new",
      "refine": true,
      "defaultValue": false,
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": {
        "qx.ui.core.LayoutItem": "class"
      }
    },
    "allowShrinkY": {
      "location": {
        "start": {
          "line": 129,
          "column": 4
        },
        "end": {
          "line": 133,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "allowShrinkY",
      "propertyType": "new",
      "refine": true,
      "defaultValue": false,
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": {
        "qx.ui.core.LayoutItem": "class"
      }
    },
    "allowGrowX": {
      "location": {
        "start": {
          "line": 137,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "allowGrowX",
      "propertyType": "new",
      "refine": true,
      "defaultValue": false,
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": {
        "qx.ui.core.LayoutItem": "class"
      }
    },
    "allowGrowY": {
      "location": {
        "start": {
          "line": 145,
          "column": 4
        },
        "end": {
          "line": 149,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "allowGrowY",
      "propertyType": "new",
      "refine": true,
      "defaultValue": false,
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": {
        "qx.ui.core.LayoutItem": "class"
      }
    }
  },
  "members": {
    "__width": {
      "location": {
        "start": {
          "line": 193,
          "column": 4
        },
        "end": {
          "line": 193,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__height": {
      "location": {
        "start": {
          "line": 194,
          "column": 4
        },
        "end": {
          "line": 194,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__mode": {
      "location": {
        "start": {
          "line": 195,
          "column": 4
        },
        "end": {
          "line": 195,
          "column": 17
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__contentElements": {
      "location": {
        "start": {
          "line": 196,
          "column": 4
        },
        "end": {
          "line": 196,
          "column": 28
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__currentContentElement": {
      "location": {
        "start": {
          "line": 197,
          "column": 4
        },
        "end": {
          "line": 197,
          "column": 34
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__wrapper": {
      "location": {
        "start": {
          "line": 198,
          "column": 4
        },
        "end": {
          "line": 198,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__requestId": {
      "location": {
        "start": {
          "line": 199,
          "column": 4
        },
        "end": {
          "line": 199,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_onChangeTheme": {
      "location": {
        "start": {
          "line": 203,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "getContentElement": {
      "location": {
        "start": {
          "line": 216,
          "column": 4
        },
        "end": {
          "line": 218,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nWIDGET API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} The widget's content element",
            "type": "qx.html.Element",
            "desc": " The widget's content element"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_createContentElement": {
      "location": {
        "start": {
          "line": 222,
          "column": 4
        },
        "end": {
          "line": 224,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} The widget's content element",
            "type": "qx.html.Element",
            "desc": " The widget's content element"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_getContentHint": {
      "location": {
        "start": {
          "line": 228,
          "column": 4
        },
        "end": {
          "line": 234,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}",
            "type": "Map",
            "desc": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyDecorator": {
      "location": {
        "start": {
          "line": 237,
          "column": 4
        },
        "end": {
          "line": 247,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyTextColor": {
      "location": {
        "start": {
          "line": 250,
          "column": 4
        },
        "end": {
          "line": 264,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyPadding": {
      "location": {
        "start": {
          "line": 267,
          "column": 4
        },
        "end": {
          "line": 283,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "renderLayout": {
      "location": {
        "start": {
          "line": 285,
          "column": 4
        },
        "end": {
          "line": 297,
          "column": 5
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ],
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "body": "left {Integer} Any integer value for the left position,\nalways in pixels",
            "paramName": "left",
            "description": " Any integer value for the left position,\nalways in pixels",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "top {Integer} Any integer value for the top position,\nalways in pixels",
            "paramName": "top",
            "description": " Any integer value for the top position,\nalways in pixels",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer} Any positive integer value for the width,\nalways in pixels",
            "paramName": "width",
            "description": " Any positive integer value for the width,\nalways in pixels",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "height {Integer} Any positive integer value for the height,\nalways in pixels",
            "paramName": "height",
            "description": " Any positive integer value for the height,\nalways in pixels",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map of which layout sizes changed.",
            "type": "Map",
            "desc": " A map of which layout sizes changed."
          }
        ]
      }
    },
    "_applyEnabled": {
      "location": {
        "start": {
          "line": 309,
          "column": 4
        },
        "end": {
          "line": 316,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nIMAGE API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "property apply, overridden"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applySource": {
      "location": {
        "start": {
          "line": 320,
          "column": 4
        },
        "end": {
          "line": 330,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyScale": {
      "location": {
        "start": {
          "line": 334,
          "column": 4
        },
        "end": {
          "line": 336,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__setMode": {
      "location": {
        "start": {
          "line": 343,
          "column": 4
        },
        "end": {
          "line": 345,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remembers the mode to keep track which contentElement is currently in use."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mode {String} internal mode (alphaScaled|scaled|nonScaled)",
            "paramName": "mode",
            "description": " internal mode (alphaScaled|scaled|nonScaled)",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getMode": {
      "location": {
        "start": {
          "line": 354,
          "column": 4
        },
        "end": {
          "line": 379,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the current mode if set. Otherwise checks the current source and\nthe current scaling to determine the current mode."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} current internal mode",
            "type": "String",
            "desc": " current internal mode"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__createSuitableContentElement": {
      "location": {
        "start": {
          "line": 388,
          "column": 4
        },
        "end": {
          "line": 440,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates a contentElement suitable for the current mode"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mode {String} internal mode",
            "paramName": "mode",
            "description": " internal mode",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Image} suitable image content element",
            "type": "qx.html.Image",
            "desc": " suitable image content element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getSuitableContentElement": {
      "location": {
        "start": {
          "line": 448,
          "column": 4
        },
        "end": {
          "line": 467,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a contentElement suitable for the current mode"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Image} suitable image contentElement",
            "type": "qx.html.Image",
            "desc": " suitable image contentElement"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_styleSource": {
      "location": {
        "start": {
          "line": 475,
          "column": 4
        },
        "end": {
          "line": 532,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Applies the source to the clipped image instance or preload\nan image to detect sizes and apply it afterwards."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__fireLoadEvent": {
      "location": {
        "start": {
          "line": 541,
          "column": 4
        },
        "end": {
          "line": 552,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper function, which fires <code>loaded</code> event asynchronously.\nIt emulates native <code>loaded</code> event of an image object. This\nhelper will be called, if you try to load a managed image or an\npreviously loaded unmanaged image."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getContentElement": {
      "location": {
        "start": {
          "line": 559,
          "column": 4
        },
        "end": {
          "line": 567,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the content element."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Image} content element",
            "type": "qx.html.Image",
            "desc": " content element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__checkForContentElementSwitch": {
      "location": {
        "start": {
          "line": 576,
          "column": 4
        },
        "end": {
          "line": 620,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Checks if the current content element is capable to display the image\nwith the current settings (scaling, alpha PNG)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "source {String} source of the image",
            "paramName": "source",
            "description": " source of the image",
            "type": "String"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__checkForContentElementReplacement": {
      "location": {
        "start": {
          "line": 628,
          "column": 4
        },
        "end": {
          "line": 718,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Checks the current child and replaces it if necessary"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elementToAdd {qx.html.Image} content element to add",
            "paramName": "elementToAdd",
            "description": " content element to add",
            "type": "qx.html.Image"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__setManagedImage": {
      "location": {
        "start": {
          "line": 727,
          "column": 4
        },
        "end": {
          "line": 795,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Use the ResourceManager to set a managed image"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} image DOM element",
            "paramName": "el",
            "description": " image DOM element",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "source {String} source path",
            "paramName": "source",
            "description": " source path",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyDimension": {
      "location": {
        "start": {
          "line": 797,
          "column": 4
        },
        "end": {
          "line": 816,
          "column": 5
        }
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "__setUnmanagedImage": {
      "location": {
        "start": {
          "line": 824,
          "column": 4
        },
        "end": {
          "line": 835,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Use the infos of the ImageLoader to set an unmanaged image"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} image DOM element",
            "paramName": "el",
            "description": " image DOM element",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "source {String} source path",
            "paramName": "source",
            "description": " source path",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__loadUnmanagedImage": {
      "location": {
        "start": {
          "line": 844,
          "column": 4
        },
        "end": {
          "line": 876,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Use the ImageLoader to load an unmanaged image"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} image DOM element",
            "paramName": "el",
            "description": " image DOM element",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "source {String} source path",
            "paramName": "source",
            "description": " source path",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__resetSource": {
      "location": {
        "start": {
          "line": 883,
          "column": 4
        },
        "end": {
          "line": 893,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Reset source displayed by the DOM element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} image DOM element",
            "paramName": "el",
            "description": " image DOM element",
            "type": "Element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__setSource": {
      "location": {
        "start": {
          "line": 902,
          "column": 4
        },
        "end": {
          "line": 991,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Combines the decorator's image styles with our own image to make sure\ngradient and backgroundImage decorators work on Images."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} image DOM element",
            "paramName": "el",
            "description": " image DOM element",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "source {String} source path",
            "paramName": "source",
            "description": " source path",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_findHighResolutionSource": {
      "location": {
        "start": {
          "line": 1003,
          "column": 4
        },
        "end": {
          "line": 1035,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Detects whether there is a high-resolution image available.\nA high-resolution image is assumed to have the same file name as\nthe parameter source, but with a pixelRatio identifier before the file\nextension, like \"@2x\".\nMedium Resolution: \"example.png\", high-resolution: \"example@2x.png\""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "lowResImgSrc {String} source of the low resolution image.",
            "paramName": "lowResImgSrc",
            "description": " source of the low resolution image.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|Boolean} If a high-resolution image source.",
            "type": "String|Boolean",
            "desc": " If a high-resolution image source."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getHighResolutionSource": {
      "location": {
        "start": {
          "line": 1044,
          "column": 4
        },
        "end": {
          "line": 1055,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the source name for the high-resolution image based on the passed\nparameters."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "source {String} the source of the medium resolution image.",
            "paramName": "source",
            "description": " the source of the medium resolution image.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "pixelRatio {Number} the pixel ratio of the high-resolution image.",
            "paramName": "pixelRatio",
            "description": " the pixel ratio of the high-resolution image.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the high-resolution source name or null if no source could be found.",
            "type": "String",
            "desc": " the high-resolution source name or null if no source could be found."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__loaderCallback": {
      "location": {
        "start": {
          "line": 1063,
          "column": 4
        },
        "end": {
          "line": 1089,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler fired after the preloader has finished loading the icon"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "source {String} Image source which was loaded",
            "paramName": "source",
            "description": " Image source which was loaded",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "imageInfo {Map} Dimensions of the loaded image",
            "paramName": "imageInfo",
            "description": " Dimensions of the loaded image",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__updateContentHint": {
      "location": {
        "start": {
          "line": 1098,
          "column": 4
        },
        "end": {
          "line": 1108,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates the content hint when the image size has been changed"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} width of the image",
            "paramName": "width",
            "description": " width of the image",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "height {Integer} height of the image",
            "paramName": "height",
            "description": " height of the image",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getSource": {
      "type": "function",
      "name": "getSource",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSource": {
      "type": "function",
      "name": "setSource",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetSource": {
      "type": "function",
      "name": "resetSource",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getScale": {
      "type": "function",
      "name": "getScale",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isScale": {
      "type": "function",
      "name": "isScale",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setScale": {
      "type": "function",
      "name": "setScale",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetScale": {
      "type": "function",
      "name": "resetScale",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1118,
        "column": 2
      },
      "end": {
        "line": 1131,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": [
    "qx.ui.core.DragDropCursor",
    "qx.ui.tree.core.FolderOpenButton"
  ]
}