{
  "className": "qx.ui.form.RepeatButton",
  "packageName": "qx.ui.form",
  "name": "RepeatButton",
  "superClass": "qx.ui.form.Button",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 49,
        "column": 0
      },
      "end": {
        "line": 457,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nMartin Wittemann (martinwittemann)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The RepeatButton is a special button, which fires repeatedly {@link #execute}\nevents, while a button is pressed on the button. The initial delay\nand the interval time can be set using the properties {@link #firstInterval}\nand {@link #interval}. The {@link #execute} events will be fired in a shorter\namount of time if a button is hold, until the min {@link #minTimer}\nis reached. The {@link #timerDecrease} property sets the amount of milliseconds\nwhich will decreased after every firing.\n\n<pre class='javascript'>\nvar button = new qx.ui.form.RepeatButton(\"Hello World\");\n\nbutton.addListener(\"execute\", function(e) {\nalert(\"Button is executed\");\n}, this);\n\nthis.getRoot.add(button);\n</pre>\n\nThis example creates a button with the label \"Hello World\" and attaches an\nevent listener to the {@link #execute} event.\n\n*External Documentation*\n\n<a href='http://manual.qooxdoo.org/${qxversion}/pages/widget/repeatbutton.html' target='_blank'>\nDocumentation of this widget in the qooxdoo manual.</a>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 58,
        "column": 2
      },
      "end": {
        "line": 65,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "label {String} Label to use",
          "paramName": "label",
          "description": " Label to use",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "icon {String?null} Icon to use",
          "paramName": "icon",
          "description": " Icon to use",
          "optional": true,
          "defaultValue": "null",
          "type": "String"
        }
      ]
    }
  },
  "properties": {
    "interval": {
      "location": {
        "start": {
          "line": 94,
          "column": 4
        },
        "end": {
          "line": 98,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interval used after the first run of the timer. Usually a smaller value\nthan the \"firstInterval\" property value to get a faster reaction."
          }
        ]
      },
      "name": "interval",
      "propertyType": "new",
      "check": "Integer",
      "defaultValue": 100
    },
    "firstInterval": {
      "location": {
        "start": {
          "line": 105,
          "column": 4
        },
        "end": {
          "line": 109,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Interval used for the first run of the timer. Usually a greater value\nthan the \"interval\" property value to a little delayed reaction at the first\ntime."
          }
        ]
      },
      "name": "firstInterval",
      "propertyType": "new",
      "check": "Integer",
      "defaultValue": 500
    },
    "minTimer": {
      "location": {
        "start": {
          "line": 112,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This configures the minimum value for the timer interval."
          }
        ]
      },
      "name": "minTimer",
      "propertyType": "new",
      "check": "Integer",
      "defaultValue": 20
    },
    "timerDecrease": {
      "location": {
        "start": {
          "line": 119,
          "column": 4
        },
        "end": {
          "line": 123,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Decrease of the timer on each interval (for the next interval) until minTimer reached."
          }
        ]
      },
      "name": "timerDecrease",
      "propertyType": "new",
      "check": "Integer",
      "defaultValue": 2
    },
    "command": {
      "type": "property",
      "name": "command",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MExecutable"
    }
  },
  "members": {
    "__executed": {
      "location": {
        "start": {
          "line": 129,
          "column": 4
        },
        "end": {
          "line": 129,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__timer": {
      "location": {
        "start": {
          "line": 130,
          "column": 4
        },
        "end": {
          "line": 130,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "press": {
      "location": {
        "start": {
          "line": 139,
          "column": 4
        },
        "end": {
          "line": 155,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Calling this function is like a tap from the user on the\nbutton with all consequences.\n<span style='color: red'>Be sure to call the {@link #release} function.</span>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "release": {
      "location": {
        "start": {
          "line": 166,
          "column": 4
        },
        "end": {
          "line": 188,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Calling this function is like a release from the user on the\nbutton with all consequences.\nUsually the {@link #release} function will be called before the call of\nthis function."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fireExecuteEvent {Boolean?true} flag which signals, if an event should be fired",
            "paramName": "fireExecuteEvent",
            "description": " flag which signals, if an event should be fired",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_applyEnabled": {
      "location": {
        "start": {
          "line": 198,
          "column": 4
        },
        "end": {
          "line": 216,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPROPERTY APPLY ROUTINES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_onPointerOver": {
      "location": {
        "start": {
          "line": 234,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT HANDLER\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Listener method for \"pointerover\" event\n<ul>\n<li>Adds state \"hovered\"</li>\n<li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onPointerOut": {
      "location": {
        "start": {
          "line": 260,
          "column": 4
        },
        "end": {
          "line": 274,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener method for \"pointerout\" event\n<ul>\n<li>Removes \"hovered\" state</li>\n<li>Adds \"abandoned\" and removes \"pressed\" state (if \"pressed\" state is set)</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onPointerDown": {
      "location": {
        "start": {
          "line": 286,
          "column": 4
        },
        "end": {
          "line": 298,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Callback method for the \"pointerdown\" method.\n\nSets the interval of the timer (value of firstInterval property) and\nstarts the timer. Additionally removes the state \"abandoned\" and adds the\nstate \"pressed\"."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointerdown event",
            "paramName": "e",
            "description": " pointerdown event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onPointerUp": {
      "location": {
        "start": {
          "line": 310,
          "column": 4
        },
        "end": {
          "line": 325,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Callback method for the \"pointerup\" event.\n\nHandles the case that the user is releasing a button\nbefore the timer interval method got executed. This way the\n\"execute\" method get executed at least one time."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointerup event",
            "paramName": "e",
            "description": " pointerup event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onTap": {
      "location": {
        "start": {
          "line": 329,
          "column": 4
        },
        "end": {
          "line": 329,
          "column": 27
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Nothing to do, 'execute' is already fired by _onPointerUp."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onKeyUp": {
      "location": {
        "start": {
          "line": 341,
          "column": 4
        },
        "end": {
          "line": 359,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener method for \"keyup\" event.\n\nRemoves \"abandoned\" and \"pressed\" state (if \"pressed\" state is set)\nfor the keys \"Enter\" or \"Space\" and stops the internal timer\n(same like pointer up)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Key event",
            "paramName": "e",
            "description": " Key event",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onKeyDown": {
      "location": {
        "start": {
          "line": 371,
          "column": 4
        },
        "end": {
          "line": 382,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener method for \"keydown\" event.\n\nRemoves \"abandoned\" and adds \"pressed\" state\nfor the keys \"Enter\" or \"Space\". It also starts\nthe internal timer (same like pointerdown)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Key event",
            "paramName": "e",
            "description": " Key event",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onInterval": {
      "location": {
        "start": {
          "line": 394,
          "column": 4
        },
        "end": {
          "line": 398,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Callback for the interval event.\n\nStops the timer and starts it with a new interval\n(value of the \"interval\" property - value of the \"timerDecrease\" property).\nDispatches the \"execute\" event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} interval event",
            "paramName": "e",
            "description": " interval event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__startInternalTimer": {
      "location": {
        "start": {
          "line": 412,
          "column": 4
        },
        "end": {
          "line": 427,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nINTERNAL TIMER\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Starts the internal timer which causes firing of execution\nevents in an interval. It also presses the button."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__stopInternalTimer": {
      "location": {
        "start": {
          "line": 434,
          "column": 4
        },
        "end": {
          "line": 442,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Stops the internal timer and releases the button."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "setCommand": {
      "type": "function",
      "name": "setCommand",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.command.Command",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getCommand": {
      "type": "function",
      "name": "getCommand",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.command.Command",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "execute": {
      "type": "function",
      "name": "execute",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IExecutable"
    },
    "__onCommandExecute": {
      "type": "function",
      "name": "__onCommandExecute",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MExecutable",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handler for the execute event of the command."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} The execute event of the command.",
            "paramName": "e",
            "description": " The execute event of the command.",
            "type": "qx.event.type.Event"
          }
        ]
      }
    },
    "_applyCommand": {
      "type": "function",
      "name": "_applyCommand",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MExecutable"
    },
    "resetCommand": {
      "type": "function",
      "name": "resetCommand",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getInterval": {
      "type": "function",
      "name": "getInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setInterval": {
      "type": "function",
      "name": "setInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetInterval": {
      "type": "function",
      "name": "resetInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getFirstInterval": {
      "type": "function",
      "name": "getFirstInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setFirstInterval": {
      "type": "function",
      "name": "setFirstInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetFirstInterval": {
      "type": "function",
      "name": "resetFirstInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMinTimer": {
      "type": "function",
      "name": "getMinTimer",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMinTimer": {
      "type": "function",
      "name": "setMinTimer",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMinTimer": {
      "type": "function",
      "name": "resetMinTimer",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getTimerDecrease": {
      "type": "function",
      "name": "getTimerDecrease",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setTimerDecrease": {
      "type": "function",
      "name": "setTimerDecrease",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetTimerDecrease": {
      "type": "function",
      "name": "resetTimerDecrease",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 454,
        "column": 2
      },
      "end": {
        "line": 456,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}