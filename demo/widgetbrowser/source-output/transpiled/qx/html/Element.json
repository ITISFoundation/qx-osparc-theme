{
  "className": "qx.html.Element",
  "packageName": "qx.html",
  "name": "Element",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 43,
        "column": 0
      },
      "end": {
        "line": 2898,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "High-performance, high-level DOM element creation and management.\n\nIncludes support for HTML and style attributes. Elements also have\ngot a powerful children and visibility management.\n\nProcesses DOM insertion and modification with advanced logic\nto reduce the real transactions.\n\nFrom the view of the parent you can use the following children management\nmethods:\n{@link #getChildren}, {@link #indexOf}, {@link #hasChild}, {@link #add},\n{@link #addAt}, {@link #remove}, {@link #removeAt}, {@link #removeAll}\n\nEach child itself also has got some powerful methods to control its\nposition:\n{@link #getParent}, {@link #free},\n{@link #insertInto}, {@link #insertBefore}, {@link #insertAfter},\n{@link #moveTo}, {@link #moveBefore}, {@link #moveAfter},\n\nNOTE: Instances of this class must be disposed of after use"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.module.Animation"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 66,
        "column": 2
      },
      "end": {
        "line": 75,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": "Creates a new Element"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "tagName {String?\"div\"} Tag name of the element to create",
          "paramName": "tagName",
          "description": " Tag name of the element to create",
          "optional": true,
          "defaultValue": "\"div\"",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "styles {Map?null} optional map of CSS styles, where the key is the name\nof the style and the value is the value to use.",
          "paramName": "styles",
          "description": " optional map of CSS styles, where the key is the name\nof the style and the value is the value to use.",
          "optional": true,
          "defaultValue": "null",
          "type": "Map"
        },
        {
          "name": "@param",
          "body": "attributes {Map?null} optional map of element attributes, where the\nkey is the name of the attribute and the value is the value to use.",
          "paramName": "attributes",
          "description": " optional map of element attributes, where the\nkey is the name of the attribute and the value is the value to use.",
          "optional": true,
          "defaultValue": "null",
          "type": "Map"
        }
      ]
    }
  },
  "members": {
    "__nodeName": {
      "location": {
        "start": {
          "line": 451,
          "column": 4
        },
        "end": {
          "line": 451,
          "column": 21
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPROTECTED HELPERS/DATA\n---------------------------------------------------------------------------"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__element": {
      "location": {
        "start": {
          "line": 454,
          "column": 4
        },
        "end": {
          "line": 454,
          "column": 20
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Element} DOM element of this object"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__widget": {
      "location": {
        "start": {
          "line": 457,
          "column": 4
        },
        "end": {
          "line": 457,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Widget} the Widget this element is attached to"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__root": {
      "location": {
        "start": {
          "line": 460,
          "column": 4
        },
        "end": {
          "line": 460,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Marker for always visible root nodes (often the body node)"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__included": {
      "location": {
        "start": {
          "line": 463,
          "column": 4
        },
        "end": {
          "line": 463,
          "column": 21
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the element should be included in the render result"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__visible": {
      "location": {
        "start": {
          "line": 466,
          "column": 4
        },
        "end": {
          "line": 466,
          "column": 20
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the element should be visible in the render result"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__lazyScrollIntoViewX": {
      "location": {
        "start": {
          "line": 468,
          "column": 4
        },
        "end": {
          "line": 468,
          "column": 32
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lazyScrollIntoViewY": {
      "location": {
        "start": {
          "line": 469,
          "column": 4
        },
        "end": {
          "line": 469,
          "column": 32
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lazyScrollX": {
      "location": {
        "start": {
          "line": 471,
          "column": 4
        },
        "end": {
          "line": 471,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lazyScrollY": {
      "location": {
        "start": {
          "line": 472,
          "column": 4
        },
        "end": {
          "line": 472,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__styleJobs": {
      "location": {
        "start": {
          "line": 474,
          "column": 4
        },
        "end": {
          "line": 474,
          "column": 22
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__attribJobs": {
      "location": {
        "start": {
          "line": 475,
          "column": 4
        },
        "end": {
          "line": 475,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__propertyJobs": {
      "location": {
        "start": {
          "line": 476,
          "column": 4
        },
        "end": {
          "line": 476,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__styleValues": {
      "location": {
        "start": {
          "line": 478,
          "column": 4
        },
        "end": {
          "line": 478,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__attribValues": {
      "location": {
        "start": {
          "line": 479,
          "column": 4
        },
        "end": {
          "line": 479,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__propertyValues": {
      "location": {
        "start": {
          "line": 480,
          "column": 4
        },
        "end": {
          "line": 480,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__eventValues": {
      "location": {
        "start": {
          "line": 481,
          "column": 4
        },
        "end": {
          "line": 481,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__children": {
      "location": {
        "start": {
          "line": 483,
          "column": 4
        },
        "end": {
          "line": 483,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__modifiedChildren": {
      "location": {
        "start": {
          "line": 484,
          "column": 4
        },
        "end": {
          "line": 484,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__parent": {
      "location": {
        "start": {
          "line": 486,
          "column": 4
        },
        "end": {
          "line": 486,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_scheduleChildrenUpdate": {
      "location": {
        "start": {
          "line": 492,
          "column": 4
        },
        "end": {
          "line": 502,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add the element to the global modification list."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_createDomElement": {
      "location": {
        "start": {
          "line": 510,
          "column": 4
        },
        "end": {
          "line": 512,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal helper to generate the DOM element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} DOM element",
            "type": "qx.html.Element",
            "desc": " DOM element"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "connectWidget": {
      "location": {
        "start": {
          "line": 521,
          "column": 4
        },
        "end": {
          "line": 536,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Connects a widget to this element, and to the DOM element in this Element.  They\nremain associated until disposed or disconnectWidget is called"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} the widget",
            "paramName": "widget",
            "description": " the widget",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "disconnectWidget": {
      "location": {
        "start": {
          "line": 545,
          "column": 4
        },
        "end": {
          "line": 560,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Disconnects a widget from this element and the DOM element.  The DOM element remains\nuntouched, except that it can no longer be used to find the Widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} the Widget",
            "paramName": "widget",
            "description": " the Widget",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__connectDomElement": {
      "location": {
        "start": {
          "line": 569,
          "column": 4
        },
        "end": {
          "line": 583,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Connects a DOM element to this Element; if this Element is already connected to a Widget\nthen the Widget is also connected."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domElement {DOM} the DOM element to associate",
            "paramName": "domElement",
            "description": " the DOM element to associate",
            "type": "DOM"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__flush": {
      "location": {
        "start": {
          "line": 600,
          "column": 4
        },
        "end": {
          "line": 645,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nFLUSH OBJECT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Syncs data of an HtmlElement object to the DOM."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_insertChildren": {
      "location": {
        "start": {
          "line": 664,
          "column": 4
        },
        "end": {
          "line": 694,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSUPPORT FOR CHILDREN FLUSH\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Append all child nodes to the DOM\nelement. This function is used when the element is initially\ncreated. After this initial apply {@link #_syncChildren} is used\ninstead."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_syncChildren": {
      "location": {
        "start": {
          "line": 703,
          "column": 4
        },
        "end": {
          "line": 779,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Synchronize internal children hierarchy to the DOM. This is used\nfor further runtime updates after the element has been created\ninitially."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_copyData": {
      "location": {
        "start": {
          "line": 799,
          "column": 4
        },
        "end": {
          "line": 853,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSUPPORT FOR ATTRIBUTE/STYLE/EVENT FLUSH\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Copies data between the internal representation and the DOM. This\nsimply copies all the data and only works well directly after\nelement creation. After this the data must be synced using {@link #_syncData}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fromMarkup {Boolean} Whether the copy should respect styles\ngiven from markup",
            "paramName": "fromMarkup",
            "description": " Whether the copy should respect styles\ngiven from markup",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_syncData": {
      "location": {
        "start": {
          "line": 862,
          "column": 4
        },
        "end": {
          "line": 927,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Synchronizes data between the internal representation and the DOM. This\nis the counterpart of {@link #_copyData} and is used for further updates\nafter the element has been created."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__willBeSeeable": {
      "location": {
        "start": {
          "line": 950,
          "column": 4
        },
        "end": {
          "line": 969,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPRIVATE HELPERS/DATA\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Walk up the internal children hierarchy and\nlook if one of the children is marked as root.\n\nThis method is quite performance hungry as it\nreally walks up recursively."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the element will be seeable",
            "type": "Boolean",
            "desc": " <code>true</code> if the element will be seeable"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__addChildHelper": {
      "location": {
        "start": {
          "line": 979,
          "column": 4
        },
        "end": {
          "line": 1006,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal helper for all children addition needs"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {var} the element to add",
            "paramName": "child",
            "description": " the element to add",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the given element is already a child\nof this element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__removeChildHelper": {
      "location": {
        "start": {
          "line": 1016,
          "column": 4
        },
        "end": {
          "line": 1029,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal helper for all children removal needs"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.html.Element} the removed element",
            "paramName": "child",
            "description": " the removed element",
            "type": "qx.html.Element"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the given element is not a child\nof this element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__moveChildHelper": {
      "location": {
        "start": {
          "line": 1039,
          "column": 4
        },
        "end": {
          "line": 1049,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal helper for all children move needs"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.html.Element} the moved element",
            "paramName": "child",
            "description": " the moved element",
            "type": "qx.html.Element"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the given element is not a child\nof this element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getChildren": {
      "location": {
        "start": {
          "line": 1069,
          "column": 4
        },
        "end": {
          "line": 1071,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCHILDREN MANAGEMENT (EXECUTED ON THE PARENT)\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns a copy of the internal children structure.\n\nPlease do not modify the array in place. If you need\nto work with the data in such a way make yourself\na copy of the data first."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the children list",
            "type": "Array",
            "desc": " the children list"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getChild": {
      "location": {
        "start": {
          "line": 1081,
          "column": 4
        },
        "end": {
          "line": 1085,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get a child element at the given index"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} child index",
            "paramName": "index",
            "description": " child index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element|null} The child element or <code>null</code> if\nno child is found at that index.",
            "type": "qx.html.Element|null",
            "desc": " The child element or <code>null</code> if\nno child is found at that index."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasChildren": {
      "location": {
        "start": {
          "line": 1093,
          "column": 4
        },
        "end": {
          "line": 1097,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether the element has any child nodes"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the element has any child nodes",
            "type": "Boolean",
            "desc": " Whether the element has any child nodes"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "indexOf": {
      "location": {
        "start": {
          "line": 1107,
          "column": 4
        },
        "end": {
          "line": 1111,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Find the position of the given child"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.html.Element} the child",
            "paramName": "child",
            "description": " the child",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} returns the position. If the element\nis not a child <code>-1</code> will be returned.",
            "type": "Integer",
            "desc": " returns the position. If the element\nis not a child <code>-1</code> will be returned."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasChild": {
      "location": {
        "start": {
          "line": 1121,
          "column": 4
        },
        "end": {
          "line": 1125,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the given element is a child of this element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.html.Element} the child",
            "paramName": "child",
            "description": " the child",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the given\nelement is a child of this element.",
            "type": "Boolean",
            "desc": " Returns <code>true</code> when the given\nelement is a child of this element."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "add": {
      "location": {
        "start": {
          "line": 1134,
          "column": 4
        },
        "end": {
          "line": 1152,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Append all given children at the end of this element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {qx.html.Element} elements to insert",
            "paramName": "varargs",
            "description": " elements to insert",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addAt": {
      "location": {
        "start": {
          "line": 1164,
          "column": 4
        },
        "end": {
          "line": 1171,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Inserts a new element into this element at the given position."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.html.Element} the element to insert",
            "paramName": "child",
            "description": " the element to insert",
            "type": "qx.html.Element"
          },
          {
            "name": "@param",
            "body": "index {Integer} the index (starts at 0 for the\nfirst child) to insert (the index of the following\nchildren will be increased by one)",
            "paramName": "index",
            "description": " the index (starts at 0 for the\nfirst child) to insert (the index of the following\nchildren will be increased by one)",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 1180,
          "column": 4
        },
        "end": {
          "line": 1206,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes all given children"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "childs {qx.html.Element} children to remove",
            "paramName": "childs",
            "description": " children to remove",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAt": {
      "location": {
        "start": {
          "line": 1216,
          "column": 4
        },
        "end": {
          "line": 1233,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the child at the given index"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} the position of the\nchild (starts at 0 for the first child)",
            "paramName": "index",
            "description": " the position of the\nchild (starts at 0 for the first child)",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAll": {
      "location": {
        "start": {
          "line": 1241,
          "column": 4
        },
        "end": {
          "line": 1256,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove all children from this element."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} A reference to this.",
            "type": "qx.html.Element",
            "desc": " A reference to this."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getParent": {
      "location": {
        "start": {
          "line": 1274,
          "column": 4
        },
        "end": {
          "line": 1276,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCHILDREN MANAGEMENT (EXECUTED ON THE CHILD)\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns the parent of this element."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element|null} The parent of this element",
            "type": "qx.html.Element|null",
            "desc": " The parent of this element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertInto": {
      "location": {
        "start": {
          "line": 1288,
          "column": 4
        },
        "end": {
          "line": 1299,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Insert self into the given parent. Normally appends self to the end,\nbut optionally a position can be defined. With index <code>0</code> it\nwill be inserted at the begin."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "parent {qx.html.Element} The new parent of this element",
            "paramName": "parent",
            "description": " The new parent of this element",
            "type": "qx.html.Element"
          },
          {
            "name": "@param",
            "body": "index {Integer?null} Optional position",
            "paramName": "index",
            "description": " Optional position",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertBefore": {
      "location": {
        "start": {
          "line": 1308,
          "column": 4
        },
        "end": {
          "line": 1316,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Insert self before the given (related) element"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rel {qx.html.Element} the related element",
            "paramName": "rel",
            "description": " the related element",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertAfter": {
      "location": {
        "start": {
          "line": 1325,
          "column": 4
        },
        "end": {
          "line": 1333,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Insert self after the given (related) element"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rel {qx.html.Element} the related element",
            "paramName": "rel",
            "description": " the related element",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "moveTo": {
      "location": {
        "start": {
          "line": 1344,
          "column": 4
        },
        "end": {
          "line": 1362,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Move self to the given index in the current parent."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} the index (starts at 0 for the first child)",
            "paramName": "index",
            "description": " the index (starts at 0 for the first child)",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when the given element is not child\nof this element."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "moveBefore": {
      "location": {
        "start": {
          "line": 1371,
          "column": 4
        },
        "end": {
          "line": 1375,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Move self before the given (related) child."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rel {qx.html.Element} the related child",
            "paramName": "rel",
            "description": " the related child",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "moveAfter": {
      "location": {
        "start": {
          "line": 1384,
          "column": 4
        },
        "end": {
          "line": 1388,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Move self after the given (related) child."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rel {qx.html.Element} the related child",
            "paramName": "rel",
            "description": " the related child",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "free": {
      "location": {
        "start": {
          "line": 1396,
          "column": 4
        },
        "end": {
          "line": 1411,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove self from the current parent."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDomElement": {
      "location": {
        "start": {
          "line": 1431,
          "column": 4
        },
        "end": {
          "line": 1433,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nDOM ELEMENT ACCESS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns the DOM element (if created). Please use this with caution.\nIt is better to make all changes to the object itself using the public\nAPI rather than to the underlying DOM element."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element|null} The DOM element node, if available.",
            "type": "Element|null",
            "desc": " The DOM element node, if available."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getNodeName": {
      "location": {
        "start": {
          "line": 1441,
          "column": 4
        },
        "end": {
          "line": 1443,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the nodeName of the DOM element."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The node name",
            "type": "String",
            "desc": " The node name"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setNodeName": {
      "location": {
        "start": {
          "line": 1450,
          "column": 4
        },
        "end": {
          "line": 1452,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the nodeName of the DOM element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The node name",
            "paramName": "name",
            "description": " The node name",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRoot": {
      "location": {
        "start": {
          "line": 1459,
          "column": 4
        },
        "end": {
          "line": 1461,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the element's root flag, which indicates\nwhether the element should be a root element or not."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "root {Boolean} The root flag.",
            "paramName": "root",
            "description": " The root flag.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "useMarkup": {
      "location": {
        "start": {
          "line": 1471,
          "column": 4
        },
        "end": {
          "line": 1493,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Uses existing markup for this element. This is mainly used\nto insert pre-built markup blocks into the element hierarchy."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "html {String} HTML markup with one root element\nwhich is used as the main element for this instance.",
            "paramName": "html",
            "description": " HTML markup with one root element\nwhich is used as the main element for this instance.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The created DOM element",
            "type": "qx.html.Element",
            "desc": " The created DOM element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "useElement": {
      "location": {
        "start": {
          "line": 1502,
          "column": 4
        },
        "end": {
          "line": 1513,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Uses an existing element instead of creating one. This may be interesting\nwhen the DOM element is directly needed to add content etc."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} Element to reuse",
            "paramName": "elem",
            "description": " Element to reuse",
            "type": "qx.html.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isFocusable": {
      "location": {
        "start": {
          "line": 1521,
          "column": 4
        },
        "end": {
          "line": 1534,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the element is focusable (or will be when created)"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the element is focusable.",
            "type": "Boolean",
            "desc": " <code>true</code> when the element is focusable."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setSelectable": {
      "location": {
        "start": {
          "line": 1544,
          "column": 4
        },
        "end": {
          "line": 1552,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set whether the element is selectable. It uses the qooxdoo attribute\nqxSelectable with the values 'on' or 'off'.\nIn webkit, a special css property will be used (-webkit-user-select)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} True, if the element should be selectable.",
            "paramName": "value",
            "description": " True, if the element should be selectable.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isNativelyFocusable": {
      "location": {
        "start": {
          "line": 1562,
          "column": 4
        },
        "end": {
          "line": 1564,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the element is natively focusable (or will be when created)\n\nThis ignores the configured tabIndex."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the element is focusable.",
            "type": "Boolean",
            "desc": " <code>true</code> when the element is focusable."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "include": {
      "location": {
        "start": {
          "line": 1584,
          "column": 4
        },
        "end": {
          "line": 1597,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEXCLUDE SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Marks the element as included which means it will be moved into\nthe DOM again and synced with the internal data representation."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "exclude": {
      "location": {
        "start": {
          "line": 1606,
          "column": 4
        },
        "end": {
          "line": 1619,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Marks the element as excluded which means it will be removed\nfrom the DOM and ignored for updates until it gets included again."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isIncluded": {
      "location": {
        "start": {
          "line": 1627,
          "column": 4
        },
        "end": {
          "line": 1629,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the element is part of the DOM"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the element is part of the DOM.",
            "type": "Boolean",
            "desc": " Whether the element is part of the DOM."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fadeIn": {
      "location": {
        "start": {
          "line": 1645,
          "column": 4
        },
        "end": {
          "line": 1662,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nANIMATION SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Fades in the element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} Time in ms.",
            "paramName": "duration",
            "description": " Time in ms.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.element.AnimationHandle} The animation handle to react for\nthe fade animation.",
            "type": "qx.bom.element.AnimationHandle",
            "desc": " The animation handle to react for\nthe fade animation."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fadeOut": {
      "location": {
        "start": {
          "line": 1671,
          "column": 4
        },
        "end": {
          "line": 1684,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fades out the element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} Time in ms.",
            "paramName": "duration",
            "description": " Time in ms.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.element.AnimationHandle} The animation handle to react for\nthe fade animation.",
            "type": "qx.bom.element.AnimationHandle",
            "desc": " The animation handle to react for\nthe fade animation."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "show": {
      "location": {
        "start": {
          "line": 1702,
          "column": 4
        },
        "end": {
          "line": 1721,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nVISIBILITY SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Marks the element as visible which means that a previously applied\nCSS style of display=none gets removed and the element will inserted\ninto the DOM, when this had not already happened before."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hide": {
      "location": {
        "start": {
          "line": 1730,
          "column": 4
        },
        "end": {
          "line": 1744,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Marks the element as hidden which means it will kept in DOM (if it\nis already there, but configured hidden using a CSS style of display=none)."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isVisible": {
      "location": {
        "start": {
          "line": 1755,
          "column": 4
        },
        "end": {
          "line": 1757,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the element is visible.\n\nPlease note: This does not control the visibility or parent inclusion recursively."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the element is configured\nto be visible.",
            "type": "Boolean",
            "desc": " Returns <code>true</code> when the element is configured\nto be visible."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollChildIntoViewX": {
      "location": {
        "start": {
          "line": 1786,
          "column": 4
        },
        "end": {
          "line": 1808,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSCROLL SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Scrolls the given child element into view. Only scrolls children.\nDo not influence elements on top of this element.\n\nIf the element is currently invisible it gets scrolled automatically\nat the next time it is visible again (queued)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {qx.html.Element} The element to scroll into the viewport.",
            "paramName": "elem",
            "description": " The element to scroll into the viewport.",
            "type": "qx.html.Element"
          },
          {
            "name": "@param",
            "body": "align {String?null} Alignment of the element. Allowed values:\n<code>left</code> or <code>right</code>. Could also be null.\nWithout a given alignment the method tries to scroll the widget\nwith the minimum effort needed.",
            "paramName": "align",
            "description": " Alignment of the element. Allowed values:\n<code>left</code> or <code>right</code>. Could also be null.\nWithout a given alignment the method tries to scroll the widget\nwith the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?true} Whether the execution should be made\ndirectly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\ndirectly when possible",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollChildIntoViewY": {
      "location": {
        "start": {
          "line": 1826,
          "column": 4
        },
        "end": {
          "line": 1848,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Scrolls the given child element into view. Only scrolls children.\nDo not influence elements on top of this element.\n\nIf the element is currently invisible it gets scrolled automatically\nat the next time it is visible again (queued)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {qx.html.Element} The element to scroll into the viewport.",
            "paramName": "elem",
            "description": " The element to scroll into the viewport.",
            "type": "qx.html.Element"
          },
          {
            "name": "@param",
            "body": "align {String?null} Alignment of the element. Allowed values:\n<code>top</code> or <code>bottom</code>. Could also be null.\nWithout a given alignment the method tries to scroll the widget\nwith the minimum effort needed.",
            "paramName": "align",
            "description": " Alignment of the element. Allowed values:\n<code>top</code> or <code>bottom</code>. Could also be null.\nWithout a given alignment the method tries to scroll the widget\nwith the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?true} Whether the execution should be made\ndirectly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\ndirectly when possible",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollToX": {
      "location": {
        "start": {
          "line": 1858,
          "column": 4
        },
        "end": {
          "line": 1874,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Scrolls the element to the given left position."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "x {Integer} Horizontal scroll position",
            "paramName": "x",
            "description": " Horizontal scroll position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lazy {Boolean?false} Whether the scrolling should be performed\nduring element flush.",
            "paramName": "lazy",
            "description": " Whether the scrolling should be performed\nduring element flush.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScrollX": {
      "location": {
        "start": {
          "line": 1882,
          "column": 4
        },
        "end": {
          "line": 1890,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the horizontal scroll position."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Horizontal scroll position",
            "type": "Integer",
            "desc": " Horizontal scroll position"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollToY": {
      "location": {
        "start": {
          "line": 1900,
          "column": 4
        },
        "end": {
          "line": 1916,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Scrolls the element to the given top position."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "y {Integer} Vertical scroll position",
            "paramName": "y",
            "description": " Vertical scroll position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lazy {Boolean?false} Whether the scrolling should be performed\nduring element flush.",
            "paramName": "lazy",
            "description": " Whether the scrolling should be performed\nduring element flush.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScrollY": {
      "location": {
        "start": {
          "line": 1924,
          "column": 4
        },
        "end": {
          "line": 1932,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the vertical scroll position."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Vertical scroll position",
            "type": "Integer",
            "desc": " Vertical scroll position"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "disableScrolling": {
      "location": {
        "start": {
          "line": 1938,
          "column": 4
        },
        "end": {
          "line": 1944,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Disables browser-native scrolling"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "enableScrolling": {
      "location": {
        "start": {
          "line": 1950,
          "column": 4
        },
        "end": {
          "line": 1952,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Re-enables browser-native scrolling"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__inScroll": {
      "location": {
        "start": {
          "line": 1955,
          "column": 4
        },
        "end": {
          "line": 1955,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onScroll": {
      "location": {
        "start": {
          "line": 1962,
          "column": 4
        },
        "end": {
          "line": 1971,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handler for the scroll-event"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Native} scroll-event",
            "paramName": "e",
            "description": " scroll-event",
            "type": "qx.event.type.Native"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getTextSelection": {
      "location": {
        "start": {
          "line": 1988,
          "column": 4
        },
        "end": {
          "line": 1996,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nTEXT SELECTION SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Get the selection of the element.\n\nIf the underlaying DOM element is not yet created, this methods returns\na null value."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null}",
            "type": "String|null",
            "desc": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTextSelectionLength": {
      "location": {
        "start": {
          "line": 2007,
          "column": 4
        },
        "end": {
          "line": 2015,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the length of selection of the element.\n\nIf the underlaying DOM element is not yet created, this methods returns\na null value."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null}",
            "type": "Integer|null",
            "desc": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTextSelectionStart": {
      "location": {
        "start": {
          "line": 2026,
          "column": 4
        },
        "end": {
          "line": 2034,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the start of the selection of the element.\n\nIf the underlaying DOM element is not yet created, this methods returns\na null value."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null}",
            "type": "Integer|null",
            "desc": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTextSelectionEnd": {
      "location": {
        "start": {
          "line": 2045,
          "column": 4
        },
        "end": {
          "line": 2053,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the end of the selection of the element.\n\nIf the underlaying DOM element is not yet created, this methods returns\na null value."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null}",
            "type": "Integer|null",
            "desc": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setTextSelection": {
      "location": {
        "start": {
          "line": 2065,
          "column": 4
        },
        "end": {
          "line": 2080,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set the selection of the element with the given start and end value.\nIf no end value is passed the selection will extend to the end.\n\nThis method only works if the underlying DOM element is already created."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "start {Integer} start of the selection (zero based)",
            "paramName": "start",
            "description": " start of the selection (zero based)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "end {Integer} end of the selection",
            "paramName": "end",
            "description": " end of the selection",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clearTextSelection": {
      "location": {
        "start": {
          "line": 2089,
          "column": 4
        },
        "end": {
          "line": 2096,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Clears the selection of the element.\n\nThis method only works if the underlying DOM element is already created."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__performAction": {
      "location": {
        "start": {
          "line": 2114,
          "column": 4
        },
        "end": {
          "line": 2124,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nFOCUS/ACTIVATE SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Takes the action to process as argument and queues this action if the\nunderlying DOM element is not yet created."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} action to queue",
            "paramName": "action",
            "description": " action to queue",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Array} optional list of arguments for the action",
            "paramName": "args",
            "description": " optional list of arguments for the action",
            "type": "Array"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "focus": {
      "location": {
        "start": {
          "line": 2134,
          "column": 4
        },
        "end": {
          "line": 2136,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Focus this element.\n\nIf the underlaying DOM element is not yet created, the\nfocus is queued for processing after the element creation."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "blur": {
      "location": {
        "start": {
          "line": 2143,
          "column": 4
        },
        "end": {
          "line": 2145,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Mark this element to get blurred on the next flush of the queue"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "activate": {
      "location": {
        "start": {
          "line": 2152,
          "column": 4
        },
        "end": {
          "line": 2154,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Mark this element to get activated on the next flush of the queue"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deactivate": {
      "location": {
        "start": {
          "line": 2161,
          "column": 4
        },
        "end": {
          "line": 2163,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Mark this element to get deactivated on the next flush of the queue"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "capture": {
      "location": {
        "start": {
          "line": 2173,
          "column": 4
        },
        "end": {
          "line": 2175,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Captures all mouse events to this element"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "containerCapture {Boolean?true} If true all events originating in\nthe container are captured. If false events originating in the container\nare not captured.",
            "paramName": "containerCapture",
            "description": " If true all events originating in\nthe container are captured. If false events originating in the container\nare not captured.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "releaseCapture": {
      "location": {
        "start": {
          "line": 2181,
          "column": 4
        },
        "end": {
          "line": 2183,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Releases this element from a previous {@link #capture} call"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setStyle": {
      "location": {
        "start": {
          "line": 2204,
          "column": 4
        },
        "end": {
          "line": 2246,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSTYLE SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Set up the given style attribute"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the style attribute",
            "paramName": "key",
            "description": " the name of the style attribute",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} the value",
            "paramName": "value",
            "description": " the value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be applied\ndirectly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be applied\ndirectly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setStyles": {
      "location": {
        "start": {
          "line": 2258,
          "column": 4
        },
        "end": {
          "line": 2322,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Convenience method to modify a set of styles at once."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "map {Map} a map where the key is the name of the property\nand the value is the value to use.",
            "paramName": "map",
            "description": " a map where the key is the name of the property\nand the value is the value to use.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the values should be applied\ndirectly (without queuing)",
            "paramName": "direct",
            "description": " Whether the values should be applied\ndirectly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeStyle": {
      "location": {
        "start": {
          "line": 2333,
          "column": 4
        },
        "end": {
          "line": 2336,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the given style attribute"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the style attribute",
            "paramName": "key",
            "description": " the name of the style attribute",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be removed\ndirectly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be removed\ndirectly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getStyle": {
      "location": {
        "start": {
          "line": 2345,
          "column": 4
        },
        "end": {
          "line": 2347,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the value of the given style attribute."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} name of the style attribute",
            "paramName": "key",
            "description": " name of the style attribute",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the value of the style attribute",
            "type": "var",
            "desc": " the value of the style attribute"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAllStyles": {
      "location": {
        "start": {
          "line": 2355,
          "column": 4
        },
        "end": {
          "line": 2357,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a map of all styles. Do not modify the result map!"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} All styles or <code>null</code> when none are configured.",
            "type": "Map",
            "desc": " All styles or <code>null</code> when none are configured."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setAttribute": {
      "location": {
        "start": {
          "line": 2378,
          "column": 4
        },
        "end": {
          "line": 2420,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nATTRIBUTE SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Set up the given attribute"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the attribute",
            "paramName": "key",
            "description": " the name of the attribute",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} the value",
            "paramName": "value",
            "description": " the value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be applied\ndirectly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be applied\ndirectly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setAttributes": {
      "location": {
        "start": {
          "line": 2432,
          "column": 4
        },
        "end": {
          "line": 2439,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Convenience method to modify a set of attributes at once."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "map {Map} a map where the key is the name of the property\nand the value is the value to use.",
            "paramName": "map",
            "description": " a map where the key is the name of the property\nand the value is the value to use.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the values should be applied\ndirectly (without queuing)",
            "paramName": "direct",
            "description": " Whether the values should be applied\ndirectly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAttribute": {
      "location": {
        "start": {
          "line": 2450,
          "column": 4
        },
        "end": {
          "line": 2452,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the given attribute"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the attribute",
            "paramName": "key",
            "description": " the name of the attribute",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be removed\ndirectly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be removed\ndirectly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAttribute": {
      "location": {
        "start": {
          "line": 2461,
          "column": 4
        },
        "end": {
          "line": 2463,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the value of the given attribute."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} name of the attribute",
            "paramName": "key",
            "description": " name of the attribute",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the value of the attribute",
            "type": "var",
            "desc": " the value of the attribute"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addClass": {
      "location": {
        "start": {
          "line": 2476,
          "column": 4
        },
        "end": {
          "line": 2479,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCSS CLASS SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Adds a css class to the element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the CSS class.",
            "paramName": "name",
            "description": " Name of the CSS class.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeClass": {
      "location": {
        "start": {
          "line": 2486,
          "column": 4
        },
        "end": {
          "line": 2491,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes a CSS class from the current element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the CSS class.",
            "paramName": "name",
            "description": " Name of the CSS class.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyProperty": {
      "location": {
        "start": {
          "line": 2513,
          "column": 4
        },
        "end": {
          "line": 2515,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPROPERTY SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Applies a special property with the given value.\n\nThis property apply routine can be easily overwritten and\nextended by sub classes to add new low level features which\nare not easily possible using styles and attributes."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Unique property identifier",
            "paramName": "name",
            "description": " Unique property identifier",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} Any valid value (depends on the property)",
            "paramName": "value",
            "description": " Any valid value (depends on the property)",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setProperty": {
      "location": {
        "start": {
          "line": 2527,
          "column": 4
        },
        "end": {
          "line": 2569,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set up the given property."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the property",
            "paramName": "key",
            "description": " the name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} the value",
            "paramName": "value",
            "description": " the value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be applied\ndirectly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be applied\ndirectly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_removeProperty": {
      "location": {
        "start": {
          "line": 2580,
          "column": 4
        },
        "end": {
          "line": 2582,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the given misc"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the misc",
            "paramName": "key",
            "description": " the name of the misc",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be removed\ndirectly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be removed\ndirectly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getProperty": {
      "location": {
        "start": {
          "line": 2591,
          "column": 4
        },
        "end": {
          "line": 2600,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the value of the given misc."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} name of the misc",
            "paramName": "key",
            "description": " name of the misc",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the value of the misc",
            "type": "var",
            "desc": " the value of the misc"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "addListener": {
      "location": {
        "start": {
          "line": 2626,
          "column": 4
        },
        "end": {
          "line": 2674,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT SUPPORT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Adds an event listener to the element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Name of the event",
            "paramName": "type",
            "description": " Name of the event",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} Function to execute on event",
            "paramName": "listener",
            "description": " Function to execute on event",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\nthe event listener. When not given, the corresponding dispatcher\nusually falls back to a default, which is the target\nby convention. Note this is not a strict requirement, i.e.\ncustom dispatchers can follow a different strategy.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\nthe event listener. When not given, the corresponding dispatcher\nusually falls back to a default, which is the target\nby convention. Note this is not a strict requirement, i.e.\ncustom dispatchers can follow a different strategy.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether capturing should be enabled",
            "paramName": "capture",
            "description": " Whether capturing should be enabled",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} An opaque id, which can be used to remove the event listener\nusing the {@link #removeListenerById} method.",
            "type": "var",
            "desc": " An opaque id, which can be used to remove the event listener\nusing the {@link #removeListenerById} method."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "removeListener": {
      "location": {
        "start": {
          "line": 2686,
          "column": 4
        },
        "end": {
          "line": 2741,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes an event listener from the element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Name of the event",
            "paramName": "type",
            "description": " Name of the event",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} Function to execute on event",
            "paramName": "listener",
            "description": " Function to execute on event",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object} Execution context of given function",
            "paramName": "self",
            "description": " Execution context of given function",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether capturing should be enabled",
            "paramName": "capture",
            "description": " Whether capturing should be enabled",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "removeListenerById": {
      "location": {
        "start": {
          "line": 2751,
          "column": 4
        },
        "end": {
          "line": 2764,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes an event listener from an event target by an id returned by\n{@link #addListener}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {var} The id returned by {@link #addListener}",
            "paramName": "id",
            "description": " The id returned by {@link #addListener}",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "desc": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "hasListener": {
      "location": {
        "start": {
          "line": 2775,
          "column": 4
        },
        "end": {
          "line": 2803,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Check if there are one or more listeners for an event type."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to check for listeners of\nthe bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to check for listeners of\nthe bubbling or of the capturing phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the object has a listener of the given type.",
            "type": "Boolean",
            "desc": " Whether the object has a listener of the given type."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "getListeners": {
      "location": {
        "start": {
          "line": 2818,
          "column": 4
        },
        "end": {
          "line": 2839,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Serializes and returns all event listeners attached to this element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map[]} an Array containing a map for each listener. The maps\nhave the following keys:\n<ul>\n<li><code>type</code> (String): Event name</li>\n<li><code>handler</code> (Function): Callback function</li>\n<li><code>self</code> (Object): The callback's context</li>\n<li><code>capture</code> (Boolean): If <code>true</code>, the listener is\nattached to the capturing phase</li>\n</ul>",
            "type": "Map[]",
            "desc": " an Array containing a map for each listener. The maps\nhave the following keys:\n<ul>\n<li><code>type</code> (String): Event name</li>\n<li><code>handler</code> (Function): Callback function</li>\n<li><code>self</code> (Object): The callback's context</li>\n<li><code>capture</code> (Boolean): If <code>true</code>, the listener is\nattached to the capturing phase</li>\n</ul>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 2852,
        "column": 2
      },
      "end": {
        "line": 2854,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDEFER\n****************************************************************************"
        }
      ]
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 2866,
        "column": 2
      },
      "end": {
        "line": 2897,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCT\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": [
    "qx.html.Root",
    "qx.html.Label",
    "qx.html.Image",
    "qx.html.Flash",
    "qx.html.Canvas",
    "qx.ui.splitpane.Blocker",
    "qx.html.Iframe",
    "qx.html.Blocker",
    "qx.html.Input"
  ]
}