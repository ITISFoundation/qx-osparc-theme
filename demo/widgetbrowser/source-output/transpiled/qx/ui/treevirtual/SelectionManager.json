{
  "className": "qx.ui.treevirtual.SelectionManager",
  "packageName": "qx.ui.treevirtual",
  "name": "SelectionManager",
  "superClass": "qx.ui.table.selection.Manager",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 26,
        "column": 0
      },
      "end": {
        "line": 223,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2007 Derrell Lipman\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nDerrell Lipman (derrell)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "A selection manager. This is a helper class that handles all selection\nrelated events and updates a SelectionModel.\n<p>\nThis Selection Manager differs from its superclass in that we do not want\nrows to be selected when moving around with the keyboard."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 37,
        "column": 2
      },
      "end": {
        "line": 42,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "table {qx.ui.table.Table}\nThe table whose selections are being managed",
          "paramName": "table",
          "description": "\nThe table whose selections are being managed",
          "type": "qx.ui.table.Table"
        }
      ]
    }
  },
  "members": {
    "__table": {
      "location": {
        "start": {
          "line": 48,
          "column": 4
        },
        "end": {
          "line": 48,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getTable": {
      "location": {
        "start": {
          "line": 57,
          "column": 4
        },
        "end": {
          "line": 60,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Getter for the table being managed"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.Table}\nTable being managed",
            "type": "qx.ui.table.Table",
            "desc": "\nTable being managed"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_handleSelectEvent": {
      "location": {
        "start": {
          "line": 73,
          "column": 4
        },
        "end": {
          "line": 189,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handles a select event.  First we determine if the click was on the\nopen/close button and toggle the opened/closed state as necessary.\nThen, if the click was not on the open/close button or if the table's\n\"openCloseClickSelectsRow\" property so indicates, call our superclass to\nhandle the actual row selection."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} the index the event is pointing at.",
            "paramName": "index",
            "description": " the index the event is pointing at.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "evt {Map} the mouse event.",
            "paramName": "evt",
            "description": " the mouse event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.table.selection.Manager",
      "appearsIn": [
        "qx.ui.table.selection.Manager"
      ]
    },
    "_handleExtendedClick": {
      "location": {
        "start": {
          "line": 214,
          "column": 4
        },
        "end": {
          "line": 217,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handle a mouse click event that is not normally handled by the simple\ntree.  This is intended for more sophisticated trees where clicks in\ndifferent places, e.g. on various icons or on the label itself, should\nbe handled specially."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "tree {qx.ui.treevirtual.TreeVirtual}\nThe tree on which the event has occurred.",
            "paramName": "tree",
            "description": "\nThe tree on which the event has occurred.",
            "type": "qx.ui.treevirtual.TreeVirtual"
          },
          {
            "name": "@param",
            "body": "evt {Map}\nThe mouse event.  Of particular interest is evt.getViewportLeft()\nwhich is the horizontal offset from the left border of the click.",
            "paramName": "evt",
            "description": "\nThe mouse event.  Of particular interest is evt.getViewportLeft()\nwhich is the horizontal offset from the left border of the click.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "node {Map}\nThe node which the tree row is displaying",
            "paramName": "node",
            "description": "\nThe node which the tree row is displaying",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "left {Integer}\nThe offset from the left, of the beginning of the tree column.",
            "paramName": "left",
            "description": "\nThe offset from the left, of the beginning of the tree column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}\n<i>true</i> if the row should be prevented from being selected;\n<i>false</i> otherwise.",
            "type": "Boolean",
            "desc": "\n<i>true</i> if the row should be prevented from being selected;\n<i>false</i> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getSelectionModel": {
      "type": "function",
      "name": "getSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.table.selection.Model",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSelectionModel": {
      "type": "function",
      "name": "setSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.table.selection.Model",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetSelectionModel": {
      "type": "function",
      "name": "resetSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 220,
        "column": 2
      },
      "end": {
        "line": 222,
        "column": 3
      }
    }
  },
  "descendants": []
}