{
  "className": "qx.locale.Manager",
  "packageName": "qx.locale",
  "name": "Manager",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 31,
        "column": 0
      },
      "end": {
        "line": 475,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The qx.locale.Manager provides static translation methods (like tr()) and\ngeneral locale information."
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.event.dispatch.Direct"
        },
        {
          "name": "@require",
          "body": "qx.locale.LocalizedString"
        }
      ],
      "@cldr": [
        {
          "name": "@cldr",
          "body": ""
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 45,
        "column": 2
      },
      "end": {
        "line": 54,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "properties": {
    "locale": {
      "location": {
        "start": {
          "line": 176,
          "column": 4
        },
        "end": {
          "line": 191,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "current locale. locale is an language code like de, de_AT, en, en_GB, fr, ..."
          }
        ]
      },
      "name": "locale",
      "propertyType": "new",
      "event": "changeLocale",
      "apply": "_applyLocale",
      "check": "String"
    }
  },
  "members": {
    "__defaultLocale": {
      "location": {
        "start": {
          "line": 206,
          "column": 4
        },
        "end": {
          "line": 206,
          "column": 63
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__locale": {
      "location": {
        "start": {
          "line": 207,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__language": {
      "location": {
        "start": {
          "line": 208,
          "column": 4
        },
        "end": {
          "line": 208,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__translations": {
      "location": {
        "start": {
          "line": 209,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__locales": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 210,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__clientLocale": {
      "location": {
        "start": {
          "line": 211,
          "column": 4
        },
        "end": {
          "line": 211,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getLanguage": {
      "location": {
        "start": {
          "line": 220,
          "column": 4
        },
        "end": {
          "line": 222,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the language code of the current locale\n\nThis is the first part of a locale definition. The language for \"de_DE\" would be \"de\""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} language code",
            "type": "String",
            "desc": " language code"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTerritory": {
      "location": {
        "start": {
          "line": 232,
          "column": 4
        },
        "end": {
          "line": 234,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the territory code of the current locale\n\nThis is the second part of a locale definition. The territory for \"de_DE\" would be \"DE\""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} territory code",
            "type": "String",
            "desc": " territory code"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAvailableLocales": {
      "location": {
        "start": {
          "line": 249,
          "column": 4
        },
        "end": {
          "line": 264,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Return the available application locales\n\nThis corresponds to the LOCALES setting in config.json. Without argument,\nit only returns the currently loaded locales, with an argument of true\nall locales that went into the build. This is particularly interesting if\nlocales were generated as dedicated I18N parts, and have to be loaded\nexplicitly before being available."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "includeNonloaded {Boolean?null} include locales not yet loaded",
            "paramName": "includeNonloaded",
            "description": " include locales not yet loaded",
            "optional": true,
            "defaultValue": "null",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} array of available locales",
            "type": "String[]",
            "desc": " array of available locales"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__extractLanguage": {
      "location": {
        "start": {
          "line": 273,
          "column": 4
        },
        "end": {
          "line": 288,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Extract the language part from a locale."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "locale {String} locale to be used",
            "paramName": "locale",
            "description": " locale to be used",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} language",
            "type": "String",
            "desc": " language"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyLocale": {
      "location": {
        "start": {
          "line": 292,
          "column": 4
        },
        "end": {
          "line": 302,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "addTranslation": {
      "location": {
        "start": {
          "line": 317,
          "column": 4
        },
        "end": {
          "line": 330,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a translation to the translation manager.\n\nIf <code>languageCode</code> already exists, its map will be updated with\n<code>translationMap</code> (new keys will be added, existing keys will be\noverwritten)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "languageCode {String} language code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>",
            "paramName": "languageCode",
            "description": " language code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "translationMap {Map} mapping of message identifiers to message strings in the target\nlanguage, e.g. <i>{\"greeting_short\" : \"Hello\"}</i>. Plural forms\nare separate keys.",
            "paramName": "translationMap",
            "description": " mapping of message identifiers to message strings in the target\nlanguage, e.g. <i>{\"greeting_short\" : \"Hello\"}</i>. Plural forms\nare separate keys.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addLocale": {
      "location": {
        "start": {
          "line": 343,
          "column": 4
        },
        "end": {
          "line": 356,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a localization to the localization manager.\n\nIf <code>localeCode</code> already exists, its map will be updated with\n<code>localeMap</code> (new keys will be added, existing keys will be overwritten)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "localeCode {String} locale code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>",
            "paramName": "localeCode",
            "description": " locale code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "localeMap {Map} mapping of locale keys to the target locale values, e.g.\n<i>{\"cldr_date_format_short\" : \"M/d/yy\"}</i>.",
            "paramName": "localeMap",
            "description": " mapping of locale keys to the target locale values, e.g.\n<i>{\"cldr_date_format_short\" : \"M/d/yy\"}</i>.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "translate": {
      "location": {
        "start": {
          "line": 372,
          "column": 4
        },
        "end": {
          "line": 376,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Translate a message using the current locale and apply format string to the arguments.\n\nImplements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\ndefault locale (e.g. C). Localizes the arguments if possible and splices\nthem into the message. If qx.dynlocale is on, returns a {@link\nLocalizedString}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Object[]} array of objects, which are inserted into the format string",
            "paramName": "args",
            "description": " array of objects, which are inserted into the format string",
            "type": "Object[]"
          },
          {
            "name": "@param",
            "body": "locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}",
            "paramName": "locale",
            "description": " locale to be used; if not given, defaults to the value of {@link #locale}",
            "optional": true,
            "defaultValue": "#locale",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} translated message or localized string",
            "type": "String | LocalizedString",
            "desc": " translated message or localized string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "localize": {
      "location": {
        "start": {
          "line": 391,
          "column": 4
        },
        "end": {
          "line": 395,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Provide localization (CLDR) data.\n\nImplements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\ndefault locale (e.g. C). Localizes the arguments if possible and splices\nthem into the message. If qx.dynlocale is on, returns a {@link\nLocalizedString}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Object[]} array of objects, which are inserted into the format string",
            "paramName": "args",
            "description": " array of objects, which are inserted into the format string",
            "type": "Object[]"
          },
          {
            "name": "@param",
            "body": "locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}",
            "paramName": "locale",
            "description": " locale to be used; if not given, defaults to the value of {@link #locale}",
            "optional": true,
            "defaultValue": "#locale",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} translated message or localized string",
            "type": "String | LocalizedString",
            "desc": " translated message or localized string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__lookupAndExpand": {
      "location": {
        "start": {
          "line": 412,
          "column": 4
        },
        "end": {
          "line": 473,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Look up an I18N key in a catalog and expand format strings.\n\nImplements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\ndefault locale (e.g. C). Localizes the arguments if possible and splices\nthem into the message. If qx.dynlocale is on, returns a {@link\nLocalizedString}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "catalog {Map} map of I18N keys and their values",
            "paramName": "catalog",
            "description": " map of I18N keys and their values",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Object[]} array of objects, which are inserted into the format string",
            "paramName": "args",
            "description": " array of objects, which are inserted into the format string",
            "type": "Object[]"
          },
          {
            "name": "@param",
            "body": "locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}",
            "paramName": "locale",
            "description": " locale to be used; if not given, defaults to the value of {@link #locale}",
            "optional": true,
            "defaultValue": "#locale",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} translated message or localized string",
            "type": "String | LocalizedString",
            "desc": " translated message or localized string"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getLocale": {
      "type": "function",
      "name": "getLocale",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setLocale": {
      "type": "function",
      "name": "setLocale",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetLocale": {
      "type": "function",
      "name": "resetLocale",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "descendants": []
}