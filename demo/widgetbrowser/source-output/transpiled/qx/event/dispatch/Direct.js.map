{
  "version": 3,
  "sources": [
    "Direct.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "event",
    "IEventDispatcher",
    "construct",
    "manager",
    "_manager",
    "statics",
    "PRIORITY",
    "Registration",
    "PRIORITY_LAST",
    "members",
    "canDispatchEvent",
    "target",
    "type",
    "getBubbles",
    "dispatchEvent",
    "expectedEventClassName",
    "getEventType",
    "constructor",
    "expectedEventClass",
    "getByName",
    "error",
    "classname",
    "setEventPhase",
    "Event",
    "AT_TARGET",
    "listeners",
    "getListeners",
    "i",
    "l",
    "length",
    "isBlacklisted",
    "unique",
    "context",
    "isDisposed",
    "isDisposing",
    "warn",
    "promise",
    "handler",
    "call",
    "Promise",
    "addPromise",
    "defer",
    "addDispatcher",
    "dispatch",
    "Direct"
  ],
  "mappings": "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",
  "file": "Direct.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Dispatches events directly on the event target (no bubbling nor capturing).\n */\nqx.Class.define(\"qx.event.dispatch.Direct\",\n{\n  extend : qx.core.Object,\n  implement : qx.event.IEventDispatcher,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n\n  /**\n   * Create a new instance\n   *\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   */\n  construct : function(manager) {\n    this._manager = manager;\n  },\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Integer} Priority of this dispatcher */\n    PRIORITY : qx.event.Registration.PRIORITY_LAST\n  },\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      EVENT DISPATCHER INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // interface implementation\n    canDispatchEvent : function(target, event, type) {\n      return !event.getBubbles();\n    },\n\n\n    // interface implementation\n    dispatchEvent : function(target, event, type)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (target instanceof qx.core.Object)\n        {\n          var expectedEventClassName = qx.Class.getEventType(target.constructor, type);\n          var expectedEventClass = qx.Class.getByName(expectedEventClassName);\n          if (!expectedEventClass)\n          {\n            this.error(\n              \"The event type '\" + type + \"' declared in the class '\" +\n              target.constructor + \" is not an available class': \" +\n              expectedEventClassName\n            );\n          }\n          else if (!(event instanceof expectedEventClass))\n          {\n            this.error(\n              \"Expected event type to be instanceof '\" + expectedEventClassName +\n              \"' but found '\" + event.classname + \"'\"\n            );\n          }\n        }\n      }\n\n      event.setEventPhase(qx.event.type.Event.AT_TARGET);\n\n      var listeners = this._manager.getListeners(target, type, false);\n      if (listeners)\n      {\n        for (var i=0, l=listeners.length; i<l; i++)\n        {\n          if (this._manager.isBlacklisted(listeners[i].unique)) {\n            continue;\n          }\n          var context = listeners[i].context || target;\n\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            // warn if the context is disposed\n            if (context && context.isDisposed && context.isDisposed() && !context.isDisposing()) {\n              this.warn(\n                \"The context object '\" + context + \"' for the event '\" +\n                type + \"' of '\" + target + \"'is already disposed.\"\n              );\n            }\n          }\n          var promise = listeners[i].handler.call(context, event);\n          if (qx.core.Environment.get(\"qx.promise\")) {\n            if (promise instanceof qx.Promise) {\n            \tevent.addPromise(promise);\n            }\n          }\n        }\n      }\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer : function(statics) {\n    qx.event.Registration.addDispatcher(statics);\n  }\n});\n"
  ]
}