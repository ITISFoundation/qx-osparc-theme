{
  "className": "qx.ui.window.Desktop",
  "packageName": "qx.ui.window",
  "name": "Desktop",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [
    "qx.ui.window.IDesktop"
  ],
  "mixins": [
    "qx.ui.core.MChildrenHandling",
    "qx.ui.window.MDesktop",
    "qx.ui.core.MBlocker"
  ],
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0
      },
      "end": {
        "line": 51,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The desktop is a widget, which can act as container for windows. It can be\nused to define a clipping region for internal windows e.g. to create\nan MDI like application."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 40,
        "column": 2
      },
      "end": {
        "line": 50,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "windowManager {IWindowManager} The window manager to use for the desktop.\nIf not provided, an instance of {@link qx.ui.window.Window#DEFAULT_MANAGER_CLASS} is used.",
          "paramName": "windowManager",
          "description": " The window manager to use for the desktop.\nIf not provided, an instance of {@link qx.ui.window.Window#DEFAULT_MANAGER_CLASS} is used.",
          "type": "qx.ui.window.IWindowManager"
        }
      ]
    }
  },
  "members": {
    "setWindowManager": {
      "type": "function",
      "name": "setWindowManager",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.window.IDesktop",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the desktop's window manager"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "manager {qx.ui.window.IWindowManager} The window manager",
            "paramName": "manager",
            "description": " The window manager",
            "type": "qx.ui.window.IWindowManager"
          }
        ]
      }
    },
    "getWindows": {
      "type": "function",
      "name": "getWindows",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.window.IDesktop",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get a list of all windows added to the desktop (including hidden windows)"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.window.Window[]} Array of managed windows",
            "type": "qx.ui.window.Window[]",
            "desc": " Array of managed windows"
          }
        ]
      }
    },
    "supportsMaximize": {
      "type": "function",
      "name": "supportsMaximize",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.window.IDesktop",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the configured layout supports a maximized window\ne.g. is a Canvas."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the layout supports maximized windows",
            "type": "Boolean",
            "desc": " Whether the layout supports maximized windows"
          }
        ]
      }
    },
    "blockContent": {
      "type": "function",
      "name": "blockContent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.window.IDesktop",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Block direct child widgets with a zIndex below <code>zIndex</code>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "zIndex {Integer} All child widgets with a zIndex below this value\nwill be blocked",
            "paramName": "zIndex",
            "description": " All child widgets with a zIndex below this value\nwill be blocked",
            "type": "Integer"
          }
        ]
      }
    },
    "unblock": {
      "type": "function",
      "name": "unblock",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.window.IDesktop"
    },
    "isBlocked": {
      "type": "function",
      "name": "isBlocked",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.window.IDesktop",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget is currently blocked"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the widget is blocked.",
            "type": "Boolean",
            "desc": " whether the widget is blocked."
          }
        ]
      }
    },
    "getChildren": {
      "type": "function",
      "name": "getChildren",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the children list"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{LayoutItem[]} The children array (Arrays are\nreference types, please do not modify them in-place)",
            "type": "LayoutItem[]",
            "desc": " The children array (Arrays are\nreference types, please do not modify them in-place)"
          }
        ]
      }
    },
    "hasChildren": {
      "type": "function",
      "name": "hasChildren",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget contains children."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "Boolean",
            "desc": " Returns <code>true</code> when the widget has children."
          }
        ]
      }
    },
    "indexOf": {
      "type": "function",
      "name": "indexOf",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the index position of the given widget if it is\na child widget. Otherwise it returns <code>-1</code>.\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {Widget} the widget to query for",
            "paramName": "child",
            "description": " the widget to query for",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\nthe given widget is no child of this layout.",
            "type": "Integer",
            "desc": " The index position or <code>-1</code> when\nthe given widget is no child of this layout."
          }
        ]
      }
    },
    "add": {
      "type": "function",
      "name": "add",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds a new child widget.\n\nThe supported keys of the layout options map depend on the layout manager\nused to position the widget. The options are documented in the class\ndocumentation of each layout manager {@link qx.ui.layout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the widget to add.",
            "paramName": "child",
            "description": " the widget to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "addAt": {
      "type": "function",
      "name": "addAt",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a child widget at the specified index\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted",
            "paramName": "index",
            "description": " Index, at which the widget will be inserted",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "addBefore": {
      "type": "function",
      "name": "addBefore",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a widget before another already inserted widget\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {LayoutItem} Widget before the new widget will be inserted.",
            "paramName": "before",
            "description": " Widget before the new widget will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "addAfter": {
      "type": "function",
      "name": "addAfter",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a widget after another already inserted widget\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {LayoutItem} Widget, after which the new widget will be inserted",
            "paramName": "after",
            "description": " Widget, after which the new widget will be inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "remove": {
      "type": "function",
      "name": "remove",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the given child widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the widget to remove",
            "paramName": "child",
            "description": " the widget to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      }
    },
    "removeAt": {
      "type": "function",
      "name": "removeAt",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the widget at the specified index.\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove.",
            "paramName": "index",
            "description": " Index of the widget to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{LayoutItem} The child removed.",
            "type": "qx.ui.core.LayoutItem",
            "desc": " The child removed."
          }
        ]
      }
    },
    "removeAll": {
      "type": "function",
      "name": "removeAll",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove all children."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of the removed children.",
            "type": "Array",
            "desc": " An array of the removed children."
          }
        ]
      }
    },
    "getWindowManager": {
      "type": "function",
      "name": "getWindowManager",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.window.MDesktop",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the desktop's window manager. Each desktop must have a window manager.\nIf none is configured the default window manager {@link qx.ui.window.Window#DEFAULT_MANAGER_CLASS}\nis used."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.window.IWindowManager} The desktop's window manager",
            "type": "qx.ui.window.IWindowManager",
            "desc": " The desktop's window manager"
          }
        ]
      }
    },
    "_onChangeActive": {
      "type": "function",
      "name": "_onChangeActive",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.window.MDesktop",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called if one of the managed windows changes its active\nstate."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} the event object.",
            "paramName": "e",
            "description": " the event object.",
            "type": "qx.event.type.Event"
          }
        ]
      }
    },
    "_applyActiveWindow": {
      "type": "function",
      "name": "_applyActiveWindow",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.window.MDesktop"
    },
    "_onChangeModal": {
      "type": "function",
      "name": "_onChangeModal",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.window.MDesktop",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called if one of the managed windows changes its modality"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} the event object.",
            "paramName": "e",
            "description": " the event object.",
            "type": "qx.event.type.Event"
          }
        ]
      }
    },
    "_onChangeVisibility": {
      "type": "function",
      "name": "_onChangeVisibility",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.window.MDesktop"
    },
    "_afterAddChild": {
      "type": "function",
      "name": "_afterAddChild",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.window.MDesktop",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Overrides the method {@link qx.ui.core.Widget#_afterAddChild}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {qx.ui.core.Widget} added widget",
            "paramName": "win",
            "description": " added widget",
            "type": "qx.ui.core.Widget"
          }
        ]
      }
    },
    "_addWindow": {
      "type": "function",
      "name": "_addWindow",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.window.MDesktop",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handles the case, when a window is added to the desktop."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {qx.ui.window.Window} Window, which has been added",
            "paramName": "win",
            "description": " Window, which has been added",
            "type": "qx.ui.window.Window"
          }
        ]
      }
    },
    "_afterRemoveChild": {
      "type": "function",
      "name": "_afterRemoveChild",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.window.MDesktop",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Overrides the method {@link qx.ui.core.Widget#_afterRemoveChild}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {qx.ui.core.Widget} removed widget",
            "paramName": "win",
            "description": " removed widget",
            "type": "qx.ui.core.Widget"
          }
        ]
      }
    },
    "_removeWindow": {
      "type": "function",
      "name": "_removeWindow",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.window.MDesktop",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handles the case, when a window is removed from the desktop."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {qx.ui.window.Window} Window, which has been removed",
            "paramName": "win",
            "description": " Window, which has been removed",
            "type": "qx.ui.window.Window"
          }
        ]
      }
    },
    "getActiveWindow": {
      "type": "function",
      "name": "getActiveWindow",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.window.MDesktop",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.window.Window",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setActiveWindow": {
      "type": "function",
      "name": "setActiveWindow",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.window.MDesktop",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.window.Window",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetActiveWindow": {
      "type": "function",
      "name": "resetActiveWindow",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.window.MDesktop"
    },
    "_createBlocker": {
      "type": "function",
      "name": "_createBlocker",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MBlocker",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Template method for creating the blocker item."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Blocker} The blocker to use.",
            "type": "qx.ui.core.Blocker",
            "desc": " The blocker to use."
          }
        ]
      }
    },
    "_applyBlockerColor": {
      "type": "function",
      "name": "_applyBlockerColor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MBlocker"
    },
    "_applyBlockerOpacity": {
      "type": "function",
      "name": "_applyBlockerOpacity",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MBlocker"
    },
    "block": {
      "type": "function",
      "name": "block",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MBlocker"
    },
    "forceUnblock": {
      "type": "function",
      "name": "forceUnblock",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MBlocker"
    },
    "getBlocker": {
      "type": "function",
      "name": "getBlocker",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MBlocker",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the blocker"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Blocker} The blocker",
            "type": "qx.ui.core.Blocker",
            "desc": " The blocker"
          }
        ]
      }
    },
    "getBlockerColor": {
      "type": "function",
      "name": "getBlockerColor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MBlocker",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Color",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setBlockerColor": {
      "type": "function",
      "name": "setBlockerColor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MBlocker",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Color",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetBlockerColor": {
      "type": "function",
      "name": "resetBlockerColor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MBlocker"
    },
    "getBlockerOpacity": {
      "type": "function",
      "name": "getBlockerOpacity",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MBlocker",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setBlockerOpacity": {
      "type": "function",
      "name": "setBlockerOpacity",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MBlocker",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetBlockerOpacity": {
      "type": "function",
      "name": "resetBlockerOpacity",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MBlocker"
    }
  },
  "descendants": []
}