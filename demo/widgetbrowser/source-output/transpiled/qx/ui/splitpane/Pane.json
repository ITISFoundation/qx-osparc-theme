{
  "className": "qx.ui.splitpane.Pane",
  "packageName": "qx.ui.splitpane",
  "name": "Pane",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 27,
        "column": 0
      },
      "end": {
        "line": 631,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nJonathan Wei√ü (jonathan_rass)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "A split panes divides an area into two panes. The ratio between the two\npanes is configurable by the user using the splitter."
        }
      ],
      "@childControl": [
        {
          "name": "@childControl",
          "body": "slider {qx.ui.splitpane.Slider} shown during resizing the splitpane"
        },
        {
          "name": "@childControl",
          "body": "splitter {qx.ui.splitpane.Splitter} splitter to resize the splitpane"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 47,
        "column": 2
      },
      "end": {
        "line": 66,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": "Creates a new instance of a SplitPane. It allows the user to dynamically\nresize the areas dropping the border between."
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "orientation {String} The orientation of the split pane control.\nAllowed values are \"horizontal\" (default) and \"vertical\".",
          "paramName": "orientation",
          "description": " The orientation of the split pane control.\nAllowed values are \"horizontal\" (default) and \"vertical\".",
          "type": "String"
        }
      ]
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 80,
          "column": 4
        },
        "end": {
          "line": 84,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "defaultValue": "splitpane",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "offset": {
      "location": {
        "start": {
          "line": 90,
          "column": 4
        },
        "end": {
          "line": 95,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Distance between pointer and splitter when the cursor should change\nand enable resizing."
          }
        ]
      },
      "name": "offset",
      "propertyType": "new",
      "apply": "_applyOffset",
      "check": "Integer",
      "defaultValue": 6
    },
    "orientation": {
      "location": {
        "start": {
          "line": 100,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The orientation of the splitpane control."
          }
        ]
      },
      "name": "orientation",
      "propertyType": "new",
      "apply": "_applyOrientation",
      "possibleValues": [
        "horizontal",
        "vertical"
      ],
      "defaultValue": "horizontal"
    }
  },
  "members": {
    "__splitterOffset": {
      "location": {
        "start": {
          "line": 120,
          "column": 4
        },
        "end": {
          "line": 120,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__activeDragSession": {
      "location": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 121,
          "column": 31
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastPointerX": {
      "location": {
        "start": {
          "line": 122,
          "column": 4
        },
        "end": {
          "line": 122,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastPointerY": {
      "location": {
        "start": {
          "line": 123,
          "column": 4
        },
        "end": {
          "line": 123,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__isHorizontal": {
      "location": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 124,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__beginSize": {
      "location": {
        "start": {
          "line": 125,
          "column": 4
        },
        "end": {
          "line": 125,
          "column": 22
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__endSize": {
      "location": {
        "start": {
          "line": 126,
          "column": 4
        },
        "end": {
          "line": 126,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__children": {
      "location": {
        "start": {
          "line": 127,
          "column": 4
        },
        "end": {
          "line": 127,
          "column": 21
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__blocker": {
      "location": {
        "start": {
          "line": 128,
          "column": 4
        },
        "end": {
          "line": 128,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_createChildControlImpl": {
      "location": {
        "start": {
          "line": 132,
          "column": 4
        },
        "end": {
          "line": 154,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "paramName": "id",
            "description": " ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "hash {String?undefined} If a child control name contains a #,\nall text following the # will be the hash argument.",
            "paramName": "hash",
            "description": " If a child control name contains a #,\nall text following the # will be the hash argument.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The created control or <code>null</code>",
            "type": "qx.ui.core.Widget",
            "desc": " The created control or <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "__onSplitterMove": {
      "location": {
        "start": {
          "line": 163,
          "column": 4
        },
        "end": {
          "line": 165,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Move handler for the splitter which takes care of the external\ntriggered resize of children."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The data even of move.",
            "paramName": "e",
            "description": " The data even of move.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__createBlocker": {
      "location": {
        "start": {
          "line": 174,
          "column": 4
        },
        "end": {
          "line": 196,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates a blocker for the splitter which takes all bouse events and\nalso handles the offset and cursor."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "orientation {String} The orientation of the pane.",
            "paramName": "orientation",
            "description": " The orientation of the pane.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getBlocker": {
      "location": {
        "start": {
          "line": 207,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the blocker used over the splitter. this could be used for\nadding event listeners like tap or dbltap."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.splitpane.Blocker} The used blocker element.",
            "type": "qx.ui.splitpane.Blocker",
            "desc": " The used blocker element."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyOrientation": {
      "location": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 264,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPROPERTY APPLY METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Apply routine for the orientation property.\n\nSets the pane's layout to vertical or horizontal split layout."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} The new value of the orientation property",
            "paramName": "value",
            "description": " The new value of the orientation property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "old {String} The old value of the orientation property",
            "paramName": "old",
            "description": " The old value of the orientation property",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyOffset": {
      "location": {
        "start": {
          "line": 268,
          "column": 4
        },
        "end": {
          "line": 270,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__setBlockerPosition": {
      "location": {
        "start": {
          "line": 280,
          "column": 4
        },
        "end": {
          "line": 329,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper for setting the blocker to the right position, which depends on\nthe offset, orientation and the current position of the splitter."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "bounds {Map?null} If the bounds of the splitter are known,\nthey can be added.",
            "paramName": "bounds",
            "description": " If the bounds of the splitter are known,\nthey can be added.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "add": {
      "location": {
        "start": {
          "line": 349,
          "column": 4
        },
        "end": {
          "line": 357,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPUBLIC METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Adds a widget to the pane.\n\nSets the pane's layout to vertical or horizontal split layout. Depending on the\npane's layout the first widget will be the left or top widget, the second one\nthe bottom or right widget. Adding more than two widgets will overwrite the\nexisting ones."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to be inserted into pane.",
            "paramName": "widget",
            "description": " The widget to be inserted into pane.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "flex {Number} The (optional) layout property for the widget's flex value.",
            "paramName": "flex",
            "description": " The (optional) layout property for the widget's flex value.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 365,
          "column": 4
        },
        "end": {
          "line": 369,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the given widget from the pane."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to be removed.",
            "paramName": "widget",
            "description": " The widget to be removed.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getChildren": {
      "location": {
        "start": {
          "line": 377,
          "column": 4
        },
        "end": {
          "line": 379,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns an array containing the pane's content."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} The pane's child widgets",
            "type": "qx.ui.core.Widget[]",
            "desc": " The pane's child widgets"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onPointerDown": {
      "location": {
        "start": {
          "line": 395,
          "column": 4
        },
        "end": {
          "line": 427,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPOINTER LISTENERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Handler for pointerdown event.\n\nShows slider widget and starts drag session if pointer is near/on splitter widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointerdown event",
            "paramName": "e",
            "description": " pointerdown event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerMove": {
      "location": {
        "start": {
          "line": 435,
          "column": 4
        },
        "end": {
          "line": 459,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handler for pointermove event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointermove event",
            "paramName": "e",
            "description": " pointermove event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerOut": {
      "location": {
        "start": {
          "line": 467,
          "column": 4
        },
        "end": {
          "line": 470,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handler for pointerout event"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointerout event",
            "paramName": "e",
            "description": " pointerout event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerUp": {
      "location": {
        "start": {
          "line": 480,
          "column": 4
        },
        "end": {
          "line": 498,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handler for pointerup event\n\nSets widget sizes if dragging session has been active."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointerup event",
            "paramName": "e",
            "description": " pointerup event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_finalizeSizes": {
      "location": {
        "start": {
          "line": 510,
          "column": 4
        },
        "end": {
          "line": 549,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nINTERVAL HANDLING\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Updates widgets' sizes based on the slider position."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__computeSizes": {
      "location": {
        "start": {
          "line": 555,
          "column": 4
        },
        "end": {
          "line": 601,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes widgets' sizes based on the pointer coordinate."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_isActiveDragSession": {
      "location": {
        "start": {
          "line": 609,
          "column": 4
        },
        "end": {
          "line": 611,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determines whether this is an active drag session"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} True if active drag session, otherwise false.",
            "type": "Boolean",
            "desc": " True if active drag session, otherwise false."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setLastPointerPosition": {
      "location": {
        "start": {
          "line": 620,
          "column": 5
        },
        "end": {
          "line": 624,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the last pointer position."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "x {Integer} the x position of the pointer.",
            "paramName": "x",
            "description": " the x position of the pointer.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "y {Integer} the y position of the pointer.",
            "paramName": "y",
            "description": " the y position of the pointer.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getOffset": {
      "type": "function",
      "name": "getOffset",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOffset": {
      "type": "function",
      "name": "setOffset",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOffset": {
      "type": "function",
      "name": "resetOffset",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getOrientation": {
      "type": "function",
      "name": "getOrientation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setOrientation": {
      "type": "function",
      "name": "setOrientation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetOrientation": {
      "type": "function",
      "name": "resetOrientation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 628,
        "column": 2
      },
      "end": {
        "line": 630,
        "column": 3
      }
    }
  },
  "descendants": []
}