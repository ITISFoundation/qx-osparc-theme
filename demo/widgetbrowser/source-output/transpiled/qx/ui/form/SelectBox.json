{
  "className": "qx.ui.form.SelectBox",
  "packageName": "qx.ui.form",
  "name": "SelectBox",
  "superClass": "qx.ui.form.AbstractSelectBox",
  "interfaces": [
    "qx.ui.core.ISingleSelection",
    "qx.ui.form.IModelSelection",
    "qx.ui.form.IField"
  ],
  "mixins": [
    "qx.ui.core.MSingleSelectionHandling",
    "qx.ui.form.MModelSelection"
  ],
  "clazz": {
    "location": {
      "start": {
        "line": 45,
        "column": 0
      },
      "end": {
        "line": 449,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nMartin Wittemann (martinwittemann)\nSebastian Werner (wpbasti)\nJonathan Wei√ü (jonathan_rass)\nChristian Hagendorn (chris_schmidt)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "A form widget which allows a single selection. Looks somewhat like\na normal button, but opens a list of items to select when tapping on it.\n\nKeep in mind that the SelectBox widget has always a selected item (due to the\nsingle selection mode). Right after adding the first item a <code>changeSelection</code>\nevent is fired.\n\n<pre class='javascript'>\nvar selectBox = new qx.ui.form.SelectBox();\n\nselectBox.addListener(\"changeSelection\", function(e) {\n// ...\n});\n\n// now the 'changeSelection' event is fired\nselectBox.add(new qx.ui.form.ListItem(\"Item 1\"));\n</pre>"
        }
      ],
      "@childControl": [
        {
          "name": "@childControl",
          "body": "spacer {qx.ui.core.Spacer} flexible spacer widget"
        },
        {
          "name": "@childControl",
          "body": "atom {qx.ui.basic.Atom} shows the text and icon of the content"
        },
        {
          "name": "@childControl",
          "body": "arrow {qx.ui.basic.Image} shows the arrow to open the popup"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 63,
        "column": 2
      },
      "end": {
        "line": 78,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 91,
          "column": 4
        },
        "end": {
          "line": 95,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "defaultValue": "selectbox",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "valid": {
      "type": "property",
      "name": "valid",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm"
    },
    "required": {
      "type": "property",
      "name": "required",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm"
    },
    "invalidMessage": {
      "type": "property",
      "name": "invalidMessage",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm"
    },
    "requiredInvalidMessage": {
      "type": "property",
      "name": "requiredInvalidMessage",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.MForm"
    }
  },
  "members": {
    "__preSelectedItem": {
      "location": {
        "start": {
          "line": 109,
          "column": 4
        },
        "end": {
          "line": 109,
          "column": 28
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.form.ListItem} instance"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_createChildControlImpl": {
      "location": {
        "start": {
          "line": 119,
          "column": 4
        },
        "end": {
          "line": 147,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nWIDGET API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "paramName": "id",
            "description": " ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "hash {String?undefined} If a child control name contains a #,\nall text following the # will be the hash argument.",
            "paramName": "hash",
            "description": " If a child control name contains a #,\nall text following the # will be the hash argument.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The created control or <code>null</code>",
            "type": "qx.ui.core.Widget",
            "desc": " The created control or <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.form.AbstractSelectBox",
      "appearsIn": [
        "qx.ui.form.AbstractSelectBox",
        "qx.ui.core.Widget"
      ]
    },
    "_forwardStates": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 155,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_forwardStates)"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_getItems": {
      "location": {
        "start": {
          "line": 170,
          "column": 4
        },
        "end": {
          "line": 172,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nHELPER METHODS FOR SELECTION API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns the list items for the selection."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.ListItem[]} List items to select.",
            "type": "qx.ui.form.ListItem[]",
            "desc": " List items to select."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isAllowEmptySelection": {
      "location": {
        "start": {
          "line": 180,
          "column": 4
        },
        "end": {
          "line": 182,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns if the selection could be empty or not."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> If selection could be empty,\n<code>false</code> otherwise.",
            "type": "Boolean",
            "desc": " <code>true</code> If selection could be empty,\n<code>false</code> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__onChangeSelection": {
      "location": {
        "start": {
          "line": 189,
          "column": 4
        },
        "end": {
          "line": 204,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for <code>changeSelection</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event.",
            "paramName": "e",
            "description": " Data event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__updateIcon": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 216,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the icon inside the list to match the selected ListItem."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__updateLabel": {
      "location": {
        "start": {
          "line": 221,
          "column": 4
        },
        "end": {
          "line": 236,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the label inside the list to match the selected ListItem."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_onPointerOver": {
      "location": {
        "start": {
          "line": 255,
          "column": 4
        },
        "end": {
          "line": 268,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT LISTENERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Listener method for \"pointerover\" event\n<ul>\n<li>Adds state \"hovered\"</li>\n<li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerOut": {
      "location": {
        "start": {
          "line": 280,
          "column": 4
        },
        "end": {
          "line": 293,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener method for \"pointerout\" event\n<ul>\n<li>Removes \"hovered\" state</li>\n<li>Adds \"abandoned\" and removes \"pressed\" state (if \"pressed\" state is set)</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTap": {
      "location": {
        "start": {
          "line": 301,
          "column": 4
        },
        "end": {
          "line": 303,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Toggles the popup's visibility."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onKeyPress": {
      "location": {
        "start": {
          "line": 307,
          "column": 4
        },
        "end": {
          "line": 325,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeySequence} Keypress event",
            "paramName": "e",
            "description": " Keypress event",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.form.AbstractSelectBox",
      "appearsIn": [
        "qx.ui.form.AbstractSelectBox"
      ]
    },
    "_onKeyInput": {
      "location": {
        "start": {
          "line": 332,
          "column": 4
        },
        "end": {
          "line": 341,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Forwards key event to list widget."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeyInput} Key event",
            "paramName": "e",
            "description": " Key event",
            "type": "qx.event.type.KeyInput"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onListPointerDown": {
      "location": {
        "start": {
          "line": 345,
          "column": 4
        },
        "end": {
          "line": 353,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer Event",
            "paramName": "e",
            "description": " Pointer Event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.form.AbstractSelectBox",
      "appearsIn": [
        "qx.ui.form.AbstractSelectBox"
      ]
    },
    "_onListChangeSelection": {
      "location": {
        "start": {
          "line": 357,
          "column": 4
        },
        "end": {
          "line": 396,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data Event",
            "paramName": "e",
            "description": " Data Event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.form.AbstractSelectBox",
      "appearsIn": [
        "qx.ui.form.AbstractSelectBox"
      ]
    },
    "_onPopupChangeVisibility": {
      "location": {
        "start": {
          "line": 399,
          "column": 4
        },
        "end": {
          "line": 434,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Property change event",
            "paramName": "e",
            "description": " Property change event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.form.AbstractSelectBox",
      "appearsIn": [
        "qx.ui.form.AbstractSelectBox"
      ]
    },
    "getSelection": {
      "type": "function",
      "name": "getSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns an array of currently selected items.\n\nNote: The result is only a set of selected items, so the order can\ndiffer from the sequence in which the items were added."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} List of items.",
            "type": "qx.ui.core.Widget[]",
            "desc": " List of items."
          }
        ]
      }
    },
    "setSelection": {
      "type": "function",
      "name": "setSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Replaces current selection with the given items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "items {qx.ui.core.Widget[]} Items to select.",
            "paramName": "items",
            "description": " Items to select.",
            "type": "qx.ui.core.Widget[]"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the item is not a child element."
          }
        ]
      }
    },
    "resetSelection": {
      "type": "function",
      "name": "resetSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection"
    },
    "isSelected": {
      "type": "function",
      "name": "isSelected",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Detects whether the given item is currently selected."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Any valid selectable item",
            "paramName": "item",
            "description": " Any valid selectable item",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the item is selected.",
            "type": "Boolean",
            "desc": " Whether the item is selected."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the item is not a child element."
          }
        ]
      }
    },
    "isSelectionEmpty": {
      "type": "function",
      "name": "isSelectionEmpty",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the selection is empty."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the selection is empty.",
            "type": "Boolean",
            "desc": " Whether the selection is empty."
          }
        ]
      }
    },
    "getSelectables": {
      "type": "function",
      "name": "getSelectables",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns all elements which are selectable."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "all {Boolean} true for all selectables, false for the\nselectables the user can interactively select",
            "paramName": "all",
            "description": " true for all selectables, false for the\nselectables the user can interactively select",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} The contained items.",
            "type": "qx.ui.core.Widget[]",
            "desc": " The contained items."
          }
        ]
      }
    },
    "setModelSelection": {
      "type": "function",
      "name": "setModelSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IModelSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Tries to set the selection using the given array containing the\nrepresentative models for the selectables."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Array} An array of models.",
            "paramName": "value",
            "description": " An array of models.",
            "type": "Array"
          }
        ]
      }
    },
    "getModelSelection": {
      "type": "function",
      "name": "getModelSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IModelSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns an array of the selected models."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the models of the currently selected\nitems.",
            "type": "Array",
            "desc": " An array containing the models of the currently selected\nitems."
          }
        ]
      }
    },
    "setValue": {
      "type": "function",
      "name": "setValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IField",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nVALUE PROPERTY\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Sets the field model value. Should also update the UI."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var|null} Updates the field with the new model value.",
            "paramName": "value",
            "description": " Updates the field with the new model value.",
            "type": [
              "var",
              "null"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|Error} Should return an error when the type of\nmodel value is not compatible with the implementing class (the concrete field).",
            "type": "null|Error",
            "desc": " Should return an error when the type of\nmodel value is not compatible with the implementing class (the concrete field)."
          }
        ]
      }
    },
    "resetValue": {
      "type": "function",
      "name": "resetValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IField"
    },
    "getValue": {
      "type": "function",
      "name": "getValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IField",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a consistent and up-to-date model value.\n\nNote: returned value can also be a promise of type <code>Promise&lt;*|null&gt;</code>."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var|null} The model value plain or as promise.",
            "type": "var|null",
            "desc": " The model value plain or as promise."
          }
        ]
      }
    },
    "_onChangeSelected": {
      "type": "function",
      "name": "_onChangeSelected",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MSingleSelectionHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT HANDLER\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Event listener for <code>changeSelected</code> event on single\nselection manager."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event.",
            "paramName": "e",
            "description": " Data event.",
            "type": "qx.event.type.Data"
          }
        ]
      }
    },
    "__getManager": {
      "type": "function",
      "name": "__getManager",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MSingleSelectionHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Return the selection manager if it is already exists, otherwise creates\nthe manager."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.SingleSelectionManager} Single selection manager.",
            "type": "qx.ui.core.SingleSelectionManager",
            "desc": " Single selection manager."
          }
        ]
      }
    },
    "__onModelSelectionChange": {
      "type": "function",
      "name": "__onModelSelectionChange",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.form.MModelSelection"
    },
    "__onModelSelectionArrayChange": {
      "type": "function",
      "name": "__onModelSelectionArrayChange",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.form.MModelSelection"
    },
    "setRequired": {
      "type": "function",
      "name": "setRequired",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getRequired": {
      "type": "function",
      "name": "getRequired",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setValid": {
      "type": "function",
      "name": "setValid",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getValid": {
      "type": "function",
      "name": "getValid",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setInvalidMessage": {
      "type": "function",
      "name": "setInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getInvalidMessage": {
      "type": "function",
      "name": "getInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setRequiredInvalidMessage": {
      "type": "function",
      "name": "setRequiredInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getRequiredInvalidMessage": {
      "type": "function",
      "name": "getRequiredInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "__forward": {
      "type": "function",
      "name": "__forward",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Forward the call with the given function name to the children container"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "functionName {String} name of the method to forward",
            "paramName": "functionName",
            "description": " name of the method to forward",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "a1 {var} first argument of the method to call",
            "paramName": "a1",
            "description": " first argument of the method to call",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "a2 {var} second argument of the method to call",
            "paramName": "a2",
            "description": " second argument of the method to call",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "a3 {var} third argument of the method to call",
            "paramName": "a3",
            "description": " third argument of the method to call",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The return value of the forward method",
            "type": "var",
            "desc": " The return value of the forward method"
          }
        ]
      }
    },
    "getChildren": {
      "type": "function",
      "name": "getChildren",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the children list"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{LayoutItem[]} The children array (Arrays are\nreference types, please do not modify them in-place)",
            "type": "LayoutItem[]",
            "desc": " The children array (Arrays are\nreference types, please do not modify them in-place)"
          }
        ]
      }
    },
    "hasChildren": {
      "type": "function",
      "name": "hasChildren",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget contains children."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "Boolean",
            "desc": " Returns <code>true</code> when the widget has children."
          }
        ]
      }
    },
    "add": {
      "type": "function",
      "name": "add",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds a new child widget.\n\nThe supported keys of the layout options map depend on the layout manager\nused to position the widget. The options are documented in the class\ndocumentation of each layout manager {@link qx.ui.layout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the item to add.",
            "paramName": "child",
            "description": " the item to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Widget} This object (for chaining support)",
            "type": "qx.ui.core.Widget",
            "desc": " This object (for chaining support)"
          }
        ]
      }
    },
    "remove": {
      "type": "function",
      "name": "remove",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the given child item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the item to remove",
            "paramName": "child",
            "description": " the item to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Widget} This object (for chaining support)",
            "type": "qx.ui.core.Widget",
            "desc": " This object (for chaining support)"
          }
        ]
      }
    },
    "removeAll": {
      "type": "function",
      "name": "removeAll",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove all children."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the removed children.",
            "type": "Array",
            "desc": " An array containing the removed children."
          }
        ]
      }
    },
    "indexOf": {
      "type": "function",
      "name": "indexOf",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the index position of the given item if it is\na child item. Otherwise it returns <code>-1</code>.\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} the item to query for",
            "paramName": "child",
            "description": " the item to query for",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\nthe given item is no child of this layout.",
            "type": "Integer",
            "desc": " The index position or <code>-1</code> when\nthe given item is no child of this layout."
          }
        ]
      }
    },
    "addAt": {
      "type": "function",
      "name": "addAt",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add a child at the specified index\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the item will be inserted",
            "paramName": "index",
            "description": " Index, at which the item will be inserted",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "addBefore": {
      "type": "function",
      "name": "addBefore",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add an item before another already inserted item\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {LayoutItem} item before the new item will be inserted.",
            "paramName": "before",
            "description": " item before the new item will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "addAfter": {
      "type": "function",
      "name": "addAfter",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add an item after another already inserted item\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {LayoutItem} item, after which the new item will be inserted",
            "paramName": "after",
            "description": " item, after which the new item will be inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      }
    },
    "removeAt": {
      "type": "function",
      "name": "removeAt",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MRemoteChildrenHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the item at the specified index.\n\nThis method works on the widget's children list. Some layout managers\n(e.g. {@link qx.ui.layout.HBox}) use the children order as additional\nlayout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\nignore the children order for the layout process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the item to remove.",
            "paramName": "index",
            "description": " Index of the item to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The removed item",
            "type": "qx.ui.core.LayoutItem",
            "desc": " The removed item"
          }
        ]
      }
    },
    "_applyValid": {
      "type": "function",
      "name": "_applyValid",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.form.MForm"
    },
    "__onChangeLocale": {
      "type": "function",
      "name": "__onChangeLocale",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.form.MForm",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Locale change event handler"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} the change event",
            "paramName": "e",
            "description": " the change event",
            "type": "Event"
          }
        ]
      }
    },
    "isValid": {
      "type": "function",
      "name": "isValid",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "resetValid": {
      "type": "function",
      "name": "resetValid",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "isRequired": {
      "type": "function",
      "name": "isRequired",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "resetRequired": {
      "type": "function",
      "name": "resetRequired",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "resetInvalidMessage": {
      "type": "function",
      "name": "resetInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "resetRequiredInvalidMessage": {
      "type": "function",
      "name": "resetRequiredInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMaxListHeight": {
      "type": "function",
      "name": "getMaxListHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMaxListHeight": {
      "type": "function",
      "name": "setMaxListHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMaxListHeight": {
      "type": "function",
      "name": "resetMaxListHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getFormat": {
      "type": "function",
      "name": "getFormat",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setFormat": {
      "type": "function",
      "name": "setFormat",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetFormat": {
      "type": "function",
      "name": "resetFormat",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 446,
        "column": 2
      },
      "end": {
        "line": 448,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCT\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}