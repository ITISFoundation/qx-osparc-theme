{
  "className": "qx.ui.form.RadioGroup",
  "packageName": "qx.ui.form",
  "name": "RadioGroup",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.ui.core.ISingleSelection",
    "qx.ui.form.IField",
    "qx.ui.form.IForm",
    "qx.ui.form.IModelSelection"
  ],
  "mixins": [
    "qx.ui.core.MSingleSelectionHandling",
    "qx.ui.form.MModelSelection"
  ],
  "clazz": {
    "location": {
      "start": {
        "line": 34,
        "column": 0
      },
      "end": {
        "line": 540,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nChristian Hagendorn (chris_schmidt)\nMartin Wittemann (martinwittemann)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The radio group handles a collection of items from which only one item\ncan be selected. Selection another item will deselect the previously selected\nitem.\n\nThis class is e.g. used to create radio groups or {@link qx.ui.form.RadioButton}\nor {@link qx.ui.toolbar.RadioButton} instances.\n\nWe also offer a widget for the same purpose which uses this class. So if\nyou like to act with a widget instead of a pure logic coupling of the\nwidgets, take a look at the {@link qx.ui.form.RadioButtonGroup} widget."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 60,
        "column": 2
      },
      "end": {
        "line": 73,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "varargs {qx.core.Object} A variable number of items, which are\ninitially added to the radio group, the first item will be selected.",
          "paramName": "varargs",
          "description": " A variable number of items, which are\ninitially added to the radio group, the first item will be selected.",
          "type": "qx.core.Object"
        }
      ]
    }
  },
  "properties": {
    "groupedProperty": {
      "location": {
        "start": {
          "line": 88,
          "column": 4
        },
        "end": {
          "line": 94,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The property name in each of the added widgets that is grouped"
          }
        ]
      },
      "name": "groupedProperty",
      "propertyType": "new",
      "event": "changeGroupedProperty",
      "apply": "_applyGroupedProperty",
      "check": "String",
      "defaultValue": "value"
    },
    "groupProperty": {
      "location": {
        "start": {
          "line": 100,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The property name in each of the added widgets that is informed of the\nRadioGroup object it is a member of"
          }
        ]
      },
      "name": "groupProperty",
      "propertyType": "new",
      "event": "changeGroupProperty",
      "check": "String",
      "defaultValue": "group"
    },
    "enabled": {
      "location": {
        "start": {
          "line": 110,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the radio group is enabled"
          }
        ]
      },
      "name": "enabled",
      "propertyType": "new",
      "event": "changeEnabled",
      "apply": "_applyEnabled",
      "check": "Boolean",
      "defaultValue": true
    },
    "wrap": {
      "location": {
        "start": {
          "line": 122,
          "column": 4
        },
        "end": {
          "line": 126,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the selection should wrap around. This means that the successor of\nthe last item is the first item."
          }
        ]
      },
      "name": "wrap",
      "propertyType": "new",
      "check": "Boolean",
      "defaultValue": true
    },
    "allowEmptySelection": {
      "location": {
        "start": {
          "line": 132,
          "column": 4
        },
        "end": {
          "line": 137,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "If is set to <code>true</code> the selection could be empty,\notherwise is always one <code>RadioButton</code> selected."
          }
        ]
      },
      "name": "allowEmptySelection",
      "propertyType": "new",
      "apply": "_applyAllowEmptySelection",
      "check": "Boolean",
      "defaultValue": false
    },
    "valid": {
      "location": {
        "start": {
          "line": 143,
          "column": 4
        },
        "end": {
          "line": 148,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Flag signaling if the group at all is valid. All children will have the\nsame state."
          }
        ]
      },
      "name": "valid",
      "propertyType": "new",
      "event": "changeValid",
      "apply": "_applyValid",
      "check": "Boolean",
      "defaultValue": true
    },
    "required": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 157,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Flag signaling if the group is required."
          }
        ]
      },
      "name": "required",
      "propertyType": "new",
      "event": "changeRequired",
      "check": "Boolean",
      "defaultValue": false
    },
    "invalidMessage": {
      "location": {
        "start": {
          "line": 162,
          "column": 4
        },
        "end": {
          "line": 167,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Message which is shown in an invalid tooltip."
          }
        ]
      },
      "name": "invalidMessage",
      "propertyType": "new",
      "event": "changeInvalidMessage",
      "apply": "_applyInvalidMessage",
      "check": "String",
      "defaultValue": ""
    },
    "requiredInvalidMessage": {
      "location": {
        "start": {
          "line": 174,
          "column": 4
        },
        "end": {
          "line": 178,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Message which is shown in an invalid tooltip if the {@link #required} is\nset to true."
          }
        ]
      },
      "name": "requiredInvalidMessage",
      "propertyType": "new",
      "event": "changeInvalidMessage",
      "allowNull": true,
      "check": "String"
    }
  },
  "members": {
    "__items": {
      "location": {
        "start": {
          "line": 192,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.form.IRadioItem[]} The items of the radio group"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "getItems": {
      "location": {
        "start": {
          "line": 207,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nUTILITIES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Get all managed items"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.IRadioItem[]} All managed items.",
            "type": "qx.ui.form.IRadioItem[]",
            "desc": " All managed items."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "add": {
      "location": {
        "start": {
          "line": 224,
          "column": 4
        },
        "end": {
          "line": 259,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nREGISTRY\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Add the passed items to the radio group."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {qx.ui.form.IRadioItem} A variable number of items to add.",
            "paramName": "varargs",
            "description": " A variable number of items to add.",
            "type": "qx.ui.form.IRadioItem"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 266,
          "column": 4
        },
        "end": {
          "line": 291,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove an item from the radio group."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.form.IRadioItem} The item to remove.",
            "paramName": "item",
            "description": " The item to remove.",
            "type": "qx.ui.form.IRadioItem"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getChildren": {
      "location": {
        "start": {
          "line": 299,
          "column": 4
        },
        "end": {
          "line": 302,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns an array containing the group's items."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.IRadioItem[]} The item array",
            "type": "qx.ui.form.IRadioItem[]",
            "desc": " The item array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onItemChangeChecked": {
      "location": {
        "start": {
          "line": 317,
          "column": 4
        },
        "end": {
          "line": 327,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nLISTENER FOR ITEM CHANGES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Event listener for <code>changeValue</code> event of every managed item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event",
            "paramName": "e",
            "description": " Data event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyGroupedProperty": {
      "location": {
        "start": {
          "line": 337,
          "column": 4
        },
        "end": {
          "line": 353,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nAPPLY ROUTINES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyInvalidMessage": {
      "location": {
        "start": {
          "line": 356,
          "column": 4
        },
        "end": {
          "line": 360,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyValid": {
      "location": {
        "start": {
          "line": 363,
          "column": 4
        },
        "end": {
          "line": 367,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyEnabled": {
      "location": {
        "start": {
          "line": 370,
          "column": 4
        },
        "end": {
          "line": 385,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyAllowEmptySelection": {
      "location": {
        "start": {
          "line": 388,
          "column": 4
        },
        "end": {
          "line": 393,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "selectNext": {
      "location": {
        "start": {
          "line": 406,
          "column": 4
        },
        "end": {
          "line": 432,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSELECTION\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Select the item following the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "selectPrevious": {
      "location": {
        "start": {
          "line": 438,
          "column": 4
        },
        "end": {
          "line": 464,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Select the item previous the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getItems": {
      "location": {
        "start": {
          "line": 479,
          "column": 4
        },
        "end": {
          "line": 481,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nHELPER METHODS FOR SELECTION API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns the items for the selection."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.IRadioItem[]} Items to select.",
            "type": "qx.ui.form.IRadioItem[]",
            "desc": " Items to select."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isAllowEmptySelection": {
      "location": {
        "start": {
          "line": 489,
          "column": 4
        },
        "end": {
          "line": 491,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns if the selection could be empty or not."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> If selection could be empty,\n<code>false</code> otherwise.",
            "type": "Boolean",
            "desc": " <code>true</code> If selection could be empty,\n<code>false</code> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isItemSelectable": {
      "location": {
        "start": {
          "line": 503,
          "column": 4
        },
        "end": {
          "line": 505,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether the item is selectable. In opposite to the default\nimplementation (which checks for visible items) every radio button\nwhich is part of the group is selected even if it is currently not visible."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.form.IRadioItem} The item to check if its selectable.",
            "paramName": "item",
            "description": " The item to check if its selectable.",
            "type": "qx.ui.form.IRadioItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the item is part of the radio group\n<code>false</code> otherwise.",
            "type": "Boolean",
            "desc": " <code>true</code> if the item is part of the radio group\n<code>false</code> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__onChangeSelection": {
      "location": {
        "start": {
          "line": 513,
          "column": 4
        },
        "end": {
          "line": 526,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for <code>changeSelection</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event.",
            "paramName": "e",
            "description": " Data event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getSelection": {
      "type": "function",
      "name": "getSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns an array of currently selected items.\n\nNote: The result is only a set of selected items, so the order can\ndiffer from the sequence in which the items were added."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} List of items.",
            "type": "qx.ui.core.Widget[]",
            "desc": " List of items."
          }
        ]
      }
    },
    "setSelection": {
      "type": "function",
      "name": "setSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Replaces current selection with the given items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "items {qx.ui.core.Widget[]} Items to select.",
            "paramName": "items",
            "description": " Items to select.",
            "type": "qx.ui.core.Widget[]"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the item is not a child element."
          }
        ]
      }
    },
    "resetSelection": {
      "type": "function",
      "name": "resetSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection"
    },
    "isSelected": {
      "type": "function",
      "name": "isSelected",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Detects whether the given item is currently selected."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Any valid selectable item",
            "paramName": "item",
            "description": " Any valid selectable item",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the item is selected.",
            "type": "Boolean",
            "desc": " Whether the item is selected."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the item is not a child element."
          }
        ]
      }
    },
    "isSelectionEmpty": {
      "type": "function",
      "name": "isSelectionEmpty",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the selection is empty."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the selection is empty.",
            "type": "Boolean",
            "desc": " Whether the selection is empty."
          }
        ]
      }
    },
    "getSelectables": {
      "type": "function",
      "name": "getSelectables",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns all elements which are selectable."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "all {Boolean} true for all selectables, false for the\nselectables the user can interactively select",
            "paramName": "all",
            "description": " true for all selectables, false for the\nselectables the user can interactively select",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} The contained items.",
            "type": "qx.ui.core.Widget[]",
            "desc": " The contained items."
          }
        ]
      }
    },
    "setValue": {
      "type": "function",
      "name": "setValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IField",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nVALUE PROPERTY\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Sets the field model value. Should also update the UI."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var|null} Updates the field with the new model value.",
            "paramName": "value",
            "description": " Updates the field with the new model value.",
            "type": [
              "var",
              "null"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|Error} Should return an error when the type of\nmodel value is not compatible with the implementing class (the concrete field).",
            "type": "null|Error",
            "desc": " Should return an error when the type of\nmodel value is not compatible with the implementing class (the concrete field)."
          }
        ]
      }
    },
    "resetValue": {
      "type": "function",
      "name": "resetValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IField"
    },
    "getValue": {
      "type": "function",
      "name": "getValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IField",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a consistent and up-to-date model value.\n\nNote: returned value can also be a promise of type <code>Promise&lt;*|null&gt;</code>."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var|null} The model value plain or as promise.",
            "type": "var|null",
            "desc": " The model value plain or as promise."
          }
        ]
      }
    },
    "setEnabled": {
      "type": "function",
      "name": "setEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getEnabled": {
      "type": "function",
      "name": "getEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setRequired": {
      "type": "function",
      "name": "setRequired",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getRequired": {
      "type": "function",
      "name": "getRequired",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setValid": {
      "type": "function",
      "name": "setValid",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getValid": {
      "type": "function",
      "name": "getValid",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setInvalidMessage": {
      "type": "function",
      "name": "setInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getInvalidMessage": {
      "type": "function",
      "name": "getInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setRequiredInvalidMessage": {
      "type": "function",
      "name": "setRequiredInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "getRequiredInvalidMessage": {
      "type": "function",
      "name": "getRequiredInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setModelSelection": {
      "type": "function",
      "name": "setModelSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IModelSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Tries to set the selection using the given array containing the\nrepresentative models for the selectables."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Array} An array of models.",
            "paramName": "value",
            "description": " An array of models.",
            "type": "Array"
          }
        ]
      }
    },
    "getModelSelection": {
      "type": "function",
      "name": "getModelSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IModelSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns an array of the selected models."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the models of the currently selected\nitems.",
            "type": "Array",
            "desc": " An array containing the models of the currently selected\nitems."
          }
        ]
      }
    },
    "_onChangeSelected": {
      "type": "function",
      "name": "_onChangeSelected",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MSingleSelectionHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT HANDLER\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Event listener for <code>changeSelected</code> event on single\nselection manager."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event.",
            "paramName": "e",
            "description": " Data event.",
            "type": "qx.event.type.Data"
          }
        ]
      }
    },
    "__getManager": {
      "type": "function",
      "name": "__getManager",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MSingleSelectionHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Return the selection manager if it is already exists, otherwise creates\nthe manager."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.SingleSelectionManager} Single selection manager.",
            "type": "qx.ui.core.SingleSelectionManager",
            "desc": " Single selection manager."
          }
        ]
      }
    },
    "__onModelSelectionChange": {
      "type": "function",
      "name": "__onModelSelectionChange",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.form.MModelSelection"
    },
    "__onModelSelectionArrayChange": {
      "type": "function",
      "name": "__onModelSelectionArrayChange",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.form.MModelSelection"
    },
    "getGroupedProperty": {
      "type": "function",
      "name": "getGroupedProperty",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setGroupedProperty": {
      "type": "function",
      "name": "setGroupedProperty",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetGroupedProperty": {
      "type": "function",
      "name": "resetGroupedProperty",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getGroupProperty": {
      "type": "function",
      "name": "getGroupProperty",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setGroupProperty": {
      "type": "function",
      "name": "setGroupProperty",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetGroupProperty": {
      "type": "function",
      "name": "resetGroupProperty",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "isEnabled": {
      "type": "function",
      "name": "isEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "resetEnabled": {
      "type": "function",
      "name": "resetEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getWrap": {
      "type": "function",
      "name": "getWrap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isWrap": {
      "type": "function",
      "name": "isWrap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setWrap": {
      "type": "function",
      "name": "setWrap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetWrap": {
      "type": "function",
      "name": "resetWrap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAllowEmptySelection": {
      "type": "function",
      "name": "getAllowEmptySelection",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isAllowEmptySelection": {
      "type": "function",
      "name": "isAllowEmptySelection",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAllowEmptySelection": {
      "type": "function",
      "name": "setAllowEmptySelection",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAllowEmptySelection": {
      "type": "function",
      "name": "resetAllowEmptySelection",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "isValid": {
      "type": "function",
      "name": "isValid",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "resetValid": {
      "type": "function",
      "name": "resetValid",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "isRequired": {
      "type": "function",
      "name": "isRequired",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "resetRequired": {
      "type": "function",
      "name": "resetRequired",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "resetInvalidMessage": {
      "type": "function",
      "name": "resetInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "resetRequiredInvalidMessage": {
      "type": "function",
      "name": "resetRequiredInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 537,
        "column": 2
      },
      "end": {
        "line": 539,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}