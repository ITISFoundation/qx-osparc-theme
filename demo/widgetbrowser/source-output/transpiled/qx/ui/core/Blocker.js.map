{
  "version": 3,
  "sources": [
    "Blocker.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "events",
    "blocked",
    "unblocked",
    "construct",
    "widget",
    "_widget",
    "addListener",
    "__onBoundsChange",
    "__onWidgetDisappear",
    "isDefined",
    "ui",
    "root",
    "Abstract",
    "_isRoot",
    "setKeepBlockerActive",
    "theme",
    "manager",
    "Meta",
    "getInstance",
    "_onChangeTheme",
    "__activeElements",
    "__focusElements",
    "properties",
    "color",
    "check",
    "init",
    "nullable",
    "apply",
    "themeable",
    "opacity",
    "keepBlockerActive",
    "members",
    "__blocker",
    "__blockerCount",
    "__timer",
    "__appearListener",
    "e",
    "data",
    "getData",
    "isBlocked",
    "_updateBlockerBounds",
    "__onWidgetAppear",
    "getBounds",
    "isRootWidget",
    "getContentElement",
    "add",
    "getBlockerElement",
    "getLayoutParent",
    "getParent",
    "remove",
    "addListenerOnce",
    "bounds",
    "setStyles",
    "width",
    "height",
    "left",
    "top",
    "_applyColor",
    "value",
    "old",
    "Color",
    "resolve",
    "__setBlockersStyle",
    "_applyOpacity",
    "getColor",
    "key",
    "blockers",
    "push",
    "i",
    "length",
    "setStyle",
    "_backupActiveWidget",
    "focusHandler",
    "event",
    "Registration",
    "getManager",
    "window",
    "getHandler",
    "handler",
    "Focus",
    "Widget",
    "getWidgetByElement",
    "getActive",
    "getFocus",
    "isFocusable",
    "focus",
    "_restoreActiveWidget",
    "focusElementsLength",
    "pop",
    "isDisposed",
    "activeElementsLength",
    "activate",
    "__createBlockerElement",
    "html",
    "Blocker",
    "getOpacity",
    "exclude",
    "block",
    "_block",
    "zIndex",
    "blockContent",
    "bind",
    "parent",
    "blocker",
    "include",
    "__activateBlockerElement",
    "__stopTabEvent",
    "fireEvent",
    "type",
    "Event",
    "unblock",
    "removeListenerById",
    "__unblock",
    "forceUnblock",
    "removeListener",
    "getKeyIdentifier",
    "stop",
    "getKeepBlockerActive",
    "FocusHandler",
    "isFocusRoot",
    "destruct",
    "_disposeObjects"
  ],
  "mappings": "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",
  "file": "Blocker.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class blocks events and can be included into all widgets.\n *\n * The {@link #block} and {@link #unblock} methods provided by this class can be used\n * to block any event from the widget. When blocked,\n * the blocker widget overlays the widget to block, including the padding area.\n *\n * @ignore(qx.ui.root.Abstract)\n */\nqx.Class.define(\"qx.ui.core.Blocker\",\n{\n  extend : qx.core.Object,\n\n\n  events :\n  {\n    /**\n     * Fires after {@link #block} executed.\n     */\n    blocked : \"qx.event.type.Event\",\n\n\n    /**\n     * Fires after {@link #unblock} executed.\n     */\n    unblocked : \"qx.event.type.Event\"\n  },\n\n\n  /**\n   * Creates a blocker for the passed widget.\n   *\n   * @param widget {qx.ui.core.Widget} Widget which should be added the blocker\n   */\n  construct: function(widget)\n  {\n    this.base(arguments);\n    this._widget = widget;\n\n    widget.addListener(\"resize\", this.__onBoundsChange, this);\n    widget.addListener(\"move\", this.__onBoundsChange, this);\n    widget.addListener(\"disappear\", this.__onWidgetDisappear, this);\n\n    if (qx.Class.isDefined(\"qx.ui.root.Abstract\") &&\n        widget instanceof qx.ui.root.Abstract) {\n      this._isRoot = true;\n      this.setKeepBlockerActive(true);\n    }\n\n    // dynamic theme switch\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\n      qx.theme.manager.Meta.getInstance().addListener(\n        \"changeTheme\", this._onChangeTheme, this\n      );\n    }\n\n    this.__activeElements = [];\n    this.__focusElements = [];\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Color of the blocker\n     */\n    color  :\n    {\n      check : \"Color\",\n      init : null,\n      nullable: true,\n      apply : \"_applyColor\",\n      themeable: true\n    },\n\n\n    /**\n     * Opacity of the blocker\n     */\n    opacity :\n    {\n      check : \"Number\",\n      init : 1,\n      apply : \"_applyOpacity\",\n      themeable: true\n    },\n\n\n    /**\n     * If this property is enabled, the blocker created with {@link #block}\n     * will always stay activated. This means that the blocker then gets all keyboard\n     * events, this is useful to block keyboard input on other widgets.\n     * Take care that only one blocker instance will be kept active, otherwise your\n     * browser will freeze.\n     * \n     * Setting this property to true is ignored, if the blocker is attached to a\n     * widget with a focus handler, as this would mean that the focus handler\n     * tries to activate the widget behind the blocker.\n     * \n     * fixes:\n     *     https://github.com/qooxdoo/qooxdoo/issues/9449\n     *     https://github.com/qooxdoo/qooxdoo/issues/8104\n     */\n    keepBlockerActive :\n    {\n      check : \"Boolean\",\n      init : false\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __blocker : null,\n    __blockerCount : 0,\n\n    __activeElements  : null,\n    __focusElements   : null,\n\n    __timer : null,\n\n    _widget : null,\n    _isRoot : false,\n\n    __appearListener : null,\n\n\n    /**\n     * Adjust html element size on layout resizes.\n     *\n     * @param e {qx.event.type.Data} event object\n     */\n    __onBoundsChange : function(e)\n    {\n      var data = e.getData();\n\n      if (this.isBlocked()) {\n        this._updateBlockerBounds(data);\n      }\n    },\n\n\n    /**\n     * Widget re-appears: Update blocker size/position and attach to (new) parent\n     */\n    __onWidgetAppear : function()\n    {\n      this._updateBlockerBounds(this._widget.getBounds());\n      if (this._widget.isRootWidget()) {\n        this._widget.getContentElement().add(this.getBlockerElement());\n      } else {\n        this._widget.getLayoutParent().getContentElement().add(this.getBlockerElement());\n      }\n    },\n\n\n    /**\n     * Remove the blocker if the widget disappears\n     */\n    __onWidgetDisappear : function()\n    {\n      if (this.isBlocked()) {\n        this.getBlockerElement().getParent().remove(this.getBlockerElement());\n        this._widget.addListenerOnce(\"appear\", this.__onWidgetAppear, this);\n      }\n    },\n\n\n    /**\n     * set the blocker's size and position\n     * @param bounds {Map} Map with the new width, height, left and top values\n     */\n    _updateBlockerBounds : function(bounds)\n    {\n      this.getBlockerElement().setStyles({\n        width: bounds.width + \"px\",\n        height: bounds.height + \"px\",\n        left: bounds.left + \"px\",\n        top: bounds.top + \"px\"\n      });\n    },\n\n\n    // property apply\n    _applyColor : function(value, old)\n    {\n      var color = qx.theme.manager.Color.getInstance().resolve(value);\n      this.__setBlockersStyle(\"backgroundColor\", color);\n    },\n\n\n    // property apply\n    _applyOpacity : function(value, old)\n    {\n      this.__setBlockersStyle(\"opacity\", value);\n    },\n\n\n    /**\n     * Handler for the theme change.\n     * @signature function()\n     */\n    _onChangeTheme : qx.core.Environment.select(\"qx.dyntheme\",\n    {\n      \"true\" : function() {\n        this._applyColor(this.getColor());\n      },\n      \"false\" : null\n    }),\n\n\n    /**\n     * Set the style to all blockers (blocker and content blocker).\n     *\n     * @param key {String} The name of the style attribute.\n     * @param value {String} The value.\n     */\n    __setBlockersStyle : function(key, value)\n    {\n      var blockers = [];\n      this.__blocker && blockers.push(this.__blocker);\n\n      for (var i = 0; i < blockers.length; i++) {\n        blockers[i].setStyle(key, value);\n      }\n    },\n\n\n    /**\n     * Backup the current active and focused widget.\n     */\n    _backupActiveWidget : function()\n    {\n      var focusHandler = qx.event.Registration.getManager(window).getHandler(qx.event.handler.Focus);\n\n      this.__activeElements.push(qx.ui.core.Widget.getWidgetByElement(focusHandler.getActive()));\n      this.__focusElements.push(qx.ui.core.Widget.getWidgetByElement(focusHandler.getFocus()));\n\n      if (this._widget.isFocusable()) {\n        this._widget.focus();\n      }\n    },\n\n\n    /**\n     * Restore the current active and focused widget.\n     */\n    _restoreActiveWidget : function()\n    {\n      var widget;\n\n      var focusElementsLength = this.__focusElements.length;\n      if (focusElementsLength > 0)       {\n        widget = this.__focusElements.pop();\n\n        if (widget && !widget.isDisposed() && widget.isFocusable()) {\n          widget.focus();\n        }\n      }\n\n      var activeElementsLength = this.__activeElements.length;\n      if (activeElementsLength > 0) {\n        widget = this.__activeElements.pop();\n\n        if (widget && !widget.isDisposed()) {\n          widget.activate();\n        }\n      }\n    },\n\n\n    /**\n     * Creates the blocker element.\n     *\n     * @return {qx.html.Element} The blocker element\n     */\n    __createBlockerElement : function() {\n      return new qx.html.Blocker(this.getColor(), this.getOpacity());\n    },\n\n\n    /**\n     * Get/create the blocker element\n     *\n     * @param widget {qx.ui.core.Widget} The blocker will be added to this\n     * widget's content element\n     * @return {qx.html.Element} The blocker element\n     */\n    getBlockerElement : function(widget)\n    {\n      if (!this.__blocker)\n      {\n        this.__blocker = this.__createBlockerElement();\n        this.__blocker.setStyle(\"zIndex\", 15);\n\n        if (!widget) {\n          if (this._isRoot) {\n            widget = this._widget;\n          } else {\n            widget = this._widget.getLayoutParent();\n          }\n        }\n\n        widget.getContentElement().add(this.__blocker);\n        this.__blocker.exclude();\n      }\n      return this.__blocker;\n    },\n\n\n    /**\n     * Block all events from this widget by placing a transparent overlay widget,\n     * which receives all events, exactly over the widget.\n     */\n    block : function()\n    {\n      this._block();\n    },\n\n\n    /**\n     * Adds the blocker to the appropriate element and includes it.\n     *\n     * @param zIndex {Number} All child widgets with a zIndex below this value will be blocked\n     * @param blockContent {Boolean} append the blocker to the widget's content if true\n     */\n    _block : function(zIndex, blockContent) {\n      if (!this._isRoot && !this._widget.getLayoutParent()) {\n        this.__appearListener = this._widget.addListenerOnce(\"appear\", this._block.bind(this, zIndex));\n        return;\n      }\n\n      var parent;\n      if (this._isRoot || blockContent) {\n        parent = this._widget;\n      } else {\n        parent = this._widget.getLayoutParent();\n      }\n\n      var blocker = this.getBlockerElement(parent);\n      if (zIndex != null) {\n        blocker.setStyle(\"zIndex\", zIndex);\n      }\n\n      this.__blockerCount++;\n      if (this.__blockerCount < 2)\n      {\n        this._backupActiveWidget();\n\n        var bounds = this._widget.getBounds();\n        // no bounds -> widget not yet rendered -> bounds will be set on resize\n        if (bounds) {\n          this._updateBlockerBounds(bounds);\n        }\n\n        blocker.include();\n        if (!blockContent) {\n          blocker.activate();\n        }\n\n        blocker.addListener(\"deactivate\", this.__activateBlockerElement, this);\n        blocker.addListener(\"keypress\", this.__stopTabEvent, this);\n        blocker.addListener(\"keydown\", this.__stopTabEvent, this);\n        blocker.addListener(\"keyup\", this.__stopTabEvent, this);\n\n        this.fireEvent(\"blocked\", qx.event.type.Event);\n      }\n    },\n\n\n    /**\n     * Returns whether the widget is blocked.\n     *\n     * @return {Boolean} Whether the widget is blocked.\n     */\n    isBlocked : function() {\n      return this.__blockerCount > 0;\n    },\n\n\n    /**\n     * Unblock the widget blocked by {@link #block}, but it takes care of\n     * the amount of {@link #block} calls. The blocker is only removed if\n     * the number of {@link #unblock} calls is identical to {@link #block} calls.\n     */\n    unblock : function()\n    {\n      if (this.__appearListener) {\n        this._widget.removeListenerById(this.__appearListener);\n      }\n\n      if (!this.isBlocked()){\n        return;\n      }\n\n      this.__blockerCount--;\n      if (this.__blockerCount < 1) {\n        this.__unblock();\n        this.__blockerCount = 0;\n      }\n    },\n\n\n    /**\n     * Unblock the widget blocked by {@link #block}, but it doesn't take care of\n     * the amount of {@link #block} calls. The blocker is directly removed.\n     */\n    forceUnblock : function()\n    {\n      if (!this.isBlocked()){\n        return;\n      }\n\n      this.__blockerCount = 0;\n      this.__unblock();\n    },\n\n\n    /**\n     * Unblock the widget blocked by {@link #block}.\n     */\n    __unblock : function()\n    {\n      this._restoreActiveWidget();\n\n      var blocker = this.getBlockerElement();\n      blocker.removeListener(\"deactivate\", this.__activateBlockerElement, this);\n      blocker.removeListener(\"keypress\", this.__stopTabEvent, this);\n      blocker.removeListener(\"keydown\", this.__stopTabEvent, this);\n      blocker.removeListener(\"keyup\", this.__stopTabEvent, this);\n      blocker.exclude();\n\n      this.fireEvent(\"unblocked\", qx.event.type.Event);\n    },\n\n\n    /**\n     * Block direct child widgets with a zIndex below <code>zIndex</code>\n     *\n     * @param zIndex {Integer} All child widgets with a zIndex below this value\n     *     will be blocked\n     */\n    blockContent : function(zIndex) {\n      this._block(zIndex, true);\n    },\n\n\n    /**\n     * Stops the passed \"Tab\" event.\n     *\n     * @param e {qx.event.type.KeySequence} event to stop.\n     */\n    __stopTabEvent : function(e) {\n      if (e.getKeyIdentifier() == \"Tab\") {\n        e.stop();\n      }\n    },\n\n\n    /**\n     * Sets the blocker element to active.\n     */\n    __activateBlockerElement : function() {\n      if (this.getKeepBlockerActive() && \n          // \n          // If this._widget is attached to the focus handler as a focus root,\n          // activating the blocker after this widget was deactivated,\n          // leads to the focus handler re-activate the widget behind\n          // the blocker, loosing tab handling for this._widget which is\n          // visually in front. Hence we prevent activating the \n          // blocker in this situation.\n          //\n          // fixes:\n          //  https://github.com/qooxdoo/qooxdoo/issues/9449\n          //  https://github.com/qooxdoo/qooxdoo/issues/8104\n          //\n          !qx.ui.core.FocusHandler.getInstance().isFocusRoot(this._widget)) {\n        this.getBlockerElement().activate();\n      }\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    // remove dynamic theme listener\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\n      qx.theme.manager.Meta.getInstance().removeListener(\n        \"changeTheme\", this._onChangeTheme, this\n      );\n    }\n\n    this._widget.removeListener(\"resize\", this.__onBoundsChange, this);\n    this._widget.removeListener(\"move\", this.__onBoundsChange, this);\n    this._widget.removeListener(\"appear\", this.__onWidgetAppear, this);\n    this._widget.removeListener(\"disappear\", this.__onWidgetDisappear, this);\n\n    if (this.__appearListener) {\n      this._widget.removeListenerById(this.__appearListener);\n    }\n\n    this._disposeObjects(\"__blocker\", \"__timer\");\n    this.__activeElements = this.__focusElements =\n      this._widget = null;\n  }\n});\n"
  ]
}