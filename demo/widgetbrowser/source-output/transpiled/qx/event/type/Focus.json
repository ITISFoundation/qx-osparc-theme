{
  "className": "qx.event.type.Focus",
  "packageName": "qx.event.type",
  "name": "Focus",
  "superClass": "qx.event.type.Event",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 22,
        "column": 0
      },
      "end": {
        "line": 49,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Common base class for all focus events."
        }
      ]
    }
  },
  "type": "class",
  "members": {
    "init": {
      "location": {
        "start": {
          "line": 39,
          "column": 4
        },
        "end": {
          "line": 47,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Initialize the fields of the event. The event must be initialized before\nit can be dispatched."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any possible event target",
            "paramName": "target",
            "description": " Any possible event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "relatedTarget {Object} Any possible event target",
            "paramName": "relatedTarget",
            "description": " Any possible event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "canBubble {Boolean?false} Whether or not the event is a bubbling event.\nIf the event is bubbling, the bubbling can be stopped using\n{@link qx.event.type.Event#stopPropagation}",
            "paramName": "canBubble",
            "description": " Whether or not the event is a bubbling event.\nIf the event is bubbling, the bubbling can be stopped using\n{@link qx.event.type.Event#stopPropagation}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Event} The initialized event instance",
            "type": "qx.event.type.Event",
            "desc": " The initialized event instance"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event"
      ]
    }
  },
  "descendants": []
}