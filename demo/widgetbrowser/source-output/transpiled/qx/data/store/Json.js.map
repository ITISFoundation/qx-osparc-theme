{
  "version": 3,
  "sources": [
    "Json.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "url",
    "delegate",
    "_marshaler",
    "data",
    "marshal",
    "Json",
    "_delegate",
    "setUrl",
    "events",
    "properties",
    "model",
    "nullable",
    "event",
    "state",
    "check",
    "init",
    "apply",
    "members",
    "__request",
    "_applyUrl",
    "value",
    "old",
    "util",
    "AliasManager",
    "getInstance",
    "resolve",
    "ResourceManager",
    "toUri",
    "_createRequest",
    "_getRequest",
    "_setRequest",
    "request",
    "dispose",
    "req",
    "io",
    "Xhr",
    "setAccept",
    "setParser",
    "addListener",
    "_onSuccess",
    "del",
    "lang",
    "Type",
    "isFunction",
    "configureRequest",
    "_onChangePhase",
    "_onFail",
    "send",
    "ev",
    "requestPhase",
    "getData",
    "requestPhaseToStorePhase",
    "setState",
    "getTarget",
    "fireDataEvent",
    "isDisposed",
    "getResponse",
    "manipulateData",
    "toClass",
    "oldModel",
    "getModel",
    "setModel",
    "toModel",
    "reload",
    "getUrl",
    "destruct",
    "_disposeObjects",
    "_disposeSingletonObjects",
    "store"
  ],
  "mappings": "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",
  "file": "Json.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * The JSON data store is responsible for fetching data from an url. The type\n * of the data has to be json.\n *\n * The loaded data will be parsed and saved in qooxdoo objects. Every value\n * of the loaded data will be stored in a qooxdoo property. The model classes\n * for the data will be created automatically.\n *\n * For the fetching itself it uses the {@link qx.io.request.Xhr} class and\n * for parsing the loaded javascript objects into qooxdoo objects, the\n * {@link qx.data.marshal.Json} class will be used.\n *\n * Please note that if you\n *\n * * upgrade from qooxdoo 1.4 or lower\n * * choose not to force the old transport\n * * use a delegate with qx.data.store.IStoreDelegate#configureRequest\n *\n * you probably need to change the implementation of your delegate to configure\n * the {@link qx.io.request.Xhr} request.\n * \n * This class only needs to be disposed if you want to abort any current I/O\n * request\n *\n */\nqx.Class.define(\"qx.data.store.Json\",\n{\n  extend : qx.core.Object,\n\n\n  /**\n   * @param url {String|null} The url where to find the data. The store starts\n   *   loading as soon as the URL is give. If you want to change some details\n   *   concerning the request, add null here and set the URL as soon as\n   *   everything is set up.\n   * @param delegate {Object?null} The delegate containing one of the methods\n   *   specified in {@link qx.data.store.IStoreDelegate}.\n   */\n  construct : function(url, delegate)\n  {\n    this.base(arguments);\n\n\n    // store the marshaler and the delegate\n    this._marshaler = new qx.data.marshal.Json(delegate);\n    this._delegate = delegate;\n\n    if (url != null) {\n      this.setUrl(url);\n    }\n  },\n\n\n  events :\n  {\n    /**\n     * Data event fired after the model has been created. The data will be the\n     * created model.\n     */\n    \"loaded\" : \"qx.event.type.Data\",\n\n    /**\n     * Fired when an error (aborted, timeout or failed) occurred\n     * during the load. The data contains the response of the request.\n     * If you want more details, use the {@link #changeState} event.\n     */\n    \"error\" : \"qx.event.type.Data\"\n  },\n\n\n  properties :\n  {\n    /**\n     * Property for holding the loaded model instance.\n     */\n    model : {\n      nullable: true,\n      event: \"changeModel\"\n    },\n\n\n    /**\n     * The state of the request as an url. If you want to check if the request\n     * did it’s job, use, the {@link #changeState} event and check for one of the\n     * listed values.\n     */\n    state : {\n      check : [\n        \"configured\", \"queued\", \"sending\", \"receiving\",\n        \"completed\", \"aborted\", \"timeout\", \"failed\"\n      ],\n      init : \"configured\",\n      event : \"changeState\"\n    },\n\n\n    /**\n     * The url where the request should go to.\n     */\n    url : {\n      check: \"String\",\n      apply: \"_applyUrl\",\n      event: \"changeUrl\",\n      nullable: true\n    }\n  },\n\n\n  members :\n  {\n    _marshaler : null,\n    _delegate : null,\n\n    __request : null,\n\n    // apply function\n    _applyUrl: function(value, old) {\n      if (value != null) {\n        // take care of the resource management\n        value = qx.util.AliasManager.getInstance().resolve(value);\n        value = qx.util.ResourceManager.getInstance().toUri(value);\n\n        this._createRequest(value);\n      }\n    },\n\n    /**\n     * Get request\n     *\n     * @return {Object} The request.\n     */\n    _getRequest: function() {\n      return this.__request;\n    },\n\n\n    /**\n     * Set request.\n     *\n     * @param request {Object} The request.\n     */\n    _setRequest: function(request) {\n      this.__request = request;\n    },\n\n\n    /**\n     * Creates and sends a GET request with the given url.\n     *\n     * Listeners will be added to respond to the request’s \"success\",\n     * \"changePhase\" and \"fail\" event.\n     *\n     * @param url {String} The url for the request.\n     */\n    _createRequest: function(url) {\n      // dispose old request\n      if (this.__request) {\n        this.__request.dispose();\n        this.__request = null;\n      }\n\n      var req = new qx.io.request.Xhr(url);\n      this._setRequest(req);\n\n      // request json representation\n      req.setAccept(\"application/json\");\n\n      // parse as json no matter what content type is returned\n      req.setParser(\"json\");\n\n      // register the internal event before the user has the change to\n      // register its own event in the delegate\n      req.addListener(\"success\", this._onSuccess, this);\n\n      // check for the request configuration hook\n      var del = this._delegate;\n      if (del && qx.lang.Type.isFunction(del.configureRequest)) {\n        this._delegate.configureRequest(req);\n      }\n\n      // map request phase to it’s own phase\n      req.addListener(\"changePhase\", this._onChangePhase, this);\n\n      // add failed, aborted and timeout listeners\n      req.addListener(\"fail\", this._onFail, this);\n\n      req.send();\n    },\n\n\n    /**\n     * Handler called when request phase changes.\n     *\n     * Sets the store’s state.\n     *\n     * @param ev {qx.event.type.Data} The request’s changePhase event.\n     */\n    _onChangePhase : function(ev) {\n      var requestPhase = ev.getData(),\n          requestPhaseToStorePhase = {},\n          state;\n\n      requestPhaseToStorePhase = {\n        \"opened\": \"configured\",\n        \"sent\": \"sending\",\n        \"loading\": \"receiving\",\n        \"success\": \"completed\",\n        \"abort\": \"aborted\",\n        \"timeout\": \"timeout\",\n        \"statusError\": \"failed\"\n      };\n\n      state = requestPhaseToStorePhase[requestPhase];\n      if (state) {\n        this.setState(state);\n      }\n    },\n\n\n    /**\n     * Handler called when not completing the request successfully.\n     *\n     * @param ev {qx.event.type.Event} The request’s fail event.\n     */\n    _onFail : function(ev) {\n      var req = ev.getTarget();\n      this.fireDataEvent(\"error\", req);\n    },\n\n\n    /**\n     * Handler for the completion of the requests. It invokes the creation of\n     * the needed classes and instances for the fetched data using\n     * {@link qx.data.marshal.Json}.\n     *\n     * @param ev {qx.event.type.Event} The request’s success event.\n     */\n    _onSuccess : function(ev)\n    {\n      if (this.isDisposed()) {\n        return;\n      }\n\n       var req = ev.getTarget(),\n           data = req.getResponse();\n\n       // check for the data manipulation hook\n       var del = this._delegate;\n       if (del && qx.lang.Type.isFunction(del.manipulateData)) {\n         data = this._delegate.manipulateData(data);\n       }\n\n       // create the class\n       this._marshaler.toClass(data, true);\n\n       var oldModel = this.getModel();\n\n       // set the initial data\n       this.setModel(this._marshaler.toModel(data));\n\n       // get rid of the old model\n       if (oldModel && oldModel.dispose) {\n         oldModel.dispose();\n       }\n\n       // fire complete event\n       this.fireDataEvent(\"loaded\", this.getModel());\n\n       // get rid of the request object\n       if (this.__request) {\n         this.__request.dispose();\n         this.__request = null;\n       }\n    },\n\n\n    /**\n     * Reloads the data with the url set in the {@link #url} property.\n     */\n    reload: function() {\n      var url = this.getUrl();\n      if (url != null) {\n        this._createRequest(url);\n      }\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct : function()\n  {\n    if (this.__request != null) {\n      this._disposeObjects(\"__request\");\n    }\n\n    // The marshaler internally uses the singleton pattern\n    // (constructor.$$instance.\n    this._disposeSingletonObjects(\"_marshaler\");\n    this._delegate = null;\n  }\n});\n"
  ]
}