{
  "className": "qx.ui.embed.Canvas",
  "packageName": "qx.ui.embed",
  "name": "Canvas",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 69,
        "column": 0
      },
      "end": {
        "line": 277,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The Canvas widget embeds the HMTL canvas element\n[<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#the-canvas\">W3C-HTML5</a>]\n\nNote: This widget does not work in Internet Explorer < 9!\nCheck for browser support with qx.core.Environment.get(\"html.canvas\").\n\nTo paint something on the canvas and keep the content updated on resizes you\neither have to override the {@link #_draw} method or redraw the content on\nthe {@link #redraw} event. The drawing context can be obtained by {@link #getContext2d}.\n\nNote that this widget operates on two different coordinate systems. The canvas\nhas its own coordinate system for drawing operations. This canvas coordinate\nsystem is scaled to fit actual size of the DOM element. Each time the size of\nthe canvas dimensions is changed a redraw is required. In this case the\nprotected method {@link #_draw} is called and the event {@link #redraw}\nis fired. You can synchronize the internal canvas dimension with the\nCSS dimension of the canvas element by setting {@link #syncDimension} to\n<code>true</code>.\n\n*Example*\n\nHere is a little example of how to use the canvas widget.\n\n<pre class='javascript'>\nvar canvas = new qx.ui.embed.Canvas().set({\ncanvasWidth: 200,\ncanvasHeight: 200,\nsyncDimension: true\n});\ncanvas.addListener(\"redraw\", function(e)\n{\nvar data = e.getData();\nvar width = data.width;\nvar height = data.height;\nvar ctx = data.context;\n\nctx.fillStyle = \"rgb(200,0,0)\";\nctx.fillRect (20, 20, width-5, height-5);\n\nctx.fillStyle = \"rgba(0, 0, 200, 0.5)\";\nctx.fillRect (70, 70, 105, 100);\n}, this);\n</pre>\n\n*External Documentation*\n\n<a href='http://manual.qooxdoo.org/${qxversion}/pages/widget/canvas.html' target='_blank'>\nDocumentation of this widget in the qooxdoo manual.</a>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 85,
        "column": 2
      },
      "end": {
        "line": 99,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "canvasWidth {Integer} The internal with of the canvas coordinates.",
          "paramName": "canvasWidth",
          "description": " The internal with of the canvas coordinates.",
          "type": "Integer"
        },
        {
          "name": "@param",
          "body": "canvasHeight {Integer} The internal height of the canvas coordinates.",
          "paramName": "canvasHeight",
          "description": " The internal height of the canvas coordinates.",
          "type": "Integer"
        }
      ]
    }
  },
  "properties": {
    "syncDimension": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 135,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether canvas and widget coordinates should be synchronized"
          }
        ]
      },
      "name": "syncDimension",
      "propertyType": "new",
      "check": "Boolean",
      "defaultValue": false
    },
    "canvasWidth": {
      "location": {
        "start": {
          "line": 138,
          "column": 4
        },
        "end": {
          "line": 143,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The internal with of the canvas coordinates"
          }
        ]
      },
      "name": "canvasWidth",
      "propertyType": "new",
      "apply": "_applyCanvasWidth",
      "check": "Integer",
      "defaultValue": 300
    },
    "canvasHeight": {
      "location": {
        "start": {
          "line": 146,
          "column": 4
        },
        "end": {
          "line": 151,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The internal height of the canvas coordinates"
          }
        ]
      },
      "name": "canvasHeight",
      "propertyType": "new",
      "apply": "_applyCanvasHeight",
      "check": "Integer",
      "defaultValue": 150
    }
  },
  "members": {
    "__deferredDraw": {
      "location": {
        "start": {
          "line": 165,
          "column": 4
        },
        "end": {
          "line": 165,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.util.DeferredCall}"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_createContentElement": {
      "location": {
        "start": {
          "line": 174,
          "column": 4
        },
        "end": {
          "line": 176,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nWIDGET API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} The widget's content element",
            "type": "qx.html.Element",
            "desc": " The widget's content element"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "__redraw": {
      "location": {
        "start": {
          "line": 182,
          "column": 4
        },
        "end": {
          "line": 199,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This methods triggers the redraw of the canvas' content"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyCanvasWidth": {
      "location": {
        "start": {
          "line": 203,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyCanvasHeight": {
      "location": {
        "start": {
          "line": 211,
          "column": 4
        },
        "end": {
          "line": 215,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "update": {
      "location": {
        "start": {
          "line": 221,
          "column": 4
        },
        "end": {
          "line": 223,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Redraw the canvas"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onResize": {
      "location": {
        "start": {
          "line": 231,
          "column": 4
        },
        "end": {
          "line": 240,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Widget resize event handler. Updates the canvas dimension if needed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The resize event object",
            "paramName": "e",
            "description": " The resize event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getContext2d": {
      "location": {
        "start": {
          "line": 250,
          "column": 4
        },
        "end": {
          "line": 252,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the native canvas 2D rendering context\n[<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvasrenderingcontext2d\">W3C-HTML5</a>].\nAll drawing operations are performed on this context."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{CanvasRenderingContext2D} The 2D rendering context.",
            "type": "CanvasRenderingContext2D",
            "desc": " The 2D rendering context."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_draw": {
      "location": {
        "start": {
          "line": 264,
          "column": 4
        },
        "end": {
          "line": 264,
          "column": 47
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Template method, which can be used by derived classes to redraw the\ncontent. It is called each time the canvas dimension change and the\ncanvas needs to be updated."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} New canvas width",
            "paramName": "width",
            "description": " New canvas width",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "height {Integer} New canvas height",
            "paramName": "height",
            "description": " New canvas height",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "context {CanvasRenderingContext2D} The rendering context to draw to",
            "paramName": "context",
            "description": " The rendering context to draw to",
            "type": "CanvasRenderingContext2D"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getSyncDimension": {
      "type": "function",
      "name": "getSyncDimension",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isSyncDimension": {
      "type": "function",
      "name": "isSyncDimension",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSyncDimension": {
      "type": "function",
      "name": "setSyncDimension",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetSyncDimension": {
      "type": "function",
      "name": "resetSyncDimension",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getCanvasWidth": {
      "type": "function",
      "name": "getCanvasWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setCanvasWidth": {
      "type": "function",
      "name": "setCanvasWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetCanvasWidth": {
      "type": "function",
      "name": "resetCanvasWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getCanvasHeight": {
      "type": "function",
      "name": "getCanvasHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setCanvasHeight": {
      "type": "function",
      "name": "setCanvasHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetCanvasHeight": {
      "type": "function",
      "name": "resetCanvasHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 274,
        "column": 2
      },
      "end": {
        "line": 276,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCT\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}