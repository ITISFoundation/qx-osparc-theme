{
  "className": "qx.ui.table.Table",
  "packageName": "qx.ui.table",
  "name": "Table",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [],
  "mixins": [
    "qx.ui.core.MDragDropScrolling"
  ],
  "clazz": {
    "location": {
      "start": {
        "line": 30,
        "column": 0
      },
      "end": {
        "line": 2284,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2006 STZ-IDA, Germany, http://www.stz-ida.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nTil Schneider (til132)\nFabian Jakobs (fjakobs)\nJonathan Wei√ü (jonathan_rass)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Table\n\nA detailed description can be found in the package description\n{@link qx.ui.table}."
        }
      ],
      "@childControl": [
        {
          "name": "@childControl",
          "body": "statusbar {qx.ui.basic.Label} label to show the status of the table"
        },
        {
          "name": "@childControl",
          "body": "column-button {qx.ui.table.columnmenu.Button} button to open the column menu"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 126,
        "column": 2
      },
      "end": {
        "line": 221,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "tableModel {qx.ui.table.ITableModel ? null}\nThe table model to read the data from.",
          "paramName": "tableModel",
          "description": "\nThe table model to read the data from.",
          "optional": true,
          "defaultValue": "null",
          "type": "qx.ui.table.ITableModel"
        },
        {
          "name": "@param",
          "body": "custom {Map ? null}\nA map provided to override the various supplemental classes allocated\nwithin this constructor.  Each property must be a function which\nreturns an object instance, as indicated by shown the defaults listed\nhere:\n\n<dl>\n<dt>initiallyHiddenColumns</dt>\n<dd>\n{Array?}\nA list of column numbers that should be initially invisible. Any\ncolumn not mentioned will be initially visible, and if no array\nis provided, all columns will be initially visible.\n</dd>\n<dt>selectionManager</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.selection.Manager(obj);\n}\n</pre></dd>\n<dt>selectionModel</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.selection.Model(obj);\n}\n</pre></dd>\n<dt>tableColumnModel</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.columnmodel.Basic(obj);\n}\n</pre></dd>\n<dt>tablePaneModel</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.pane.Model(obj);\n}\n</pre></dd>\n<dt>tablePane</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.pane.Pane(obj);\n}\n</pre></dd>\n<dt>tablePaneHeader</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.pane.Header(obj);\n}\n</pre></dd>\n<dt>tablePaneScroller</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.pane.Scroller(obj);\n}\n</pre></dd>\n<dt>tablePaneModel</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.pane.Model(obj);\n}\n</pre></dd>\n<dt>columnMenu</dt>\n<dd><pre class='javascript'>\nfunction()\n{\nreturn new qx.ui.table.columnmenu.Button();\n}\n</pre></dd>\n</dl>",
          "paramName": "custom",
          "description": "\nA map provided to override the various supplemental classes allocated\nwithin this constructor.  Each property must be a function which\nreturns an object instance, as indicated by shown the defaults listed\nhere:\n\n<dl>\n<dt>initiallyHiddenColumns</dt>\n<dd>\n{Array?}\nA list of column numbers that should be initially invisible. Any\ncolumn not mentioned will be initially visible, and if no array\nis provided, all columns will be initially visible.\n</dd>\n<dt>selectionManager</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.selection.Manager(obj);\n}\n</pre></dd>\n<dt>selectionModel</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.selection.Model(obj);\n}\n</pre></dd>\n<dt>tableColumnModel</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.columnmodel.Basic(obj);\n}\n</pre></dd>\n<dt>tablePaneModel</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.pane.Model(obj);\n}\n</pre></dd>\n<dt>tablePane</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.pane.Pane(obj);\n}\n</pre></dd>\n<dt>tablePaneHeader</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.pane.Header(obj);\n}\n</pre></dd>\n<dt>tablePaneScroller</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.pane.Scroller(obj);\n}\n</pre></dd>\n<dt>tablePaneModel</dt>\n<dd><pre class='javascript'>\nfunction(obj)\n{\nreturn new qx.ui.table.pane.Model(obj);\n}\n</pre></dd>\n<dt>columnMenu</dt>\n<dd><pre class='javascript'>\nfunction()\n{\nreturn new qx.ui.table.columnmenu.Button();\n}\n</pre></dd>\n</dl>",
          "optional": true,
          "defaultValue": "null",
          "type": "Map"
        }
      ]
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 314,
          "column": 4
        },
        "end": {
          "line": 318,
          "column": 5
        }
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "defaultValue": "table",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "focusable": {
      "location": {
        "start": {
          "line": 321,
          "column": 4
        },
        "end": {
          "line": 325,
          "column": 5
        }
      },
      "name": "focusable",
      "propertyType": "new",
      "refine": true,
      "defaultValue": true,
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "minWidth": {
      "location": {
        "start": {
          "line": 328,
          "column": 4
        },
        "end": {
          "line": 332,
          "column": 5
        }
      },
      "name": "minWidth",
      "propertyType": "new",
      "refine": true,
      "defaultValue": 50,
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": {
        "qx.ui.core.LayoutItem": "class"
      }
    },
    "initiallyHiddenColumns": {
      "location": {
        "start": {
          "line": 346,
          "column": 4
        },
        "end": {
          "line": 349,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The list of columns that are initially hidden. This property is set by\nthe constructor, from the value received in\ncustom.initiallyHiddenColumns, and is only used when a column model is\ninitialized. It can be of great benefit in tables with numerous columns\nwhere most are not initially visible. The process of creating the\nheaders for all of the columns, only to have those columns discarded\nshortly thereafter when setColumnVisibility(false) is called, is a\nwaste of (significant, in some browsers) time. Specifying the\nnon-visible columns at constructor time can therefore avoid the initial\ncreation of all of those superfluous widgets."
          }
        ]
      },
      "name": "initiallyHiddenColumns",
      "propertyType": "new"
    },
    "selectable": {
      "location": {
        "start": {
          "line": 360,
          "column": 4
        },
        "end": {
          "line": 364,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget contains content which may be selected by the user.\n\nIf the value set to <code>true</code> the native browser selection can\nbe used for text selection. But it is normally useful for\nforms fields, longer texts/documents, editors, etc.\n\nNote: This has no effect on Table!"
          }
        ]
      },
      "name": "selectable",
      "propertyType": "new",
      "refine": true,
      "defaultValue": false,
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "selectionModel": {
      "location": {
        "start": {
          "line": 368,
          "column": 4
        },
        "end": {
          "line": 373,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The selection model."
          }
        ]
      },
      "name": "selectionModel",
      "propertyType": "new",
      "event": "changeSelectionModel",
      "apply": "_applySelectionModel",
      "check": "qx.ui.table.selection.Model"
    },
    "tableModel": {
      "location": {
        "start": {
          "line": 377,
          "column": 4
        },
        "end": {
          "line": 382,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The table model."
          }
        ]
      },
      "name": "tableModel",
      "propertyType": "new",
      "event": "changeTableModel",
      "apply": "_applyTableModel",
      "check": "qx.ui.table.ITableModel"
    },
    "rowHeight": {
      "location": {
        "start": {
          "line": 386,
          "column": 4
        },
        "end": {
          "line": 393,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The height of the table rows."
          }
        ]
      },
      "name": "rowHeight",
      "propertyType": "new",
      "themeable": true,
      "event": "changeRowHeight",
      "apply": "_applyRowHeight",
      "check": "Number",
      "defaultValue": 20
    },
    "forceLineHeight": {
      "location": {
        "start": {
          "line": 402,
          "column": 4
        },
        "end": {
          "line": 406,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Force line height to match row height.  May be disabled if cell\nrenderers being used wish to render multiple lines of data within a\ncell.  (With the default setting, all but the first of multiple lines\nof data will not be visible.)"
          }
        ]
      },
      "name": "forceLineHeight",
      "propertyType": "new",
      "check": "Boolean",
      "defaultValue": true
    },
    "headerCellsVisible": {
      "location": {
        "start": {
          "line": 414,
          "column": 4
        },
        "end": {
          "line": 420,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the header cells are visible. When setting this to false,\nyou'll likely also want to set the {#columnVisibilityButtonVisible}\nproperty to false as well, to entirely remove the header row."
          }
        ]
      },
      "name": "headerCellsVisible",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyHeaderCellsVisible",
      "check": "Boolean",
      "defaultValue": true
    },
    "headerCellHeight": {
      "location": {
        "start": {
          "line": 424,
          "column": 4
        },
        "end": {
          "line": 432,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The height of the header cells."
          }
        ]
      },
      "name": "headerCellHeight",
      "propertyType": "new",
      "themeable": true,
      "event": "changeHeaderCellHeight",
      "apply": "_applyHeaderCellHeight",
      "allowNull": true,
      "check": "Integer",
      "defaultValue": 16
    },
    "statusBarVisible": {
      "location": {
        "start": {
          "line": 436,
          "column": 4
        },
        "end": {
          "line": 441,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether to show the status bar"
          }
        ]
      },
      "name": "statusBarVisible",
      "propertyType": "new",
      "apply": "_applyStatusBarVisible",
      "check": "Boolean",
      "defaultValue": true
    },
    "additionalStatusBarText": {
      "location": {
        "start": {
          "line": 445,
          "column": 4
        },
        "end": {
          "line": 450,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The Statusbartext, set it, if you want some more Information"
          }
        ]
      },
      "name": "additionalStatusBarText",
      "propertyType": "new",
      "apply": "_applyAdditionalStatusBarText",
      "allowNull": true
    },
    "columnVisibilityButtonVisible": {
      "location": {
        "start": {
          "line": 454,
          "column": 4
        },
        "end": {
          "line": 460,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether to show the column visibility button"
          }
        ]
      },
      "name": "columnVisibilityButtonVisible",
      "propertyType": "new",
      "themeable": true,
      "apply": "_applyColumnVisibilityButtonVisible",
      "check": "Boolean",
      "defaultValue": true
    },
    "metaColumnCounts": {
      "location": {
        "start": {
          "line": 467,
          "column": 4
        },
        "end": {
          "line": 471,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer[]} The number of columns per meta column. If the last array entry is -1,\nthis meta column will get the remaining columns."
          }
        ]
      },
      "name": "metaColumnCounts",
      "propertyType": "new",
      "apply": "_applyMetaColumnCounts",
      "check": "Object"
    },
    "focusCellOnPointerMove": {
      "location": {
        "start": {
          "line": 478,
          "column": 4
        },
        "end": {
          "line": 483,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the focus should moved when the pointer is moved over a cell. If false\nthe focus is only moved on pointer taps."
          }
        ]
      },
      "name": "focusCellOnPointerMove",
      "propertyType": "new",
      "apply": "_applyFocusCellOnPointerMove",
      "check": "Boolean",
      "defaultValue": false
    },
    "rowFocusChangeModifiesSelection": {
      "location": {
        "start": {
          "line": 488,
          "column": 4
        },
        "end": {
          "line": 492,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether row focus change by keyboard also modifies selection"
          }
        ]
      },
      "name": "rowFocusChangeModifiesSelection",
      "propertyType": "new",
      "check": "Boolean",
      "defaultValue": true
    },
    "showCellFocusIndicator": {
      "location": {
        "start": {
          "line": 497,
          "column": 4
        },
        "end": {
          "line": 502,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the cell focus indicator should be shown"
          }
        ]
      },
      "name": "showCellFocusIndicator",
      "propertyType": "new",
      "apply": "_applyShowCellFocusIndicator",
      "check": "Boolean",
      "defaultValue": true
    },
    "contextMenuFromDataCellsOnly": {
      "location": {
        "start": {
          "line": 513,
          "column": 4
        },
        "end": {
          "line": 518,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "By default, the \"cellContextmenu\" event is fired only when a data cell\nis right-clicked. It is not fired when a right-click occurs in the\nempty area of the table below the last data row. By turning on this\nproperty, \"cellContextMenu\" events will also be generated when a\nright-click occurs in that empty area. In such a case, row identifier\nin the event data will be null, so event handlers can check (row ===\nnull) to handle this case."
          }
        ]
      },
      "name": "contextMenuFromDataCellsOnly",
      "propertyType": "new",
      "apply": "_applyContextMenuFromDataCellsOnly",
      "check": "Boolean",
      "defaultValue": true
    },
    "keepFirstVisibleRowComplete": {
      "location": {
        "start": {
          "line": 524,
          "column": 4
        },
        "end": {
          "line": 529,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the table should keep the first visible row complete. If set to false,\nthe first row may be rendered partial, depending on the vertical scroll value."
          }
        ]
      },
      "name": "keepFirstVisibleRowComplete",
      "propertyType": "new",
      "apply": "_applyKeepFirstVisibleRowComplete",
      "check": "Boolean",
      "defaultValue": true
    },
    "alwaysUpdateCells": {
      "location": {
        "start": {
          "line": 537,
          "column": 4
        },
        "end": {
          "line": 541,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the table cells should be updated when only the selection or the\nfocus changed. This slows down the table update but allows to react on a\nchanged selection or a changed focus in a cell renderer."
          }
        ]
      },
      "name": "alwaysUpdateCells",
      "propertyType": "new",
      "check": "Boolean",
      "defaultValue": false
    },
    "resetSelectionOnHeaderTap": {
      "location": {
        "start": {
          "line": 551,
          "column": 4
        },
        "end": {
          "line": 556,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether to reset the selection when a header cell is tapped. Since\nmost data models do not have provisions to retain a selection after\nsorting, the default is to reset the selection in this case. Some data\nmodels, however, do have the capability to retain the selection, so\nwhen using those, this property should be set to false."
          }
        ]
      },
      "name": "resetSelectionOnHeaderTap",
      "propertyType": "new",
      "apply": "_applyResetSelectionOnHeaderTap",
      "check": "Boolean",
      "defaultValue": true
    },
    "dataRowRenderer": {
      "location": {
        "start": {
          "line": 560,
          "column": 4
        },
        "end": {
          "line": 566,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The renderer to use for styling the rows."
          }
        ]
      },
      "name": "dataRowRenderer",
      "propertyType": "new",
      "event": "changeDataRowRenderer",
      "allowNull": true,
      "check": "qx.ui.table.IRowRenderer"
    },
    "modalCellEditorPreOpenFunction": {
      "location": {
        "start": {
          "line": 583,
          "column": 4
        },
        "end": {
          "line": 588,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A function to call when before modal cell editor is opened."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(cellEditor, cellInfo)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellEditor {qx.ui.window.Window}\nThe modal window which has been created for this cell editor",
            "paramName": "cellEditor",
            "description": "\nThe modal window which has been created for this cell editor",
            "type": "qx.ui.window.Window"
          },
          {
            "name": "@param",
            "body": "cellInfo {Map}\nInformation about the cell for which this cell editor was created.\nIt contains the following properties:\ncol, row, xPos, value",
            "paramName": "cellInfo",
            "description": "\nInformation about the cell for which this cell editor was created.\nIt contains the following properties:\ncol, row, xPos, value",
            "type": "Map"
          }
        ]
      },
      "name": "modalCellEditorPreOpenFunction",
      "propertyType": "new",
      "allowNull": true,
      "check": "Function"
    },
    "newColumnMenu": {
      "location": {
        "start": {
          "line": 594,
          "column": 4
        },
        "end": {
          "line": 600,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A function to instantiate a new column menu button."
          }
        ]
      },
      "name": "newColumnMenu",
      "propertyType": "new",
      "check": "Function"
    },
    "newSelectionManager": {
      "location": {
        "start": {
          "line": 608,
          "column": 4
        },
        "end": {
          "line": 614,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A function to instantiate a selection manager.  this allows subclasses of\nTable to subclass this internal class.  To take effect, this property must\nbe set before calling the Table constructor."
          }
        ]
      },
      "name": "newSelectionManager",
      "propertyType": "new",
      "check": "Function"
    },
    "newSelectionModel": {
      "location": {
        "start": {
          "line": 622,
          "column": 4
        },
        "end": {
          "line": 628,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A function to instantiate a selection model.  this allows subclasses of\nTable to subclass this internal class.  To take effect, this property must\nbe set before calling the Table constructor."
          }
        ]
      },
      "name": "newSelectionModel",
      "propertyType": "new",
      "check": "Function"
    },
    "newTableColumnModel": {
      "location": {
        "start": {
          "line": 636,
          "column": 4
        },
        "end": {
          "line": 642,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A function to instantiate a table column model.  This allows subclasses\nof Table to subclass this internal class.  To take effect, this\nproperty must be set before calling the Table constructor."
          }
        ]
      },
      "name": "newTableColumnModel",
      "propertyType": "new",
      "check": "Function"
    },
    "newTablePane": {
      "location": {
        "start": {
          "line": 650,
          "column": 4
        },
        "end": {
          "line": 656,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A function to instantiate a table pane.  this allows subclasses of\nTable to subclass this internal class.  To take effect, this property\nmust be set before calling the Table constructor."
          }
        ]
      },
      "name": "newTablePane",
      "propertyType": "new",
      "check": "Function"
    },
    "newTablePaneHeader": {
      "location": {
        "start": {
          "line": 664,
          "column": 4
        },
        "end": {
          "line": 670,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A function to instantiate a table pane.  this allows subclasses of\nTable to subclass this internal class.  To take effect, this property\nmust be set before calling the Table constructor."
          }
        ]
      },
      "name": "newTablePaneHeader",
      "propertyType": "new",
      "check": "Function"
    },
    "newTablePaneScroller": {
      "location": {
        "start": {
          "line": 678,
          "column": 4
        },
        "end": {
          "line": 684,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A function to instantiate a table pane scroller.  this allows\nsubclasses of Table to subclass this internal class.  To take effect,\nthis property must be set before calling the Table constructor."
          }
        ]
      },
      "name": "newTablePaneScroller",
      "propertyType": "new",
      "check": "Function"
    },
    "newTablePaneModel": {
      "location": {
        "start": {
          "line": 692,
          "column": 4
        },
        "end": {
          "line": 698,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A function to instantiate a table pane model.  this allows subclasses\nof Table to subclass this internal class.  To take effect, this\nproperty must be set before calling the Table constructor."
          }
        ]
      },
      "name": "newTablePaneModel",
      "propertyType": "new",
      "check": "Function"
    },
    "dragScrollThresholdX": {
      "type": "property",
      "name": "dragScrollThresholdX",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling"
    },
    "dragScrollThresholdY": {
      "type": "property",
      "name": "dragScrollThresholdY",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling"
    },
    "dragScrollSlowDownFactor": {
      "type": "property",
      "name": "dragScrollSlowDownFactor",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling"
    }
  },
  "members": {
    "__focusedCol": {
      "location": {
        "start": {
          "line": 712,
          "column": 4
        },
        "end": {
          "line": 712,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__focusedRow": {
      "location": {
        "start": {
          "line": 713,
          "column": 4
        },
        "end": {
          "line": 713,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__scrollerParent": {
      "location": {
        "start": {
          "line": 715,
          "column": 4
        },
        "end": {
          "line": 715,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__selectionManager": {
      "location": {
        "start": {
          "line": 717,
          "column": 4
        },
        "end": {
          "line": 717,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__additionalStatusBarText": {
      "location": {
        "start": {
          "line": 719,
          "column": 4
        },
        "end": {
          "line": 719,
          "column": 36
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastRowCount": {
      "location": {
        "start": {
          "line": 720,
          "column": 4
        },
        "end": {
          "line": 720,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__internalChange": {
      "location": {
        "start": {
          "line": 721,
          "column": 4
        },
        "end": {
          "line": 721,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__columnMenuButtons": {
      "location": {
        "start": {
          "line": 723,
          "column": 4
        },
        "end": {
          "line": 723,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__columnModel": {
      "location": {
        "start": {
          "line": 724,
          "column": 4
        },
        "end": {
          "line": 724,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__emptyTableModel": {
      "location": {
        "start": {
          "line": 725,
          "column": 4
        },
        "end": {
          "line": 725,
          "column": 28
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__hadVerticalScrollBar": {
      "location": {
        "start": {
          "line": 727,
          "column": 4
        },
        "end": {
          "line": 727,
          "column": 33
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__timer": {
      "location": {
        "start": {
          "line": 729,
          "column": 4
        },
        "end": {
          "line": 729,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_createChildControlImpl": {
      "location": {
        "start": {
          "line": 733,
          "column": 4
        },
        "end": {
          "line": 768,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "paramName": "id",
            "description": " ID of the child control. If a # is used, the id is\nthe part in front of the #.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "hash {String?undefined} If a child control name contains a #,\nall text following the # will be the hash argument.",
            "paramName": "hash",
            "description": " If a child control name contains a #,\nall text following the # will be the hash argument.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The created control or <code>null</code>",
            "type": "qx.ui.core.Widget",
            "desc": " The created control or <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applySelectionModel": {
      "location": {
        "start": {
          "line": 773,
          "column": 4
        },
        "end": {
          "line": 782,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyRowHeight": {
      "location": {
        "start": {
          "line": 786,
          "column": 4
        },
        "end": {
          "line": 793,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyHeaderCellsVisible": {
      "location": {
        "start": {
          "line": 797,
          "column": 4
        },
        "end": {
          "line": 812,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyHeaderCellHeight": {
      "location": {
        "start": {
          "line": 816,
          "column": 4
        },
        "end": {
          "line": 823,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getEmptyTableModel": {
      "location": {
        "start": {
          "line": 832,
          "column": 4
        },
        "end": {
          "line": 841,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get an empty table model instance to use for this table. Use this table\nto configure the table with no table model."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.ITableModel} The empty table model",
            "type": "qx.ui.table.ITableModel",
            "desc": " The empty table model"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyTableModel": {
      "location": {
        "start": {
          "line": 845,
          "column": 4
        },
        "end": {
          "line": 889,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getTableColumnModel": {
      "location": {
        "start": {
          "line": 897,
          "column": 4
        },
        "end": {
          "line": 922,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the The table column model."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.columnmodel.Basic} The table's column model",
            "type": "qx.ui.table.columnmodel.Basic",
            "desc": " The table's column model"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyStatusBarVisible": {
      "location": {
        "start": {
          "line": 926,
          "column": 4
        },
        "end": {
          "line": 937,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyAdditionalStatusBarText": {
      "location": {
        "start": {
          "line": 941,
          "column": 4
        },
        "end": {
          "line": 945,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyColumnVisibilityButtonVisible": {
      "location": {
        "start": {
          "line": 949,
          "column": 4
        },
        "end": {
          "line": 956,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyMetaColumnCounts": {
      "location": {
        "start": {
          "line": 960,
          "column": 4
        },
        "end": {
          "line": 1113,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyFocusCellOnPointerMove": {
      "location": {
        "start": {
          "line": 1117,
          "column": 4
        },
        "end": {
          "line": 1124,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyShowCellFocusIndicator": {
      "location": {
        "start": {
          "line": 1128,
          "column": 4
        },
        "end": {
          "line": 1135,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyContextMenuFromDataCellsOnly": {
      "location": {
        "start": {
          "line": 1139,
          "column": 4
        },
        "end": {
          "line": 1146,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyKeepFirstVisibleRowComplete": {
      "location": {
        "start": {
          "line": 1150,
          "column": 4
        },
        "end": {
          "line": 1157,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyResetSelectionOnHeaderTap": {
      "location": {
        "start": {
          "line": 1161,
          "column": 4
        },
        "end": {
          "line": 1168,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getSelectionManager": {
      "location": {
        "start": {
          "line": 1176,
          "column": 4
        },
        "end": {
          "line": 1178,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the selection manager."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.selection.Manager} the selection manager.",
            "type": "qx.ui.table.selection.Manager",
            "desc": " the selection manager."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getPaneScrollerArr": {
      "location": {
        "start": {
          "line": 1186,
          "column": 4
        },
        "end": {
          "line": 1188,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns an array containing all TablePaneScrollers in this table."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Scroller[]} all TablePaneScrollers in this table.",
            "type": "qx.ui.table.pane.Scroller[]",
            "desc": " all TablePaneScrollers in this table."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getPaneScroller": {
      "location": {
        "start": {
          "line": 1197,
          "column": 4
        },
        "end": {
          "line": 1199,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a TablePaneScroller of this table."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "metaColumn {Integer} the meta column to get the TablePaneScroller for.",
            "paramName": "metaColumn",
            "description": " the meta column to get the TablePaneScroller for.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Scroller} the qx.ui.table.pane.Scroller.",
            "type": "qx.ui.table.pane.Scroller",
            "desc": " the qx.ui.table.pane.Scroller."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_cleanUpMetaColumns": {
      "location": {
        "start": {
          "line": 1209,
          "column": 4
        },
        "end": {
          "line": 1220,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Cleans up the meta columns."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fromMetaColumn {Integer} the first meta column to clean up. All following\nmeta columns will be cleaned up, too. All previous meta columns will\nstay unchanged. If 0 all meta columns will be cleaned up.",
            "paramName": "fromMetaColumn",
            "description": " the first meta column to clean up. All following\nmeta columns will be cleaned up, too. All previous meta columns will\nstay unchanged. If 0 all meta columns will be cleaned up.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onChangeLocale": {
      "location": {
        "start": {
          "line": 1228,
          "column": 4
        },
        "end": {
          "line": 1232,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the locale has changed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Event} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onChangeTheme": {
      "location": {
        "start": {
          "line": 1236,
          "column": 4
        },
        "end": {
          "line": 1242,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "_onSelectionChanged": {
      "location": {
        "start": {
          "line": 1250,
          "column": 4
        },
        "end": {
          "line": 1259,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the selection has changed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTableModelMetaDataChanged": {
      "location": {
        "start": {
          "line": 1267,
          "column": 4
        },
        "end": {
          "line": 1276,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the table model meta data has changed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTableModelDataChanged": {
      "location": {
        "start": {
          "line": 1284,
          "column": 4
        },
        "end": {
          "line": 1293,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the table model data has changed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onContextMenuOpen": {
      "location": {
        "start": {
          "line": 1297,
          "column": 4
        },
        "end": {
          "line": 1304,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The event object",
            "paramName": "e",
            "description": " The event object",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_updateTableData": {
      "location": {
        "start": {
          "line": 1317,
          "column": 4
        },
        "end": {
          "line": 1347,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "To update the table if the table model has changed and remove selection."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "firstRow {Integer} The index of the first row that has changed.",
            "paramName": "firstRow",
            "description": " The index of the first row that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lastRow {Integer} The index of the last row that has changed.",
            "paramName": "lastRow",
            "description": " The index of the last row that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "firstColumn {Integer} The model index of the first column that has changed.",
            "paramName": "firstColumn",
            "description": " The model index of the first column that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lastColumn {Integer} The model index of the last column that has changed.",
            "paramName": "lastColumn",
            "description": " The model index of the last column that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "removeStart {Integer ? null} The first index of the interval (including), to remove selection.",
            "paramName": "removeStart",
            "description": " The first index of the interval (including), to remove selection.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "removeCount {Integer ? null} The count of the interval, to remove selection.",
            "paramName": "removeCount",
            "description": " The count of the interval, to remove selection.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onScrollY": {
      "location": {
        "start": {
          "line": 1355,
          "column": 4
        },
        "end": {
          "line": 1370,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when a TablePaneScroller has been scrolled vertically."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onKeyPress": {
      "location": {
        "start": {
          "line": 1379,
          "column": 4
        },
        "end": {
          "line": 1384,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when a key was pressed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.KeySequence} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "qx.event.type.KeySequence"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} please use _onKeyDown instead!"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onKeyDown": {
      "location": {
        "start": {
          "line": 1390,
          "column": 4
        },
        "end": {
          "line": 1526,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when on key down event"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.KeySequence} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onFocusChanged": {
      "location": {
        "start": {
          "line": 1534,
          "column": 4
        },
        "end": {
          "line": 1541,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the table gets the focus."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onColVisibilityChanged": {
      "location": {
        "start": {
          "line": 1549,
          "column": 4
        },
        "end": {
          "line": 1565,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the visibility of a column has changed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onColWidthChanged": {
      "location": {
        "start": {
          "line": 1573,
          "column": 4
        },
        "end": {
          "line": 1585,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the width of a column has changed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onColOrderChanged": {
      "location": {
        "start": {
          "line": 1593,
          "column": 4
        },
        "end": {
          "line": 1604,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the column order has changed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map} the event.",
            "paramName": "evt",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getTablePaneScrollerAtPageX": {
      "location": {
        "start": {
          "line": 1614,
          "column": 4
        },
        "end": {
          "line": 1618,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the TablePaneScroller at a certain x position in the page. If there is\nno TablePaneScroller at this position, null is returned."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageX {Integer} the position in the page to check (in pixels).",
            "paramName": "pageX",
            "description": " the position in the page to check (in pixels).",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Scroller} the TablePaneScroller or null.",
            "type": "qx.ui.table.pane.Scroller",
            "desc": " the TablePaneScroller or null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setFocusedCell": {
      "location": {
        "start": {
          "line": 1630,
          "column": 4
        },
        "end": {
          "line": 1651,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the currently focused cell. A value of <code>null</code> hides the\nfocus cell."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer?null} the model index of the focused cell's column.",
            "paramName": "col",
            "description": " the model index of the focused cell's column.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "row {Integer?null} the model index of the focused cell's row.",
            "paramName": "row",
            "description": " the model index of the focused cell's row.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "scrollVisible {Boolean ? false} whether to scroll the new focused cell\nvisible.",
            "paramName": "scrollVisible",
            "description": " whether to scroll the new focused cell\nvisible.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "resetSelection": {
      "location": {
        "start": {
          "line": 1657,
          "column": 4
        },
        "end": {
          "line": 1659,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets (clears) the current selection"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "resetCellFocus": {
      "location": {
        "start": {
          "line": 1665,
          "column": 4
        },
        "end": {
          "line": 1667,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the focused cell."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFocusedColumn": {
      "location": {
        "start": {
          "line": 1675,
          "column": 4
        },
        "end": {
          "line": 1677,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the column of the currently focused cell."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the model index of the focused cell's column.",
            "type": "Integer",
            "desc": " the model index of the focused cell's column."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFocusedRow": {
      "location": {
        "start": {
          "line": 1685,
          "column": 4
        },
        "end": {
          "line": 1687,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the row of the currently focused cell."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the model index of the focused cell's column.",
            "type": "Integer",
            "desc": " the model index of the focused cell's column."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "highlightFocusedRow": {
      "location": {
        "start": {
          "line": 1697,
          "column": 4
        },
        "end": {
          "line": 1700,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Select whether the focused row is highlighted"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "bHighlight {Boolean}\nFlag indicating whether the focused row should be highlighted.",
            "paramName": "bHighlight",
            "description": "\nFlag indicating whether the focused row should be highlighted.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clearFocusedRowHighlight": {
      "location": {
        "start": {
          "line": 1715,
          "column": 4
        },
        "end": {
          "line": 1738,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the highlighting of the current focus row.\n\nThis is used to temporarily remove the highlighting of the currently\nfocused row, and is expected to be used most typically by adding a\nlistener on the \"pointerout\" event, so that the focus highlighting is\nsuspended when the pointer leaves the table:\n\ntable.addListener(\"pointerout\", table.clearFocusedRowHighlight);"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Pointer} Incoming pointer event",
            "paramName": "evt",
            "description": " Incoming pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "moveFocusedCell": {
      "location": {
        "start": {
          "line": 1747,
          "column": 4
        },
        "end": {
          "line": 1773,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Moves the focus."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "deltaX {Integer} The delta by which the focus should be moved on the x axis.",
            "paramName": "deltaX",
            "description": " The delta by which the focus should be moved on the x axis.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "deltaY {Integer} The delta by which the focus should be moved on the y axis.",
            "paramName": "deltaY",
            "description": " The delta by which the focus should be moved on the y axis.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollCellVisible": {
      "location": {
        "start": {
          "line": 1782,
          "column": 4
        },
        "end": {
          "line": 1802,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Scrolls a cell visible."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column the cell belongs to.",
            "paramName": "col",
            "description": " the model index of the column the cell belongs to.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "row {Integer} the model index of the row the cell belongs to.",
            "paramName": "row",
            "description": " the model index of the row the cell belongs to.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isEditing": {
      "location": {
        "start": {
          "line": 1810,
          "column": 4
        },
        "end": {
          "line": 1819,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether currently a cell is editing."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} whether currently a cell is editing.",
            "type": "var",
            "desc": " whether currently a cell is editing."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "startEditing": {
      "location": {
        "start": {
          "line": 1828,
          "column": 4
        },
        "end": {
          "line": 1839,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Starts editing the currently focused cell. Does nothing if already editing\nor if the column is not editable."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether editing was started",
            "type": "Boolean",
            "desc": " whether editing was started"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stopEditing": {
      "location": {
        "start": {
          "line": 1845,
          "column": 4
        },
        "end": {
          "line": 1853,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Stops editing and writes the editor's value to the model."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "cancelEditing": {
      "location": {
        "start": {
          "line": 1859,
          "column": 4
        },
        "end": {
          "line": 1867,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Stops editing without writing the editor's value to the model."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateContent": {
      "location": {
        "start": {
          "line": 1873,
          "column": 4
        },
        "end": {
          "line": 1878,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Update the table content of every attached table pane."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "blockHeaderElements": {
      "location": {
        "start": {
          "line": 1884,
          "column": 4
        },
        "end": {
          "line": 1891,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Activates the blocker widgets on all column headers and the\ncolumn button"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "unblockHeaderElements": {
      "location": {
        "start": {
          "line": 1898,
          "column": 4
        },
        "end": {
          "line": 1905,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Deactivates the blocker widgets on all column headers and the\ncolumn button"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getMetaColumnAtPageX": {
      "location": {
        "start": {
          "line": 1914,
          "column": 4
        },
        "end": {
          "line": 1928,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the meta column at a certain x position in the page. If there is no\nmeta column at this position, -1 is returned."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageX {Integer} the position in the page to check (in pixels).",
            "paramName": "pageX",
            "description": " the position in the page to check (in pixels).",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the index of the meta column or -1.",
            "type": "Integer",
            "desc": " the index of the meta column or -1."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getMetaColumnAtColumnX": {
      "location": {
        "start": {
          "line": 1938,
          "column": 4
        },
        "end": {
          "line": 1954,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the meta column a column is shown in. If the column is not shown at\nall, -1 is returned."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "visXPos {Integer} the visible x position of the column.",
            "paramName": "visXPos",
            "description": " the visible x position of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the meta column the column is shown in.",
            "type": "Integer",
            "desc": " the meta column the column is shown in."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updateStatusBar": {
      "location": {
        "start": {
          "line": 1960,
          "column": 4
        },
        "end": {
          "line": 1993,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates the text shown in the status bar."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updateScrollerWidths": {
      "location": {
        "start": {
          "line": 1999,
          "column": 4
        },
        "end": {
          "line": 2014,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates the widths of all scrollers."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updateScrollBarVisibility": {
      "location": {
        "start": {
          "line": 2020,
          "column": 4
        },
        "end": {
          "line": 2084,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates the visibility of the scrollbars in the meta columns."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_initColumnMenu": {
      "location": {
        "start": {
          "line": 2090,
          "column": 4
        },
        "end": {
          "line": 2138,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Initialize the column menu"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_createColumnVisibilityCheckBoxHandler": {
      "location": {
        "start": {
          "line": 2150,
          "column": 4
        },
        "end": {
          "line": 2157,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates a handler for a check box of the column visibility menu."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of column to create the handler for.",
            "paramName": "col",
            "description": " the model index of column to create the handler for.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} The created event handler.",
            "type": "Function",
            "desc": " The created event handler."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setColumnWidth": {
      "location": {
        "start": {
          "line": 2166,
          "column": 4
        },
        "end": {
          "line": 2168,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the width of a column."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of column.",
            "paramName": "col",
            "description": " the model index of column.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer} the new width in pixels.",
            "paramName": "width",
            "description": " the new width in pixels.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onResize": {
      "location": {
        "start": {
          "line": 2174,
          "column": 4
        },
        "end": {
          "line": 2179,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resize event handler"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "addListener": {
      "location": {
        "start": {
          "line": 2183,
          "column": 4
        },
        "end": {
          "line": 2200,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\nthe event listener. When not given, the corresponding dispatcher\nusually falls back to a default, which is the target\nby convention. Note this is not a strict requirement, i.e.\ncustom dispatchers can follow a different strategy.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\nthe event listener. When not given, the corresponding dispatcher\nusually falls back to a default, which is the target\nby convention. Note this is not a strict requirement, i.e.\ncustom dispatchers can follow a different strategy.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\ncapturing phase or the bubbling phase of the event. The default is\nto attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\ncapturing phase or the bubbling phase of the event. The default is\nto attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\nusing the {@link #removeListenerById} method.",
            "type": "String",
            "desc": " An opaque id, which can be used to remove the event listener\nusing the {@link #removeListenerById} method."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "removeListener": {
      "location": {
        "start": {
          "line": 2204,
          "column": 4
        },
        "end": {
          "line": 2217,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} reference to the 'this' variable inside the callback",
            "paramName": "self",
            "description": " reference to the 'this' variable inside the callback",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to remove the event listener of\nthe bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to remove the event listener of\nthe bubbling or of the capturing phase.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "Boolean",
            "desc": " Whether the event was removed successfully (has existed)"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "removeListenerById": {
      "location": {
        "start": {
          "line": 2221,
          "column": 4
        },
        "end": {
          "line": 2238,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id returned by {@link #addListener}",
            "paramName": "id",
            "description": " The id returned by {@link #addListener}",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "Boolean",
            "desc": " Whether the event was removed successfully (has existed)"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "destroy": {
      "location": {
        "start": {
          "line": 2241,
          "column": 4
        },
        "end": {
          "line": 2245,
          "column": 5
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_findScrollableParent": {
      "type": "function",
      "name": "_findScrollableParent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Finds the first scrollable parent (in the parent chain)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.LayoutItem} The widget to start from.",
            "paramName": "widget",
            "description": " The widget to start from.",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} A scrollable widget.",
            "type": "qx.ui.core.Widget",
            "desc": " A scrollable widget."
          }
        ]
      }
    },
    "_isScrollable": {
      "type": "function",
      "name": "_isScrollable",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the widget is scrollable."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to check.",
            "paramName": "widget",
            "description": " The widget to check.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the widget is scrollable.",
            "type": "Boolean",
            "desc": " Whether the widget is scrollable."
          }
        ]
      }
    },
    "_getBounds": {
      "type": "function",
      "name": "_getBounds",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the bounds of the given scrollable."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
            "paramName": "scrollable",
            "description": " Scrollable which has scrollbar child controls.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with all four bounds (e.g. {\"left\":0, \"top\":20, \"right\":0, \"bottom\":80}).",
            "type": "Map",
            "desc": " A map with all four bounds (e.g. {\"left\":0, \"top\":20, \"right\":0, \"bottom\":80})."
          }
        ]
      }
    },
    "_getEdgeType": {
      "type": "function",
      "name": "_getEdgeType",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the edge type or null if the pointer isn't within one of the thresholds."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "diff {Map} Difference map with all for edgeTypes.",
            "paramName": "diff",
            "description": " Difference map with all for edgeTypes.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "thresholdX {Number} x-axis threshold.",
            "paramName": "thresholdX",
            "description": " x-axis threshold.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "thresholdY {Number} y-axis threshold.",
            "paramName": "thresholdY",
            "description": " y-axis threshold.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "type": "String",
            "desc": " One of the four edgeTypes ('left', 'right', 'top', 'bottom')."
          }
        ]
      }
    },
    "_getAxis": {
      "type": "function",
      "name": "_getAxis",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the axis ('x' or 'y') by the edge type."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "edgeType {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "paramName": "edgeType",
            "description": " One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "type": "String"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If edgeType is not one of the distinct four ones."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Returns 'y' or 'x'.",
            "type": "String",
            "desc": " Returns 'y' or 'x'."
          }
        ]
      }
    },
    "_getThresholdByEdgeType": {
      "type": "function",
      "name": "_getThresholdByEdgeType",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the threshold amount by edge type."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "edgeType {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "paramName": "edgeType",
            "description": " One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The threshold of the x or y axis.",
            "type": "Number",
            "desc": " The threshold of the x or y axis."
          }
        ]
      }
    },
    "_isScrollbarVisible": {
      "type": "function",
      "name": "_isScrollbarVisible",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the scrollbar is visible."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
            "paramName": "scrollable",
            "description": " Scrollable which has scrollbar child controls.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "axis {String} Can be 'y' or 'x'.",
            "paramName": "axis",
            "description": " Can be 'y' or 'x'.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the scrollbar is visible.",
            "type": "Boolean",
            "desc": " Whether the scrollbar is visible."
          }
        ]
      }
    },
    "_isScrollbarExceedingMaxPos": {
      "type": "function",
      "name": "_isScrollbarExceedingMaxPos",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the scrollbar is exceeding it's maximum position."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollbar {qx.ui.core.scroll.IScrollBar} Scrollbar to check.",
            "paramName": "scrollbar",
            "description": " Scrollbar to check.",
            "type": "qx.ui.core.scroll.IScrollBar"
          },
          {
            "name": "@param",
            "body": "axis {String} Can be 'y' or 'x'.",
            "paramName": "axis",
            "description": " Can be 'y' or 'x'.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "amount {Number} Amount to scroll which may be negative.",
            "paramName": "amount",
            "description": " Amount to scroll which may be negative.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the amount will exceed the scrollbar max position.",
            "type": "Boolean",
            "desc": " Whether the amount will exceed the scrollbar max position."
          }
        ]
      }
    },
    "_calculateThresholdExceedance": {
      "type": "function",
      "name": "_calculateThresholdExceedance",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Calculates the threshold exceedance (which may be negative)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "diff {Number} Difference value of one edgeType.",
            "paramName": "diff",
            "description": " Difference value of one edgeType.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "threshold {Number} x-axis or y-axis threshold.",
            "paramName": "threshold",
            "description": " x-axis or y-axis threshold.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Threshold exceedance amount (positive or negative).",
            "type": "Number",
            "desc": " Threshold exceedance amount (positive or negative)."
          }
        ]
      }
    },
    "_calculateScrollAmount": {
      "type": "function",
      "name": "_calculateScrollAmount",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Calculates the scroll amount (which may be negative).\nThe amount is influenced by the scrollbar size (bigger = faster)\nthe exceedanceAmount (bigger = faster) and the slowDownFactor."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollbarSize {Number} Size of the scrollbar.",
            "paramName": "scrollbarSize",
            "description": " Size of the scrollbar.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "exceedanceAmount {Number} Threshold exceedance amount (positive or negative).",
            "paramName": "exceedanceAmount",
            "description": " Threshold exceedance amount (positive or negative).",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Scroll amount (positive or negative).",
            "type": "Number",
            "desc": " Scroll amount (positive or negative)."
          }
        ]
      }
    },
    "_scrollBy": {
      "type": "function",
      "name": "_scrollBy",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Scrolls the given scrollable on the given axis for the given amount."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
            "paramName": "scrollable",
            "description": " Scrollable which has scrollbar child controls.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "axis {String} Can be 'y' or 'x'.",
            "paramName": "axis",
            "description": " Can be 'y' or 'x'.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "exceedanceAmount {Number} Threshold exceedance amount (positive or negative).",
            "paramName": "exceedanceAmount",
            "description": " Threshold exceedance amount (positive or negative).",
            "type": "Number"
          }
        ]
      }
    },
    "__onDrag": {
      "type": "function",
      "name": "__onDrag",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT HANDLERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Event handler for the drag event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} The drag event instance.",
            "paramName": "e",
            "description": " The drag event instance.",
            "type": "qx.event.type.Drag"
          }
        ]
      }
    },
    "__onDragend": {
      "type": "function",
      "name": "__onDragend",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for the dragend event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} The drag event instance.",
            "paramName": "e",
            "description": " The drag event instance.",
            "type": "qx.event.type.Drag"
          }
        ]
      }
    },
    "getDragScrollThresholdX": {
      "type": "function",
      "name": "getDragScrollThresholdX",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDragScrollThresholdX": {
      "type": "function",
      "name": "setDragScrollThresholdX",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDragScrollThresholdX": {
      "type": "function",
      "name": "resetDragScrollThresholdX",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling"
    },
    "getDragScrollThresholdY": {
      "type": "function",
      "name": "getDragScrollThresholdY",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDragScrollThresholdY": {
      "type": "function",
      "name": "setDragScrollThresholdY",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDragScrollThresholdY": {
      "type": "function",
      "name": "resetDragScrollThresholdY",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling"
    },
    "getDragScrollSlowDownFactor": {
      "type": "function",
      "name": "getDragScrollSlowDownFactor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Float",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDragScrollSlowDownFactor": {
      "type": "function",
      "name": "setDragScrollSlowDownFactor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Float",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDragScrollSlowDownFactor": {
      "type": "function",
      "name": "resetDragScrollSlowDownFactor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.MDragDropScrolling"
    },
    "getInitiallyHiddenColumns": {
      "type": "function",
      "name": "getInitiallyHiddenColumns",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setInitiallyHiddenColumns": {
      "type": "function",
      "name": "setInitiallyHiddenColumns",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetInitiallyHiddenColumns": {
      "type": "function",
      "name": "resetInitiallyHiddenColumns",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getSelectionModel": {
      "type": "function",
      "name": "getSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.table.selection.Model",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setSelectionModel": {
      "type": "function",
      "name": "setSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.table.selection.Model",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetSelectionModel": {
      "type": "function",
      "name": "resetSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getTableModel": {
      "type": "function",
      "name": "getTableModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.table.ITableModel",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setTableModel": {
      "type": "function",
      "name": "setTableModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.table.ITableModel",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetTableModel": {
      "type": "function",
      "name": "resetTableModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getRowHeight": {
      "type": "function",
      "name": "getRowHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setRowHeight": {
      "type": "function",
      "name": "setRowHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetRowHeight": {
      "type": "function",
      "name": "resetRowHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getForceLineHeight": {
      "type": "function",
      "name": "getForceLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isForceLineHeight": {
      "type": "function",
      "name": "isForceLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setForceLineHeight": {
      "type": "function",
      "name": "setForceLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetForceLineHeight": {
      "type": "function",
      "name": "resetForceLineHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getHeaderCellsVisible": {
      "type": "function",
      "name": "getHeaderCellsVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isHeaderCellsVisible": {
      "type": "function",
      "name": "isHeaderCellsVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setHeaderCellsVisible": {
      "type": "function",
      "name": "setHeaderCellsVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetHeaderCellsVisible": {
      "type": "function",
      "name": "resetHeaderCellsVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getHeaderCellHeight": {
      "type": "function",
      "name": "getHeaderCellHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setHeaderCellHeight": {
      "type": "function",
      "name": "setHeaderCellHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetHeaderCellHeight": {
      "type": "function",
      "name": "resetHeaderCellHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getStatusBarVisible": {
      "type": "function",
      "name": "getStatusBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isStatusBarVisible": {
      "type": "function",
      "name": "isStatusBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setStatusBarVisible": {
      "type": "function",
      "name": "setStatusBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetStatusBarVisible": {
      "type": "function",
      "name": "resetStatusBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAdditionalStatusBarText": {
      "type": "function",
      "name": "getAdditionalStatusBarText",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAdditionalStatusBarText": {
      "type": "function",
      "name": "setAdditionalStatusBarText",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAdditionalStatusBarText": {
      "type": "function",
      "name": "resetAdditionalStatusBarText",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getColumnVisibilityButtonVisible": {
      "type": "function",
      "name": "getColumnVisibilityButtonVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isColumnVisibilityButtonVisible": {
      "type": "function",
      "name": "isColumnVisibilityButtonVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setColumnVisibilityButtonVisible": {
      "type": "function",
      "name": "setColumnVisibilityButtonVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetColumnVisibilityButtonVisible": {
      "type": "function",
      "name": "resetColumnVisibilityButtonVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getMetaColumnCounts": {
      "type": "function",
      "name": "getMetaColumnCounts",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Object",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setMetaColumnCounts": {
      "type": "function",
      "name": "setMetaColumnCounts",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Object",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetMetaColumnCounts": {
      "type": "function",
      "name": "resetMetaColumnCounts",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getFocusCellOnPointerMove": {
      "type": "function",
      "name": "getFocusCellOnPointerMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isFocusCellOnPointerMove": {
      "type": "function",
      "name": "isFocusCellOnPointerMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setFocusCellOnPointerMove": {
      "type": "function",
      "name": "setFocusCellOnPointerMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetFocusCellOnPointerMove": {
      "type": "function",
      "name": "resetFocusCellOnPointerMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getRowFocusChangeModifiesSelection": {
      "type": "function",
      "name": "getRowFocusChangeModifiesSelection",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isRowFocusChangeModifiesSelection": {
      "type": "function",
      "name": "isRowFocusChangeModifiesSelection",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setRowFocusChangeModifiesSelection": {
      "type": "function",
      "name": "setRowFocusChangeModifiesSelection",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetRowFocusChangeModifiesSelection": {
      "type": "function",
      "name": "resetRowFocusChangeModifiesSelection",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getShowCellFocusIndicator": {
      "type": "function",
      "name": "getShowCellFocusIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isShowCellFocusIndicator": {
      "type": "function",
      "name": "isShowCellFocusIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setShowCellFocusIndicator": {
      "type": "function",
      "name": "setShowCellFocusIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetShowCellFocusIndicator": {
      "type": "function",
      "name": "resetShowCellFocusIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getContextMenuFromDataCellsOnly": {
      "type": "function",
      "name": "getContextMenuFromDataCellsOnly",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isContextMenuFromDataCellsOnly": {
      "type": "function",
      "name": "isContextMenuFromDataCellsOnly",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setContextMenuFromDataCellsOnly": {
      "type": "function",
      "name": "setContextMenuFromDataCellsOnly",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetContextMenuFromDataCellsOnly": {
      "type": "function",
      "name": "resetContextMenuFromDataCellsOnly",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getKeepFirstVisibleRowComplete": {
      "type": "function",
      "name": "getKeepFirstVisibleRowComplete",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isKeepFirstVisibleRowComplete": {
      "type": "function",
      "name": "isKeepFirstVisibleRowComplete",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setKeepFirstVisibleRowComplete": {
      "type": "function",
      "name": "setKeepFirstVisibleRowComplete",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetKeepFirstVisibleRowComplete": {
      "type": "function",
      "name": "resetKeepFirstVisibleRowComplete",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getAlwaysUpdateCells": {
      "type": "function",
      "name": "getAlwaysUpdateCells",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isAlwaysUpdateCells": {
      "type": "function",
      "name": "isAlwaysUpdateCells",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAlwaysUpdateCells": {
      "type": "function",
      "name": "setAlwaysUpdateCells",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAlwaysUpdateCells": {
      "type": "function",
      "name": "resetAlwaysUpdateCells",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getResetSelectionOnHeaderTap": {
      "type": "function",
      "name": "getResetSelectionOnHeaderTap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isResetSelectionOnHeaderTap": {
      "type": "function",
      "name": "isResetSelectionOnHeaderTap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setResetSelectionOnHeaderTap": {
      "type": "function",
      "name": "setResetSelectionOnHeaderTap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetResetSelectionOnHeaderTap": {
      "type": "function",
      "name": "resetResetSelectionOnHeaderTap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getDataRowRenderer": {
      "type": "function",
      "name": "getDataRowRenderer",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.table.IRowRenderer",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setDataRowRenderer": {
      "type": "function",
      "name": "setDataRowRenderer",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.table.IRowRenderer",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetDataRowRenderer": {
      "type": "function",
      "name": "resetDataRowRenderer",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getModalCellEditorPreOpenFunction": {
      "type": "function",
      "name": "getModalCellEditorPreOpenFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setModalCellEditorPreOpenFunction": {
      "type": "function",
      "name": "setModalCellEditorPreOpenFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetModalCellEditorPreOpenFunction": {
      "type": "function",
      "name": "resetModalCellEditorPreOpenFunction",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getNewColumnMenu": {
      "type": "function",
      "name": "getNewColumnMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setNewColumnMenu": {
      "type": "function",
      "name": "setNewColumnMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetNewColumnMenu": {
      "type": "function",
      "name": "resetNewColumnMenu",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getNewSelectionManager": {
      "type": "function",
      "name": "getNewSelectionManager",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setNewSelectionManager": {
      "type": "function",
      "name": "setNewSelectionManager",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetNewSelectionManager": {
      "type": "function",
      "name": "resetNewSelectionManager",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getNewSelectionModel": {
      "type": "function",
      "name": "getNewSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setNewSelectionModel": {
      "type": "function",
      "name": "setNewSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetNewSelectionModel": {
      "type": "function",
      "name": "resetNewSelectionModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getNewTableColumnModel": {
      "type": "function",
      "name": "getNewTableColumnModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setNewTableColumnModel": {
      "type": "function",
      "name": "setNewTableColumnModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetNewTableColumnModel": {
      "type": "function",
      "name": "resetNewTableColumnModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getNewTablePane": {
      "type": "function",
      "name": "getNewTablePane",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setNewTablePane": {
      "type": "function",
      "name": "setNewTablePane",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetNewTablePane": {
      "type": "function",
      "name": "resetNewTablePane",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getNewTablePaneHeader": {
      "type": "function",
      "name": "getNewTablePaneHeader",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setNewTablePaneHeader": {
      "type": "function",
      "name": "setNewTablePaneHeader",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetNewTablePaneHeader": {
      "type": "function",
      "name": "resetNewTablePaneHeader",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getNewTablePaneScroller": {
      "type": "function",
      "name": "getNewTablePaneScroller",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setNewTablePaneScroller": {
      "type": "function",
      "name": "setNewTablePaneScroller",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetNewTablePaneScroller": {
      "type": "function",
      "name": "resetNewTablePaneScroller",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    },
    "getNewTablePaneModel": {
      "type": "function",
      "name": "getNewTablePaneModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Function",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setNewTablePaneModel": {
      "type": "function",
      "name": "setNewTablePaneModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Function",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetNewTablePaneModel": {
      "type": "function",
      "name": "resetNewTablePaneModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 2257,
        "column": 2
      },
      "end": {
        "line": 2283,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": [
    "qx.ui.treevirtual.TreeVirtual"
  ]
}